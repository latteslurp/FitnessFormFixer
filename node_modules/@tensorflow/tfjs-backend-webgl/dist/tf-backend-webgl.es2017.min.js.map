{"version":3,"file":"tf-backend-webgl.es2017.min.js","sources":["../src/canvas_util.ts","../src/tex_util.ts","../src/webgl_util.ts","../src/flags_webgl.ts","../src/addn_gpu.ts","../src/addn_packed_gpu.ts","../src/argminmax_gpu.ts","../src/packing_util.ts","../src/glsl_version.ts","../src/shader_compiler_util.ts","../src/shader_compiler.ts","../src/argminmax_packed_gpu.ts","../src/avg_pool_backprop_gpu.ts","../src/batchnorm_gpu.ts","../src/batchnorm_packed_gpu.ts","../src/binaryop_complex_gpu.ts","../src/binaryop_gpu.ts","../src/binaryop_packed_gpu.ts","../src/clip_gpu.ts","../src/clip_packed_gpu.ts","../src/complex_abs_gpu.ts","../src/concat_gpu.ts","../src/concat_packed_gpu.ts","../src/conv_backprop_gpu.ts","../src/conv_backprop_gpu_depthwise.ts","../src/conv_gpu.ts","../src/conv_gpu_depthwise.ts","../src/conv_packed_gpu_depthwise.ts","../src/crop_and_resize_gpu.ts","../src/cumsum_gpu.ts","../src/decode_matrix_gpu.ts","../src/decode_matrix_packed_gpu.ts","../src/depth_to_space_gpu.ts","../src/diag_gpu.ts","../src/encode_float_gpu.ts","../src/encode_float_packed_gpu.ts","../src/encode_matrix_gpu.ts","../src/encode_matrix_packed_gpu.ts","../src/fft_gpu.ts","../src/fill_gpu.ts","../src/gather_gpu.ts","../src/gather_nd_gpu.ts","../src/gpgpu_util.ts","../src/gpgpu_context.ts","../src/gpgpu_math.ts","../src/im2col_packed_gpu.ts","../src/lrn_gpu.ts","../src/lrn_grad_gpu.ts","../src/lrn_packed_gpu.ts","../src/max_pool_backprop_gpu.ts","../src/mulmat_packed_gpu.ts","../src/multinomial_gpu.ts","../src/onehot_gpu.ts","../src/pack_gpu.ts","../src/pad_gpu.ts","../src/pad_packed_gpu.ts","../src/pool_gpu.ts","../src/reduce_gpu.ts","../src/reshape_packed_gpu.ts","../src/resize_bilinear_backprop_gpu.ts","../src/resize_bilinear_gpu.ts","../src/resize_bilinear_packed_gpu.ts","../src/resize_nearest_neighbor_backprop_gpu.ts","../src/resize_nearest_neighbor_gpu.ts","../src/reverse_gpu.ts","../src/reverse_packed_gpu.ts","../src/scatter_gpu.ts","../src/segment_gpu.ts","../src/select_gpu.ts","../src/slice_gpu.ts","../src/slice_packed_gpu.ts","../src/strided_slice_gpu.ts","../src/texture_manager.ts","../src/tile_gpu.ts","../src/unaryop_gpu.ts","../src/unaryop_packed_gpu.ts","../src/unpack_gpu.ts","../src/backend_webgl.ts","../src/kernels/Div.ts","../src/kernels/Div_impl.ts","../src/kernels/FromPixels_utils/from_pixels_gpu.ts","../src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../src/kernels/FromPixels.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js","../src/kernel_utils/shared.ts","../src/kernel_utils/reshape.ts","../src/kernels/Max_impl.ts","../src/kernel_utils/reduce.ts","../src/transpose_gpu.ts","../src/transpose_packed_gpu.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Max.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/rotate_gpu.ts","../src/kernels/RotateWithOffset.ts","../src/register_all_kernels.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/kernels/Transpose.ts","../src/webgl.ts","../src/index.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    contexts[webGLVersion] = getWebGLRenderingContext(webGLVersion);\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {backend_util, DataId, DataType, Tensor, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensors?: {real: Tensor, imag: Tensor};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const windowSize = reduceInfo.windowSize;\n    const batchSize = reduceInfo.batchSize;\n    const inSize = reduceInfo.inSize;\n    const outSize = Math.ceil(inSize / windowSize);\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const ADD = 'return a + b;';\nexport const SUB = 'return a - b;';\nexport const MUL = 'return a * b;';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nexport const DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nexport const INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nexport const POW = `\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const EQUAL = `return float(a == b);`;\n\nexport const NOT_EQUAL = `return float(a != b);`;\n\nexport const LESS = `return float(a < b);`;\n\nexport const LESS_EQUAL = `return float(a <= b);`;\n\nexport const GREATER = `return float(a > b);`;\n\nexport const GREATER_EQUAL = `return float(a >= b);`;\n\nexport const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\n\nexport const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\n\nexport const MAX = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nexport const MIN = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nexport const MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nexport const ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nexport const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\n\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nconst CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nexport const DIV = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const INT_DIV = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const POW = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const PRELU = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const ATAN2 = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport const LESS = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const LESS_EQUAL = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const GREATER = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const GREATER_EQUAL = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const LOGICAL_AND = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const LOGICAL_OR = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const MAX = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MIN = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MOD = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n        } else {\n          const channels = getChannels('coords', rank);\n          checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `int xR; int xC; int xCOffset;`;\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n      }\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let texelC = 0; texelC < texelsAcross; texelC++) {\n        const c = texelC * 2;\n\n        mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n\n        if (strideWidth === 1) {\n          if (c < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    xTexelR${r}C${c}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                }\n\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n              }\n            }\n          }\n        } else {  // stride > 1\n          if (c < filterWidth) {\n            mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n            // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n              }\n            }\n\n            mainLoop += `}`;\n          }\n        }\n\n        if (c < filterWidth) {\n          mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n          }\n        }\n      }\n    }\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n      }\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  index: WebGLUniformLocation;\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      uniform float index;\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(index: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.index == null) {\n        this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n      }\n      gpgpu.gl.uniform1f(this.index, index);\n    };\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const COMPLEX_FFT = {\n  REAL: 'return real * expR - imag * expI;',\n  IMAG: 'return real * expI + imag * expR;'\n};\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, inputShape: [number, number], inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${op}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  valueLoc: WebGLUniformLocation;\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], indicesLength: number, axis: number) {\n    const outputShape: number[] = aShape.slice();\n    outputShape[axis] = indicesLength;\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, axis);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const rank = aShape.length;\n  if (rank > 4) {\n    throw Error(`Gather for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `int(getIndices(resRC))`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === axis) {\n      sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    const vertexShader: WebGLShader = gpgpu_util.createVertexShader(gl);\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const userCode = program.userCode;\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(\n      inputInfos, outShapeInfo, userCode, program.packedInputs);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    const shouldThrow = false;\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData,\n    customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) =>\n        void): void {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      transposeA = false, transposeB = false, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(rc.x, ${aSample});\n          vec4 b = getMatrixB(rc.x, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(seed: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(${constantValue});\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const windowSize = reduceInfo.windowSize;\n    const batchSize = reduceInfo.batchSize;\n    const inSize = reduceInfo.inSize;\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nconst CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nexport const SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const NEG = `return -x;`;\n\nexport const CEIL = `return ceil(x);`;\n\nexport const FLOOR = `return floor(x);`;\n\nexport const SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const IS_NAN = `return float(isnan(x));`;\n\nexport const IS_INF = `return float(isinf(x));`;\n\nexport const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const EXP = `return exp(x);`;\n\nexport const EXPM1 = `return exp(x) - 1.0;`;\n\nexport const LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nexport const LOG1P = `return log(1.0 + x);`;\n\nexport const SQRT = `return sqrt(x);`;\n\nexport const RSQRT = `return inversesqrt(x);`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\n/**\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n *\n * epsilon is the difference between 1.0 and the next representable\n * float. For a single precision 32 bit float this should be 2^-23, see:\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n *\n * too_large = (x > -threshold) is value above which exp(x) may overflow\n * but softplus(x) == x is within machine epsilon\n *\n * too_small = (x < threshold) is value below which exp(x) may underflow,\n * but softplus(x) == exp(x) is within machine epsilon.\n */\nexport const SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const SIN = CHECK_NAN_SNIPPET + `\n  return sin(x);\n`;\n\nexport const COS = CHECK_NAN_SNIPPET + `\n  return cos(x);\n`;\n\nexport const TAN = `return tan(x);`;\n\nexport const ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));`;\n\nexport const ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const SQUARE = `return x * x;`;\n\nexport const RECIPROCAL = `return 1.0 / x;`;\n\nexport const LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const TO_INT = `return float(int(x));`;\n\nexport const CLONE = 'return x;';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const LOG = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {complex, DataId, div, engine, env, imag, max, MemoryInfo, range, real, RecursiveArray, reshape, scalar, softmax, tensor, tidy, TimingInfo, transpose} from '@tensorflow/tfjs-core';\nimport {backend_util, buffer, kernel_impls, slice_util, util} from '@tensorflow/tfjs-core';\nimport {DataStorage, DataType, KernelBackend, NumericDataType, Rank, Scalar, ShapeMap, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorInfo, TypedArray, upcastType} from '@tensorflow/tfjs-core';\n\nconst {segment_util} = backend_util;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\n\nimport {AddNProgram} from './addn_gpu';\nimport {AddNPackedProgram} from './addn_packed_gpu';\nimport {ArgMinMaxProgram} from './argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from './argminmax_packed_gpu';\nimport {AvgPool2DBackpropProgram, AvgPool3DBackpropProgram} from './avg_pool_backprop_gpu';\nimport {BatchNormProgram} from './batchnorm_gpu';\nimport {BatchNormPackedProgram} from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport {BinaryOpProgram} from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport {BinaryOpPackedProgram} from './binaryop_packed_gpu';\nimport {getWebGLContext} from './canvas_util';\nimport {ClipProgram} from './clip_gpu';\nimport {ClipPackedProgram} from './clip_packed_gpu';\nimport {ComplexAbsProgram} from './complex_abs_gpu';\nimport {ConcatProgram} from './concat_gpu';\nimport {ConcatPackedProgram} from './concat_packed_gpu';\nimport {Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram} from './conv_backprop_gpu';\nimport {DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram} from './conv_backprop_gpu_depthwise';\nimport {Conv2DProgram, Conv3DProgram} from './conv_gpu';\nimport {DepthwiseConv2DProgram} from './conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from './conv_packed_gpu_depthwise';\nimport {CropAndResizeProgram} from './crop_and_resize_gpu';\nimport {CumSumProgram} from './cumsum_gpu';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {DepthToSpaceProgram} from './depth_to_space_gpu';\nimport {DiagProgram} from './diag_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport {FFTProgram} from './fft_gpu';\nimport {FillProgram} from './fill_gpu';\nimport {GatherProgram} from './gather_gpu';\nimport {GatherNDProgram} from './gather_nd_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {Im2ColPackedProgram} from './im2col_packed_gpu';\nimport {LRNProgram} from './lrn_gpu';\nimport {LRNGradProgram} from './lrn_grad_gpu';\nimport {LRNPackedProgram} from './lrn_packed_gpu';\nimport {MaxPool2DBackpropProgram, MaxPool3DBackpropProgram} from './max_pool_backprop_gpu';\nimport {MatMulPackedProgram} from './mulmat_packed_gpu';\nimport {MultinomialProgram} from './multinomial_gpu';\nimport {OneHotProgram} from './onehot_gpu';\nimport {PackProgram} from './pack_gpu';\nimport {PadProgram} from './pad_gpu';\nimport {PadPackedProgram} from './pad_packed_gpu';\nimport {Pool2DProgram, Pool3DProgram} from './pool_gpu';\nimport {ReduceProgram} from './reduce_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport {ResizeBilinearBackpropProgram} from './resize_bilinear_backprop_gpu';\nimport {ResizeBilinearProgram} from './resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from './resize_bilinear_packed_gpu';\nimport {ResizeNearestNeigborBackpropProgram} from './resize_nearest_neighbor_backprop_gpu';\nimport {ResizeNearestNeighborProgram} from './resize_nearest_neighbor_gpu';\nimport {ReverseProgram} from './reverse_gpu';\nimport {ReversePackedProgram} from './reverse_packed_gpu';\nimport {ScatterProgram} from './scatter_gpu';\nimport {SegmentOpProgram} from './segment_gpu';\nimport {SelectProgram} from './select_gpu';\nimport {SliceProgram} from './slice_gpu';\nimport {SlicePackedProgram} from './slice_packed_gpu';\nimport {StridedSliceProgram} from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport {TileProgram} from './tile_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nimport {BackendValues} from '@tensorflow/tfjs-core';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\nfunction mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return binaryop_packed_gpu.PRELU;\n    }\n    return binaryop_gpu.PRELU;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  private dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n  private cpuBackend: KernelBackend;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n  private warnedAboutCPUBackend = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() +\n        (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n        this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {};\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD});\n    return dataId;\n  }\n\n  move(dataId: DataId, values: BackendValues, shape: number[], dtype: DataType):\n      void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD});\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensors, slice, shape, isPacked} = texData;\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeData(res.dataId);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues = complexTensors.real.dataSync() as Float32Array;\n      const imagValues = complexTensors.imag.dataSync() as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensors, isPacked} = texData;\n\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeData(res.dataId);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all(\n          [complexTensors.real.data(), complexTensors.imag.data()]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeData(tmpDownloadTarget.dataId);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeData(tmpTarget.dataId);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeData(output.dataId);\n\n    return vals;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  disposeData(dataId: DataId): void {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensors} = this.texData.get(dataId);\n    if (complexTensors != null) {\n      complexTensors.real.dispose();\n      complexTensors.imag.dispose();\n    }\n    this.texData.delete(dataId);\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  private getCPUBackend(): KernelBackend|null {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = engine().findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    const cpuBackend = this.getCPUBackend();\n    if (!this.warnedAboutCPUBackend && cpuBackend == null &&\n        !env().getBool('IS_TEST')) {\n      console.warn(\n          'Your application contains ops that are small enough to be ' +\n          'executed on the CPU backend, however the CPU backend cannot ' +\n          'be found. Consider importing the CPU backend ' +\n          '(@tensorflow/tfjs-backend-cpu) for better performance.');\n\n      this.warnedAboutCPUBackend = true;\n    }\n\n    return cpuBackend != null &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutput(real.shape, 'complex64');\n    const resultData = this.texData.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: engine().keep(real.clone()),\n      imag: engine().keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.slice(x, begin, size);\n    }\n    // Short-circuit computation if the slice is zero-sized.\n    if (util.sizeFromShape(size) === 0) {\n      return tensor([], size, x.dtype) as T;\n    }\n    const {isPacked} = this.texData.get(x.dataId);\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n    if (isPacked || !isContinous) {\n      const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n          new SlicePackedProgram(size) :\n          new SliceProgram(size);\n      const customSetup = program.getCustomSetupFunc(begin);\n      return this.compileAndRun(program, [x], null, customSetup);\n    }\n    this.uploadToGPU(x.dataId);\n    return this.shallowSlice(x, begin, size) as T;\n  }\n\n  private shallowSlice(x: Tensor, begin: number[], size: number[]): Tensor {\n    const xTexData = this.texData.get(x.dataId);\n    const t = this.makeOutput(size, x.dtype);\n    const newTexData = this.texData.get(t.dataId);\n    // Copy texture data from the original tensor.\n    Object.assign(newTexData, xTexData);\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n    if (xTexData.slice) {\n      // We are slicing an already sliced tensor, so we have to accumulate\n      // the offset.\n      flatOffset += xTexData.slice.flatOffset;\n    }\n    newTexData.slice = {\n      flatOffset,\n      // Point to the original dataId, which is used to do ref counting.\n      origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    };\n\n    // Increase the ref count for that data bucket.\n    const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n\n    return t;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.stridedSlice(x, begin, end, strides);\n    }\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tensor([], outShape) as T;\n    }\n\n    const program = new StridedSliceProgram(begin, strides, outShape);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new ReversePackedProgram(x.shape, axis) :\n        new ReverseProgram(x.shape, axis);\n    return this.compileAndRun(program, [x]);\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => real(t));\n      const imags = tensors.map((t) => imag(t));\n      return complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    if (this.shouldExecuteOnCPU(tensors)) {\n      return this.cpuBackend.concat(tensors, axis);\n    }\n\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n    if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n      const rightSide = this.concat(tensors.slice(midIndex), axis);\n      return this.concat([leftSide, rightSide], axis);\n    }\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n      const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n      return this.compileAndRun(program, tensors);\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape =\n        backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n    const tensors2D =\n        tensors.map(t => t.as2D(-1, util.sizeFromShape(t.shape.slice(axis))));\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const res: Tensor = this.compileAndRun(program, tensors2D);\n    return res.reshape(outShape);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.neg(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.NEG, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const [batch, , ] = a.shape;\n\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n      if (transposeA) {\n        a = transpose(a, [0, 2, 1]);\n      }\n      if (transposeB) {\n        b = transpose(b, [0, 2, 1]);\n      }\n\n      const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n      const axis = outerShapeB === 1 ? 2 : 1;\n      const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n      return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n    return this.compileAndRun<Tensor3D>(program, [a, b], dtype);\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          backend_util.FusedBatchMatMulConfig): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const [batch, , ] = a.shape;\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB,\n        hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [a, b];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun<Tensor3D>(program, inputs, dtype);\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64') {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n\n      const realProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n      const imagProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n      const inputs = [\n        this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),\n        this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),\n        this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),\n        this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)\n      ];\n      const real = this.compileAndRun<Tensor>(realProgram, inputs);\n      const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n\n      const complex = this.complex(real, imag);\n      real.dispose();\n      imag.dispose();\n      return complex;\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.multiply(a, b);\n    }\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], a.dtype);\n  }\n\n  batchNorm(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D, scale?: Tensor4D|Tensor1D,\n      varianceEpsilon?: number): Tensor4D {\n    const inputs = [x, mean, variance];\n\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      inputs.push(offset);\n    }\n\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      inputs.push(scale);\n    }\n\n    if (env().getBool('WEBGL_PACK_NORMALIZATION')) {\n      const batchNormPackedProgram = new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n      return this.compileAndRun<Tensor4D>(batchNormPackedProgram, inputs);\n    }\n\n    const batchNormProgram = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n        varianceEpsilon);\n    return this.compileAndRun(batchNormProgram, inputs);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, radius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :\n        new LRNProgram(x.shape, radius, bias, alpha, beta);\n    return this.compileAndRun(program, [x]);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program =\n        new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n    return this.compileAndRun(program, [inputImage, outputImage, dy]);\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    if (x.dtype === 'string') {\n      const data = this.readSync(x.dataId) as Uint8Array[];\n      const decodedData = data.map(d => util.decodeString(d));\n      const buf = buffer(x.shape, x.dtype, decodedData);\n      return tile(buf, reps) as T;\n    }\n    const program = new TileProgram(x.shape, reps);\n    return this.compileAndRun(program, [x]);\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new PadPackedProgram(x.shape, paddings, constantValue) :\n        new PadProgram(x.shape, paddings, constantValue);\n    return this.compileAndRun(program, [x]);\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    if (this.shouldExecuteOnCPU([x, indices])) {\n      return this.cpuBackend.gather(x, indices, axis);\n    }\n    const program = new GatherProgram(x.shape, indices.size, axis);\n    return this.compileAndRun(program, [x, indices]);\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return transpose(x.reshape(reshaped), permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: Array<[number, number]>): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const completePaddings: Array<[number, number]> = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n\n    const reshapedPaddedShape =\n        backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n        reshapedPaddedShape.length, blockShape.length, false);\n\n    const flattenShape = backend_util.getReshapedPermuted(\n        paddedX.shape, blockShape, prod, false);\n\n    const paddedXT = transpose(\n        paddedX.reshape(reshapedPaddedShape),\n        permutedReshapedPaddedPermutation);\n    return reshape(paddedXT, flattenShape) as T;\n  }\n\n  private reduce(\n      x: Tensor2D, reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod',\n      dtype: DataType): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const output = this.compileAndRun<Tensor2D>(program, [x], dtype);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.reduce(output, reduceType, dtype);\n  }\n\n  private argReduce(\n      x: Tensor2D, reduceType: 'max'|'min',\n      bestIndicesA: Tensor2D = null): Tensor2D {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n      batchSize = bestIndicesA.shape[0];\n      inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program =\n        new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n      inputs.push(bestIndicesA);\n    }\n    const output = this.compileAndRun<Tensor2D>(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.argReduce(x, reduceType, output);\n  }\n\n  private argReducePacked(\n      x: Tensor, reduceType: 'max'|'min', bestIndicesA: Tensor = null): Tensor {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(\n        inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = this.compileAndRun<Tensor>(program, inputs, 'int32');\n    if (output.rank === x.rank) {\n      return this.argReducePacked(x, reduceType, output);\n    }\n    return output;\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.prod(x, axes);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    let axis = 0;\n    const permutation = backend_util.getAxesPermutation([axis], x.rank);\n    let permutedX = x;\n    if (permutation != null) {\n      permutedX = transpose(x, permutation);\n      axis = backend_util.getInnerMostAxes(1, x.rank)[0];\n    }\n\n    const outShape =\n        segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = permutedX.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    let result =\n        this.segOpCompute(\n                a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n    if (permutation != null) {\n      result =\n          transpose(result, backend_util.getUndoAxesPermutation(permutation));\n    }\n    return result;\n  }\n\n  private segOpCompute(\n      x: Tensor2D, segOpType: 'unsortedSegmentSum', segmentIds: Tensor1D,\n      dtype: DataType, numSegments: number): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize =\n        segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output =\n        this.compileAndRun<Tensor2D>(program, [x, segmentIds], dtype);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n    segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n    return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n  }\n\n  private argMinMaxReduce(x: Tensor, axis: number, reduceType: 'min'|'max'):\n      Tensor {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims(\n        'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n        x.rank);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n      const [outShape, reduceShape] =\n          backend_util.computeOutAndReduceShapes(x.shape, axes);\n      const inSize = util.sizeFromShape(reduceShape);\n      const a2D = x.as2D(-1, inSize);\n      return this.argReduce(a2D, reduceType).reshape(outShape);\n    }\n    return this.argReducePacked(x, reduceType);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'min');\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'max');\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const size = x.shape[axis];\n    let result = x;\n    // Use cumsum parallel algorithm, ref:\n    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n      const program = new CumSumProgram(x.shape, false, reverse);\n      const customSetup = program.getCustomSetupFunc(i);\n      const prevResult = result;\n      result = this.compileAndRun(program, [result], result.dtype, customSetup);\n      prevResult.dispose();\n    }\n    // For exclusive cumsum, shift the end result in the direction of sum and\n    // add 0 to the front index.\n    if (exclusive) {\n      const program = new CumSumProgram(x.shape, exclusive, reverse);\n      const prevResult = result;\n      result = this.compileAndRun(program, [result]);\n      prevResult.dispose();\n    }\n\n    return result;\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.less(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.greater(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    const program = new SelectProgram(condition.rank, a.shape, a.rank);\n    return this.compileAndRun(\n        program, [condition, a, b], upcastType(a.dtype, b.dtype));\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    const xVals = x.dataSync();\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.minimum(a, b);\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.maximum(a, b);\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.INT_DIV;\n    const outputDtype = 'int32';\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n    }\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], outputDtype);\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.add(a, b);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    return this.compileAndRun<Tensor>(program, [x], dtype);\n  }\n\n  private packedBinaryOp(\n      a: TensorInfo, b: TensorInfo, op: string, dtype: DataType,\n      checkOutOfBounds = false) {\n    const program =\n        new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  /**\n   * Computes a complex binary operation that can be decomposed into a simple\n   * binary operation on both the real and imagary parts.\n   */\n  private complexSeparableBinaryOp(a: Tensor, b: Tensor, op: string): Tensor {\n    const aData = this.texData.get(a.dataId);\n    const bData = this.texData.get(b.dataId);\n\n    const [real, imag] = [\n      [aData.complexTensors.real, bData.complexTensors.real],\n      [aData.complexTensors.imag, bData.complexTensors.imag]\n    ].map(complexParts => {\n      const [aPart, bPart] = complexParts;\n\n      const aHandle = this.makeComplexComponentTensorInfo(a, aPart);\n      const bHandle = this.makeComplexComponentTensorInfo(b, bPart);\n\n      const program = new BinaryOpProgram(op, a.shape, b.shape);\n      return this.compileAndRun<Tensor>(\n          program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n    });\n\n    const complex = this.complex(real, imag);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  // Returns a TensorInfo with the complex shape and the dataId of the\n  // underlying part. We need to do this because a reshaped complex tensor is\n  // not reflected in its parts.\n  private makeComplexComponentTensorInfo(\n      complexTensor: Tensor, complexPart: Tensor): TensorInfo {\n    return {\n      dataId: complexPart.dataId,\n      dtype: complexPart.dtype,\n      shape: complexTensor.shape\n    };\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.addN(tensors.slice(0, midIndex));\n      const rightSide = this.addN(tensors.slice(midIndex));\n      return this.addN([leftSide, rightSide]);\n    }\n\n    const dtype =\n        tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    return this.compileAndRun<T>(program, tensors, dtype);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.subtract(a, b);\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    const usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n    const program = usePackedOp ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n    const dtype = upcastType(a.dtype, b.dtype);\n    return this.compileAndRun<T>(program, [a, b], dtype);\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.ceil(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.CEIL, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.floor(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n  isInf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n  isFinite<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n    return this.compileAndRun(program, [x]);\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.exp(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXP, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n    return this.compileAndRun(program, [x]);\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.expm1(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softmax<T extends Tensor>(logits: T, dim: number): T {\n    const axes = util.parseAxisParam([dim], logits.shape);\n    // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n    // modularization.\n    const maxLogit = max(logits, axes);\n    const expandedShape =\n        backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n    const b = this.exp(a);\n    const sumExp = this.sum(b, axes).reshape(expandedShape);\n\n    // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n    // modularization.\n    return div(b, sumExp);\n  }\n\n  log<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.log(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.rsqrt(x);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu6<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  prelu<T extends Tensor>(x: T, alpha: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.PRELU, x.shape, alpha.shape) :\n        new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n    return this.compileAndRun(program, [x, alpha]);\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) :\n        new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n    return this.compileAndRun(program, [dy, y]);\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  int<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n    return this.compileAndRun(program, [x], 'int32');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    let program;\n    if (env().getBool('WEBGL_PACK_CLIP')) {\n      program = new ClipPackedProgram(x.shape);\n    } else {\n      program = new ClipProgram(x.shape);\n    }\n    const customSetup = program.getCustomSetupFunc(min, max);\n    return this.compileAndRun(program, [x], null, customSetup);\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.abs(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const xData = this.texData.get(x.dataId);\n\n    const program = new ComplexAbsProgram(x.shape);\n    const inputs = [\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n    ];\n\n    return this.compileAndRun<Tensor>(program, inputs) as T;\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n    return this.compileAndRun(program, [x]);\n  }\n\n  step<T extends Tensor>(x: T, alpha: number): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n    return this.compileAndRun(program, [x]);\n  }\n\n  private conv2dByMatMul(\n      x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo,\n      bias?: Tensor, activation?: backend_util.Activation,\n      preluActivationWeights?: Tensor): Tensor4D {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = this.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked =\n        (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n    if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n        !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n        !reshapeWillBeExpensive) {\n      const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                           xShape[0] * xShape[2] * xShape[3];\n      const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);\n      const filterReshaped =\n          this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n      return this.reshape<Rank.R4>(\n          this.fusedBatchMatMul({\n            a: xReshaped as Tensor3D,\n            b: filterReshaped as Tensor3D,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights\n          }),\n          convInfo.outShape);\n    }\n\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped =\n        this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n    const pointwiseConv = this.fusedBatchMatMul({\n      a: xReshaped as Tensor3D,\n      b: filterReshaped as Tensor3D,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights\n    });\n    const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n    return engine().makeTensorFromDataId(\n               pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype) as\n        Tensor4D;\n  }\n\n  private conv2dWithIm2Row(\n      x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo,\n      bias?: Tensor, activation?: backend_util.Activation,\n      preluActivationWeights?: Tensor): Tensor4D {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const {\n      filterWidth,\n      filterHeight,\n      inChannels,\n      outWidth,\n      outHeight,\n      dataFormat\n    } = convInfo;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n\n    const xSqueezed = x.squeeze([0]);\n    const w2Row = filter.reshape([1, sharedDim, -1]);\n\n    const im2ColProgram =\n        new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n    const im2Col: Tensor3D =\n        this.compileAndRun<Tensor2D>(im2ColProgram, [xSqueezed]).reshape([\n          1, x2ColShape[0], x2ColShape[1]\n        ]);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(\n        im2Col.shape, [1, numCols, convInfo.outChannels], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [im2Col, w2Row];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    const product = this.compileAndRun<Tensor4D>(matmulProgram, inputs);\n\n    if (isChannelsLast) {\n      return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n    } else {\n      return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n    }\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(\n          input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n    if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n      return this.conv2dWithIm2Row(\n          input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [input, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun(program, inputs);\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(x, filter, convInfo);\n    }\n    if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n      return this.conv2dWithIm2Row(x, filter, convInfo);\n    }\n    const program = new Conv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv2dDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n        null;\n    const inputs: Tensor[] = [input, filter];\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasBias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (shouldPackDepthwiseConv) {\n      program = new DepthwiseConvPacked2DProgram(\n          convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n      return this.compileAndRun(program, inputs);\n    }\n\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    return this.compileAndRun(program, inputs);\n  }\n\n  depthwiseConv2D(\n      x: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n      program = new DepthwiseConvPacked2DProgram(convInfo);\n      return this.compileAndRun(program, [x, filter]);\n    }\n\n    program = new DepthwiseConv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  depthwiseConv2DDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  depthwiseConv2DDerFilter(\n      x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const program = new Conv3DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv3dDerInput(\n      dy: Tensor5D, filter: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Conv3DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const program = new Conv3DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  maxPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x]);\n  }\n\n  avgPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPoolBackprop(\n      dy: Tensor4D, x: Tensor4D, y: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const getPositions = true;\n    const maxPoolPositionsProgram =\n        new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions: Tensor4D =\n        this.compileAndRun(maxPoolPositionsProgram, [x]);\n\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const result = this.compileAndRun(\n        maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n    maxPoolPositions.dispose();\n    return result as Tensor4D;\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  avgPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const getPositions = true;\n    const maxPool3dPositionsProgram =\n        new Pool3DProgram(convInfo, 'max', getPositions);\n    const maxPool3dPositions: Tensor5D =\n        this.compileAndRun(maxPool3dPositionsProgram, [x]);\n    const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = this.compileAndRun(\n        maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n    maxPool3dPositions.dispose();\n    return result as Tensor5D;\n  }\n\n  reshape<R extends Rank>(x: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const texData = this.texData.get(x.dataId);\n    if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) &&\n        !(texData.texture !== null &&\n          webgl_util.isReshapeFree(texData.shape, shape))) {\n      const info = this.packedReshape(x, shape);\n      return engine().makeTensorFromDataId(\n                 info.dataId, info.shape, info.dtype) as Tensor<R>;\n    }\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeBilinearPackedProgram(\n            x.shape, newHeight, newWidth, alignCorners) :\n        new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean):\n      Tensor4D {\n    const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n\n    return this.compileAndRun(program, [dy]);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = new ResizeNearestNeighborProgram(\n        x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean): Tensor4D {\n    const program =\n        new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n    return this.compileAndRun(program, [dy]);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    const probs = normalized ? logits : softmax(logits);\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customSetup = program.getCustomSetupFunc(seed);\n    return this.compileAndRun(program, [probs], 'int32', customSetup);\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n    return this.compileAndRun(program, [indices]);\n  }\n\n  diag(x: Tensor): Tensor {\n    const program = new DiagProgram(x.size);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cropAndResize(\n      image: Tensor4D, boxes: Tensor2D, boxIndex: Tensor1D,\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number): Tensor4D {\n    const program = new CropAndResizeProgram(\n        image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return this.compileAndRun(program, [x]);\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(updates, indices, shape);\n\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n    const flattenX = updates.reshape([numUpdates, sliceSize]);\n\n    if (outputSize === 0) {\n      return backend_util.reshapeTensor(tensor([]), shape);\n    }\n    const defaultValue = scalar(0);\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides,\n        flattenShape);\n    const res: Tensor =\n        this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n    return res.reshape(shape);\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, strides, outputSize} =\n        backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n    const sumDupeIndices = false;\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides,\n        [outputSize, 1], sumDupeIndices);\n    const res: Tensor = this.compileAndRun(\n        program, [sparseValues, sparseIndices, defaultValue]);\n    return res.reshape(outputShape);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    const inverse = false;\n    return this.fftImpl(x, inverse);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    const inverse = true;\n    return this.fftImpl(x, inverse);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const xData = this.texData.get(x.dataId);\n\n    const realProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n    const imagProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n    const inputs = [\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n    ];\n\n    const real = this.compileAndRun<Tensor>(realProgram, inputs);\n    const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n    const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        backend_util.prepareAndValidate(x, indices);\n\n    const flattenIndices = indices.reshape([numSlices, sliceRank]);\n    const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n    const program =\n        new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res: Tensor = this.compileAndRun(program, [flattenX, flattenIndices]);\n    return res.reshape(resultShape);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || util.inferDtype(value);\n\n    if (dtype === 'string') {\n      // String type should be handled in CPU memory.\n      const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n      values.fill(value as string);\n      return engine().makeTensor(values, shape, dtype, this) as Tensor<R>;\n    } else {\n      const program = new FillProgram(shape, value as number);\n      const customSetup = program.getCustomSetupFunc(value as number);\n      return this.compileAndRun(program, [], dtype, customSetup);\n    }\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported under string dtype');\n    } else {\n      // TODO(cais, smilkov): Add WebGL shader for onesLike:\n      //   https://github.com/tensorflow/tfjs/issues/1293\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  makeTensorInfo(shape: number[], dtype: DataType): TensorInfo {\n    const dataId = this.write(null /* values */, shape, dtype);\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(shape: number[], dtype: DataType): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  private unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  private packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customSetup);\n\n    dataToDispose.forEach(info => this.disposeData(info.dataId));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeData(output.dataId);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun<K extends TensorInfo>(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): K {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customSetup,\n        preventEagerUnpackingOfOutput);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as {} as K;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  private uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeData(tempDenseInputHandle.dataId);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Div, DivInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {divImpl} from './Div_impl';\n\nexport const divConfig: KernelConfig = {\n  kernelName: Div,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {a, b} = inputs as DivInputs;\n\n    const webglBackend = backend as MathBackendWebGL;\n\n    return divImpl(a, b, webglBackend);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {TensorInfo} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_gpu from '../binaryop_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport * as binaryop_packed_gpu from '../binaryop_packed_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport function divImpl(\n    a: TensorInfo, b: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  let program = new BinaryOpProgram(binaryop_gpu.DIV, a.shape, b.shape);\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(\n        binaryop_packed_gpu.DIV, a.shape, b.shape, true);\n  }\n  const output = backend.runWebGLProgram(program, [a, b], 'float32');\n  return output;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { engine, env } from '@tensorflow/tfjs-core';\nimport { backend_util, buffer, slice_util, util } from '@tensorflow/tfjs-core';\nimport { DataStorage, KernelBackend, max, reshape, TensorBuffer, upcastType } from '@tensorflow/tfjs-core';\nimport { kernel_impls } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from './cpu_util';\nimport { maxPoolPositions, pool } from './utils/pool_utils';\nfunction mapActivation(backend, x, activation, preluActivationWeights) {\n    if (activation === 'linear') {\n        return backend.linear(x);\n    }\n    else if (activation === 'relu') {\n        return backend.relu(x);\n    }\n    else if (activation === 'elu') {\n        return backend.elu(x);\n    }\n    else if (activation === 'relu6') {\n        return backend.relu6(x);\n    }\n    else if (activation === 'prelu') {\n        return backend.prelu(x, preluActivationWeights);\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);\n}\nexport class MathBackendCPU extends KernelBackend {\n    constructor() {\n        super();\n        this.blockSize = 48;\n        this.firstUse = true;\n        this.data = new DataStorage(this, engine());\n    }\n    write(values, shape, dtype) {\n        if (this.firstUse) {\n            this.firstUse = false;\n            if (env().get('IS_NODE')) {\n                backend_util.warn('\\n============================\\n' +\n                    'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n                    'Node.js. To speed things up dramatically, install our node ' +\n                    'backend, which binds to TensorFlow C++, by running ' +\n                    'npm i @tensorflow/tfjs-node, ' +\n                    'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n                    'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n                    'suffix for CUDA) at the start of your program. ' +\n                    'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n                    '\\n============================');\n            }\n        }\n        const dataId = {};\n        this.data.set(dataId, { values, dtype });\n        return dataId;\n    }\n    move(dataId, values, shape, dtype) {\n        this.data.set(dataId, { values, dtype });\n    }\n    numDataIds() {\n        return this.data.numDataIds();\n    }\n    async read(dataId) {\n        return this.readSync(dataId);\n    }\n    readSync(dataId) {\n        const { dtype, complexTensors } = this.data.get(dataId);\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensors.real.dataId);\n            const imagValues = this.readSync(complexTensors.imag.dataId);\n            return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        return this.data.get(dataId).values;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return tf.buffer(t.shape, t.dtype, decodedData);\n    }\n    makeOutput(values, shape, dtype) {\n        const dataId = this.write(values, shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    disposeData(dataId) {\n        if (this.data.has(dataId)) {\n            const { complexTensors } = this.data.get(dataId);\n            if (complexTensors != null) {\n                complexTensors.real.dispose();\n                complexTensors.imag.dispose();\n            }\n            this.data.delete(dataId);\n        }\n    }\n    async time(f) {\n        const start = util.now();\n        f();\n        const kernelMs = util.now() - start;\n        return { kernelMs };\n    }\n    memory() {\n        return {\n            // Unreliable due to automatic gc. The numbers above are cumulative.\n            unreliable: true,\n            reasons: ['The reported memory is an upper bound. Due to automatic garbage ' +\n                    'collection, the true allocated memory may be less.']\n        };\n    }\n    complex(real, imag) {\n        const result = this.makeOutput(null, real.shape, 'complex64');\n        const resultData = this.data.get(result.dataId);\n        // The backend owns the reference to the underlying real and imaginary\n        // clones. These will explicitly get disposed when the complex tensor is\n        // disposed.\n        resultData.complexTensors = {\n            real: engine().keep(real.clone()),\n            imag: engine().keep(imag.clone())\n        };\n        return result;\n    }\n    real(input) {\n        const resultData = this.data.get(input.dataId);\n        return resultData.complexTensors.real.clone();\n    }\n    imag(input) {\n        const resultData = this.data.get(input.dataId);\n        return resultData.complexTensors.imag.clone();\n    }\n    slice(x, begin, size) {\n        assertNotComplex(x, 'slice');\n        const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n        if (isContinous) {\n            const flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n            const length = util.sizeFromShape(size);\n            const vals = this.readSync(x.dataId);\n            return tf.tensor(vals.subarray(flatOffset, flatOffset + length), size, x.dtype);\n        }\n        const buffer = tf.buffer(size, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; ++i) {\n            const loc = buffer.indexToLoc(i);\n            const xLoc = loc.map((idx, j) => idx + begin[j]);\n            buffer.values[i] = xBuf.get(...xLoc);\n        }\n        return buffer.toTensor();\n    }\n    stridedSlice(x, begin, end, strides) {\n        assertNotComplex(x, 'stridedSlice');\n        const outShape = slice_util.computeOutShape(begin, end, strides);\n        if (outShape.some(axis => axis === 0)) {\n            return tf.tensor([], outShape);\n        }\n        const buffer = tf.buffer(outShape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; i++) {\n            const loc = buffer.indexToLoc(i);\n            const newLoc = new Array(loc.length);\n            for (let j = 0; j < newLoc.length; j++) {\n                newLoc[j] = loc[j] * strides[j] + begin[j];\n            }\n            buffer.set(xBuf.get(...newLoc), ...loc);\n        }\n        return buffer.toTensor();\n    }\n    diag(x) {\n        const xVals = this.readSync(x.dataId);\n        const buffer = tf.buffer([x.size, x.size], x.dtype);\n        const vals = buffer.values;\n        for (let i = 0; i < xVals.length; i++) {\n            vals[i * x.size + i] = xVals[i];\n        }\n        return buffer.toTensor();\n    }\n    unstack(x, axis) {\n        const num = x.shape[axis];\n        const outShape = new Array(x.rank - 1);\n        let outIndex = 0;\n        for (let i = 0; i < x.rank; i++) {\n            if (i !== axis) {\n                outShape[outIndex++] = x.shape[i];\n            }\n        }\n        const begin = new Array(x.rank).fill(0);\n        const size = x.shape.slice();\n        size[axis] = 1;\n        const res = new Array(num);\n        for (let i = 0; i < res.length; i++) {\n            begin[axis] = i;\n            res[i] = this.slice(x, begin, size).reshape(outShape);\n        }\n        return res;\n    }\n    reverse(x, axis) {\n        assertNotComplex(x, 'reverse');\n        const buffer = tf.buffer(x.shape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < buffer.size; i++) {\n            const outLoc = buffer.indexToLoc(i);\n            const inLoc = outLoc.slice();\n            axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n            buffer.set(xBuf.get(...inLoc), ...outLoc);\n        }\n        return buffer.toTensor();\n    }\n    concat(tensors, axis) {\n        if (tensors[0].dtype === 'complex64') {\n            const reals = tensors.map((t) => tf.real(t));\n            const imags = tensors.map((t) => tf.imag(t));\n            return tf.complex(this.concat(reals, axis), this.concat(imags, axis));\n        }\n        const tensors2D = tensors.map(t => {\n            const innerSize = util.sizeFromShape(t.shape.slice(axis));\n            return t.as2D(-1, innerSize);\n        });\n        const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis\n          */);\n        const values = tf.buffer(outShape, tensors[0].dtype)\n            .values;\n        if (tensors2D[0].shape[0] === 1) {\n            // Use built-in TypedArray.set() method for speed.\n            let offset = 0;\n            tensors2D.forEach(t => {\n                values.set(this.readSync(t.dataId), offset);\n                offset += t.size;\n            });\n        }\n        else {\n            let colOffset = 0;\n            tensors2D.forEach(t => {\n                const tVals = this.readSync(t.dataId);\n                let tIdx = 0;\n                for (let row = 0; row < t.shape[0]; ++row) {\n                    const resIdx = row * outShape[1] + colOffset;\n                    for (let col = 0; col < t.shape[1]; ++col) {\n                        values[resIdx + col] = tVals[tIdx++];\n                    }\n                }\n                colOffset += t.shape[1];\n            });\n        }\n        const finalOutShape = backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n        return tf.tensor(values, finalOutShape, tensors[0].dtype);\n    }\n    neg(x) {\n        assertNotComplex(x, 'neg');\n        return this.multiply(tf.scalar(-1), x);\n    }\n    add(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return { real: aReal + bReal, imag: aImag + bImag };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue + bValue);\n    }\n    addN(tensors) {\n        assertNotComplex(tensors, 'addN');\n        const vals = tensors.map(t => this.readSync(t.dataId));\n        const result = tf.buffer(tensors[0].shape, tensors[0].dtype);\n        const resultVals = result.values;\n        for (let i = 0; i < tensors.length; i++) {\n            const currVals = vals[i];\n            for (let j = 0; j < resultVals.length; j++) {\n                resultVals[j] += currVals[j];\n            }\n        }\n        return result.toTensor();\n    }\n    softmax(logits, dim) {\n        const axes = util.parseAxisParam([dim], logits.shape);\n        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n        // modularization.\n        const maxLogit = max(logits, axes);\n        const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n        const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n        const b = this.exp(a);\n        const sumExp = this.sum(b, axes).reshape(expandedShape);\n        // TODO(annxingyuan): Call divImpl rather than op as part of softmax\n        // kernel modularization.\n        return tf.div(b, sumExp);\n    }\n    subtract(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return { real: aReal - bReal, imag: aImag - bImag };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue - bValue);\n    }\n    pow(a, b) {\n        assertNotComplex([a, b], 'pow');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue));\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        assertNotComplex([a, b], 'matMul');\n        const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n        const leftDim = transposeA ? a.shape[2] : a.shape[1];\n        const rightDim = transposeB ? b.shape[1] : b.shape[2];\n        const batchDim = a.shape[0];\n        const aValues = this.readSync(a.dataId);\n        const bValues = this.readSync(b.dataId);\n        const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n            [a.strides[0], 1, a.strides[1]] :\n            [a.strides[0], a.strides[1], 1];\n        const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n            [1, b.strides[1], b.strides[0]] :\n            [b.strides[1], 1, b.strides[0]];\n        const size = leftDim * rightDim;\n        const result = tf.buffer([batchDim, leftDim, rightDim], a.dtype);\n        const resVals = result.values;\n        const blockSize = this.blockSize;\n        for (let b = 0; b < batchDim; b++) {\n            for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n                for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n                    for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n                        // for when blockSize doesn't evenly divide the input\n                        const iBlock = Math.min(i0 + blockSize, leftDim);\n                        const jBlock = Math.min(j0 + blockSize, rightDim);\n                        const kBlock = Math.min(k0 + blockSize, sharedDim);\n                        for (let i = i0; i < iBlock; i++) {\n                            for (let j = j0; j < jBlock; j++) {\n                                let sum = 0.0;\n                                for (let k = k0; k < kBlock; k++) {\n                                    sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                                        bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                                }\n                                resVals[b * size + (i * rightDim + j)] += sum;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result.toTensor();\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        let result = this.batchMatMul(a, b, transposeA, transposeB);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    multiply(a, b) {\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            return this.broadcastedBinaryComplexOp(a.cast('complex64'), b.cast('complex64'), (aReal, aImag, bReal, bImag) => {\n                return {\n                    real: aReal * bReal - aImag * bImag,\n                    imag: aReal * bImag + aImag * bReal\n                };\n            });\n        }\n        return this.broadcastedBinaryOp(a, b, upcastType(a.dtype, b.dtype), (aValue, bValue) => aValue * bValue);\n    }\n    floorDiv(a, b) {\n        assertNotComplex([a, b], 'floorDiv');\n        const op = (a, b) => Math.floor(a / b);\n        const outputDtype = 'int32';\n        return this.broadcastedBinaryOp(a, b, outputDtype, op);\n    }\n    sum(x, axes) {\n        assertNotComplex(x, 'sum');\n        backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(outShape, resultDtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let sum = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                sum += aVals[offset + j];\n            }\n            vals[i] = sum;\n        }\n        return result;\n    }\n    prod(x, axes) {\n        assertNotComplex(x, 'sum');\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(outShape, resultDtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let prod = 1;\n            for (let j = 0; j < reduceSize; ++j) {\n                prod *= aVals[offset + j];\n            }\n            vals[i] = prod;\n        }\n        return result;\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        assertNotComplex(x, 'unsortedSegmentSum');\n        const res = [];\n        // Reshape the segment id's so that they can be broadcast with\n        // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n        const numIters = x.rank - segmentIds.rank;\n        for (let i = 0; i < numIters; ++i) {\n            segmentIds = segmentIds.expandDims(i + 1);\n        }\n        for (let i = 0; i < numSegments; ++i) {\n            const segmentId = tf.scalar(i, 'int32');\n            const mask = tf.equal(segmentId, segmentIds).asType('float32');\n            const sum = mask.mul(x).sum(0);\n            res.push(sum);\n        }\n        return tf.stack(res);\n    }\n    argMin(x, axis) {\n        assertNotComplex(x, 'argMin');\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, 'int32');\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let min = aVals[offset];\n            let minIndex = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value < min) {\n                    min = value;\n                    minIndex = j;\n                }\n            }\n            vals[i] = minIndex;\n        }\n        return result;\n    }\n    argMax(x, axis) {\n        assertNotComplex(x, 'argMax');\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, 'int32');\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let max = aVals[offset];\n            let maxIndex = 0;\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value > max) {\n                    max = value;\n                    maxIndex = j;\n                }\n            }\n            vals[i] = maxIndex;\n        }\n        return result;\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        assertNotComplex(x, 'cumsum');\n        if (axis !== x.rank - 1) {\n            throw new Error(`backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n                `but got axis=${axis}`);\n        }\n        const resultDtype = upcastType(x.dtype, 'int32');\n        const result = tf.zeros(x.shape, resultDtype);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        const finalDim = x.shape[x.rank - 1];\n        const indexAdjuster = reverse ?\n            (i, j) => i + finalDim - j - 1 :\n            (i, j) => i + j;\n        for (let i = 0; i < aVals.length; i += finalDim) {\n            for (let j = 0; j < finalDim; j++) {\n                const idx = indexAdjuster(i, j);\n                if (j === 0) {\n                    vals[idx] = exclusive ? 0 : aVals[idx];\n                }\n                else {\n                    const prevIdx = indexAdjuster(i, j - 1);\n                    vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                        aVals[idx] + vals[prevIdx];\n                }\n            }\n        }\n        return result;\n    }\n    equal(a, b) {\n        assertNotComplex([a, b], 'equal');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal === bVal) ? 1 : 0;\n        });\n    }\n    notEqual(a, b) {\n        assertNotComplex([a, b], 'notEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal !== bVal) ? 1 : 0;\n        });\n    }\n    less(a, b) {\n        assertNotComplex([a, b], 'less');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal < bVal) ? 1 : 0;\n        });\n    }\n    lessEqual(a, b) {\n        assertNotComplex([a, b], 'lessEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal <= bVal) ? 1 : 0;\n        });\n    }\n    greater(a, b) {\n        assertNotComplex([a, b], 'greater');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal > bVal) ? 1 : 0;\n        });\n    }\n    greaterEqual(a, b) {\n        assertNotComplex([a, b], 'greaterEqual');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return (aVal >= bVal) ? 1 : 0;\n        });\n    }\n    logicalNot(x) {\n        assertNotComplex(x, 'logicalNot');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = values[i] ? 0 : 1;\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    logicalAnd(a, b) {\n        assertNotComplex([a, b], 'logicalAnd');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return aVal && bVal;\n        });\n    }\n    logicalOr(a, b) {\n        assertNotComplex([a, b], 'logicalOr');\n        return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n            return aVal || bVal;\n        });\n    }\n    select(condition, a, b) {\n        assertNotComplex([condition, a, b], 'select');\n        const values = this.readSync(condition.dataId);\n        const aValues = this.readSync(a.dataId);\n        const bValues = this.readSync(b.dataId);\n        const result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n        const newValues = this.readSync(result.dataId);\n        let index = 0;\n        const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n            1 :\n            util.sizeFromShape(a.shape.slice(1));\n        for (let i = 0; i < values.length; i++) {\n            for (let j = 0; j < offset; j++) {\n                if (values[i] === 1) {\n                    newValues[index++] = aValues[i];\n                }\n                else {\n                    newValues[index++] = bValues[i];\n                }\n            }\n        }\n        return result;\n    }\n    where(condition) {\n        assertNotComplex([condition], 'where');\n        const condVals = this.readSync(condition.dataId);\n        return whereImpl(condition.shape, condVals);\n    }\n    topk(x, k, sorted) {\n        assertNotComplex(x, 'topk');\n        const xVals = this.readSync(x.dataId);\n        return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n    min(x, axes) {\n        assertNotComplex(x, 'min');\n        backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let min = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                if (value < min) {\n                    min = value;\n                }\n            }\n            vals[i] = min;\n        }\n        return result;\n    }\n    minimum(a, b) {\n        assertNotComplex([a, b], 'minimum');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n    }\n    mod(a, b) {\n        assertNotComplex([a, b], 'mod');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n            const rem = aVal % bVal;\n            if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n                return rem;\n            }\n            else {\n                return (rem + bVal) % bVal;\n            }\n        });\n    }\n    maximum(a, b) {\n        assertNotComplex([a, b], 'maximum');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n    }\n    all(x, axes) {\n        assertNotComplex(x, 'all');\n        backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let all = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                all = all && value;\n            }\n            vals[i] = all;\n        }\n        return result;\n    }\n    any(x, axes) {\n        assertNotComplex(x, 'any');\n        backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const result = tf.zeros(outShape, x.dtype);\n        const reduceSize = util.sizeFromShape(reduceShape);\n        const vals = this.readSync(result.dataId);\n        const aVals = this.readSync(x.dataId);\n        for (let i = 0; i < vals.length; ++i) {\n            const offset = i * reduceSize;\n            let anyVal = aVals[offset];\n            for (let j = 0; j < reduceSize; ++j) {\n                const value = aVals[offset + j];\n                anyVal = anyVal || value;\n            }\n            vals[i] = anyVal;\n        }\n        return result;\n    }\n    squaredDifference(a, b) {\n        assertNotComplex([a, b], 'squaredDifference');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n            const diff = aVal - bVal;\n            return diff * diff;\n        });\n    }\n    ceil(x) {\n        assertNotComplex(x, 'ceil');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.ceil(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    floor(x) {\n        assertNotComplex(x, 'floor');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.floor(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    sign(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (values[i] < 0) {\n                newValues[i] = -1;\n            }\n            else if (values[i] > 0) {\n                newValues[i] = 1;\n            }\n            else {\n                newValues[i] = 0;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    isNaN(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Number.isNaN(values[i])) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    isInf(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Math.abs(values[i]) === Infinity) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    isFinite(x) {\n        assertNotComplex(x, 'x');\n        const values = this.readSync(x.dataId);\n        const newValues = new Uint8Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            if (Number.isFinite(values[i])) {\n                newValues[i] = 1;\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'bool');\n    }\n    round(x) {\n        assertNotComplex(x, 'round');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            // The algorithm is based on banker's rounding.\n            const base = Math.floor(values[i]);\n            if (values[i] - base < 0.5) {\n                newValues[i] = Math.floor(values[i]);\n            }\n            else if (values[i] - base > 0.5) {\n                newValues[i] = Math.ceil(values[i]);\n            }\n            else {\n                if (base % 2.0 === 0.0) {\n                    newValues[i] = base;\n                }\n                else {\n                    newValues[i] = base + 1.0;\n                }\n            }\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    exp(x) {\n        assertNotComplex(x, 'exp');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.exp(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    expm1(x) {\n        assertNotComplex(x, 'expm1');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = Math.expm1(values[i]);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    log(x) {\n        assertNotComplex(x, 'log');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.log(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    log1p(x) {\n        assertNotComplex(x, 'log1p');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.log1p(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    sqrt(x) {\n        assertNotComplex(x, 'sqrt');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = Math.sqrt(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    rsqrt(x) {\n        assertNotComplex(x, 'rsqrt');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = 1 / Math.sqrt(value);\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    reciprocal(x) {\n        assertNotComplex(x, 'reciprocal');\n        const values = this.readSync(x.dataId);\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = 1 / values[i];\n        }\n        return this.makeOutput(newValues, x.shape, 'float32');\n    }\n    linear(x) {\n        return x;\n    }\n    relu(x) {\n        assertNotComplex(x, 'relu');\n        const res = tf.zeros(x.shape, x.dtype);\n        const resVals = this.readSync(res.dataId);\n        const inVals = this.readSync(x.dataId);\n        for (let i = 0; i < inVals.length; ++i) {\n            resVals[i] = Math.max(0, inVals[i]);\n        }\n        return res;\n    }\n    relu6(x) {\n        assertNotComplex(x, 'relu');\n        const res = tf.zeros(x.shape, x.dtype);\n        const resVals = this.readSync(res.dataId);\n        const inVals = this.readSync(x.dataId);\n        for (let i = 0; i < inVals.length; ++i) {\n            resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n        }\n        return res;\n    }\n    prelu(x, a) {\n        assertNotComplex([x, a], 'prelu');\n        return this.broadcastedBinaryOp(x, a, x.dtype, (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\n    }\n    elu(x) {\n        assertNotComplex(x, 'elu');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 0) {\n                resultValues[i] = v;\n            }\n            else {\n                resultValues[i] = (Math.exp(v) - 1);\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    eluDer(dy, y) {\n        assertNotComplex([dy, y], 'eluDer');\n        const resultValues = new Float32Array(y.size);\n        const values = this.readSync(y.dataId);\n        const dyValues = this.readSync(dy.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 1) {\n                resultValues[i] = dyValues[i];\n            }\n            else {\n                resultValues[i] = dyValues[i] * (v + 1);\n            }\n        }\n        return this.makeOutput(resultValues, y.shape, 'float32');\n    }\n    selu(x) {\n        assertNotComplex(x, 'selu');\n        // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n        // see: https://arxiv.org/abs/1706.02515\n        const scaleAlpha = backend_util.SELU_SCALEALPHA;\n        const scale = backend_util.SELU_SCALE;\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            if (v >= 0) {\n                resultValues[i] = scale * v;\n            }\n            else {\n                resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    clip(x, min, max) {\n        assertNotComplex(x, 'clip');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const v = values[i];\n            resultValues[i] = v > max ? max : (v < min ? min : v);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    abs(x) {\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.abs(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    complexAbs(x) {\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < x.size; ++i) {\n            const real = values[i * 2];\n            const imag = values[i * 2 + 1];\n            resultValues[i] = Math.hypot(real, imag);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    int(x) {\n        assertNotComplex(x, 'int');\n        const resultValues = new Int32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = values[i];\n        }\n        return this.makeOutput(resultValues, x.shape, 'int32');\n    }\n    sigmoid(x) {\n        assertNotComplex(x, 'sigmoid');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    softplus(x) {\n        assertNotComplex(x, 'softplus');\n        // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n        // epsilon is the difference between 1.0 and the next representable float.\n        // For a single precision 32 bit float this should be 2^-23, see:\n        // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n        const epsilon = 1.1920928955078125e-7;\n        const threshold = Math.log(epsilon) + 2.0;\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            // Value above which exp(x) may overflow, but softplus(x) == x\n            // is within machine epsilon.\n            const tooLarge = values[i] > -threshold;\n            // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n            // is within machine epsilon.\n            const tooSmall = values[i] < threshold;\n            const expX = Math.exp(values[i]);\n            let result;\n            if (tooSmall) {\n                result = expX;\n            }\n            else if (tooLarge) {\n                result = values[i];\n            }\n            else {\n                result = Math.log(1.0 + expX);\n            }\n            resultValues[i] = result;\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    sin(x) {\n        assertNotComplex(x, 'sin');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.sin(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    cos(x) {\n        assertNotComplex(x, 'cos');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.cos(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    tan(x) {\n        assertNotComplex(x, 'tan');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.tan(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    asin(x) {\n        assertNotComplex(x, 'asin');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.asin(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    acos(x) {\n        assertNotComplex(x, 'acos');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.acos(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atan(x) {\n        assertNotComplex(x, 'atan');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.atan(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atan2(a, b) {\n        assertNotComplex([a, b], 'atan2');\n        return this.broadcastedBinaryOp(a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue));\n    }\n    sinh(x) {\n        assertNotComplex(x, 'sinh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.sinh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    cosh(x) {\n        assertNotComplex(x, 'cosh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.cosh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    tanh(x) {\n        assertNotComplex(x, 'tanh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = util.tanh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    asinh(x) {\n        assertNotComplex(x, 'asinh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.asinh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    acosh(x) {\n        assertNotComplex(x, 'acosh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.acosh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    atanh(x) {\n        assertNotComplex(x, 'atanh');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.atanh(values[i]);\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    erf(x) {\n        assertNotComplex(x, 'erf');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        const p = backend_util.ERF_P;\n        const a1 = backend_util.ERF_A1;\n        const a2 = backend_util.ERF_A2;\n        const a3 = backend_util.ERF_A3;\n        const a4 = backend_util.ERF_A4;\n        const a5 = backend_util.ERF_A5;\n        for (let i = 0; i < values.length; ++i) {\n            const sign = Math.sign(values[i]);\n            const v = Math.abs(values[i]);\n            const t = 1.0 / (1.0 + p * v);\n            resultValues[i] = sign *\n                (1.0 -\n                    (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n                        Math.exp(-v * v));\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    step(x, alpha = 0) {\n        assertNotComplex(x, 'step');\n        const resultValues = new Float32Array(x.size);\n        const values = this.readSync(x.dataId);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            if (isNaN(value)) {\n                resultValues[i] = NaN;\n            }\n            else {\n                resultValues[i] = value > 0 ? 1 : alpha;\n            }\n        }\n        return this.makeOutput(resultValues, x.shape, 'float32');\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        let result = this.conv2d(input, filter, convInfo);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    conv2d(x, filter, convInfo) {\n        assertNotComplex([x, filter], 'conv2d');\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xBatchStride = x.strides[0];\n        const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n        const xColStride = isChannelsLast ? x.strides[2] : 1;\n        const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n        const yBatchStride = y.strides[0];\n        const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n        const yColStride = isChannelsLast ? y.strides[2] : 1;\n        const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * xBatchStride;\n            const yOffset1 = b * yBatchStride;\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const yOffset2 = yOffset1 + yR * yRowStride;\n                const xRCorner = yR * convInfo.strideHeight - padTop;\n                for (let wR = 0; wR < filterHeight; wR++) {\n                    const xR = xRCorner + wR * dilationHeight;\n                    if (xR < 0 || xR >= convInfo.inHeight) {\n                        continue;\n                    }\n                    const wOffset1 = wR * filter.strides[0];\n                    const xOffset2 = xOffset1 + xR * xRowStride;\n                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                        const yOffset3 = yOffset2 + yC * yColStride;\n                        const xCCorner = yC * convInfo.strideWidth - padLeft;\n                        for (let wC = 0; wC < filterWidth; wC++) {\n                            const xC = xCCorner + wC * dilationWidth;\n                            if (xC < 0 || xC >= convInfo.inWidth) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wC * filter.strides[1];\n                            const xOffset3 = xOffset2 + xC * xColStride;\n                            let wOffset3 = wOffset2;\n                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                    yVals[yOffset3 + d2 * yChannelStride] +=\n                                        xVal * wVals[wOffset3 + d2];\n                                }\n                                wOffset3 += convInfo.outChannels;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    conv3d(x, filter, convInfo) {\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padFront = convInfo.padInfo.front;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * x.strides[0];\n            const yOffset1 = b * y.strides[0];\n            for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n                const yOffset2 = yOffset1 + yF * y.strides[1];\n                const xFCorner = yF * convInfo.strideDepth - padFront;\n                for (let wF = 0; wF < filterDepth; wF++) {\n                    const xF = xFCorner + wF * dilationDepth;\n                    if (xF < 0 || xF >= convInfo.inDepth) {\n                        continue;\n                    }\n                    const wOffset1 = wF * filter.strides[0];\n                    const xOffset2 = xOffset1 + xF * x.strides[1];\n                    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                        const yOffset3 = yOffset2 + yR * y.strides[2];\n                        const xRCorner = yR * convInfo.strideHeight - padTop;\n                        for (let wR = 0; wR < filterHeight; wR++) {\n                            const xR = xRCorner + wR * dilationHeight;\n                            if (xR < 0 || xR >= convInfo.inHeight) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wR * filter.strides[1];\n                            const xOffset3 = xOffset2 + xR * x.strides[2];\n                            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                                for (let wC = 0; wC < filterWidth; wC++) {\n                                    const xC = xCCorner + wC * dilationWidth;\n                                    if (xC < 0 || xC >= convInfo.inWidth) {\n                                        continue;\n                                    }\n                                    const wOffset3 = wOffset2 + wC * filter.strides[2];\n                                    const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                                    let wOffset4 = wOffset3;\n                                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                        const xVal = xVals[xOffset4 + d1];\n                                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                            yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                                        }\n                                        wOffset4 += convInfo.outChannels;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        assertNotComplex([dy, filter], 'conv2dDerInput');\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const dyValues = this.readSync(dy.dataId);\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2] = filter.strides;\n        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth, dataFormat } = convInfo;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const xBatchStride = dx.strides[0];\n        const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n        const xColStride = isChannelsLast ? dx.strides[2] : 1;\n        const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n        const yBatchStride = dy.strides[0];\n        const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n        const yColStride = isChannelsLast ? dy.strides[2] : 1;\n        const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yR = xRMin; yR < yRMax; ++yR) {\n                            const wR = yR * strideHeight - xRCorner;\n                            for (let yC = xCMin; yC < yCMax; ++yC) {\n                                const wC = yC * strideWidth - xCCorner;\n                                const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                                for (let d2 = 0; d2 < outChannels; ++d2) {\n                                    const pixel = dyValues[dyOffset + yChannelStride * d2];\n                                    const weight = fltValues[fltOffset + d2];\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        const dxOffset = xBatchStride * b + xRowStride * xR +\n                            xColStride * xC + xChannelStride * d1;\n                        dxValues[dxOffset] = dotProd;\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n        const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n        const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                // Frames of depth\n                for (let xF = 0; xF < inDepth; ++xF) {\n                    const xFCorner = xF - frontPad;\n                    const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n                    const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n                    // Rows as per standard 2d matrix notation\n                    for (let xR = 0; xR < inHeight; ++xR) {\n                        const xRCorner = xR - topPad;\n                        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                        // Columns as per standard 2d matrix notation\n                        for (let xC = 0; xC < inWidth; ++xC) {\n                            const xCCorner = xC - leftPad;\n                            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                            let dotProd = 0;\n                            for (let yF = xFMin; yF < yFMax; ++yF) {\n                                const wF = yF * strideDepth - xFCorner;\n                                for (let yR = xRMin; yR < yRMax; ++yR) {\n                                    const wR = yR * strideHeight - xRCorner;\n                                    for (let yC = xCMin; yC < yCMax; ++yC) {\n                                        const wC = yC * strideWidth - xCCorner;\n                                        const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                                        const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                                            fltS1 * (filterHeight - 1 - wR) +\n                                            fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                                        for (let d2 = 0; d2 < outChannels; ++d2) {\n                                            const pixel = dyValues[dyOffset + d2];\n                                            const weight = fltValues[fltOffset + d2];\n                                            dotProd += pixel * weight;\n                                        }\n                                    }\n                                }\n                            }\n                            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                                dotProd;\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    conv2dDerFilter(x, dy, convInfo) {\n        assertNotComplex([x, dy], 'conv2dDerFilter');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const dW = tf.buffer(convInfo.filterShape, 'float32');\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        const xBuf = this.bufferSync(x);\n        const dyBuf = this.bufferSync(dy);\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        // Need to convolve.\n                        let dotProd = 0;\n                        for (let b = 0; b < convInfo.batchSize; ++b) {\n                            for (let yR = yRMin; yR < yRMax; ++yR) {\n                                const xR = wR + yR * strideHeight - topPad;\n                                for (let yC = yCMin; yC < yCMax; ++yC) {\n                                    const xC = wC + yC * strideWidth - leftPad;\n                                    if (isChannelsLast) {\n                                        dotProd +=\n                                            xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                                    }\n                                    else {\n                                        dotProd +=\n                                            xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                                    }\n                                }\n                            }\n                        }\n                        dW.set(dotProd, wR, wC, d1, d2);\n                    }\n                }\n            }\n        }\n        return dW.toTensor();\n    }\n    conv3dDerFilter(x, dy, convInfo) {\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dw = tf.buffer(convInfo.filterShape, 'float32');\n        const dwValues = dw.values;\n        const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n        const xValues = this.readSync(x.dataId);\n        const [xS0, xS1, xS2, xS3] = x.strides;\n        const frontPad = convInfo.padInfo.front;\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        for (let wF = 0; wF < filterDepth; ++wF) {\n            const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n            const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n            const wOffset1 = wF * dwS0;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n                const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n                const wOffset2 = wR * dwS1 + wOffset1;\n                for (let wC = 0; wC < filterWidth; ++wC) {\n                    const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                    const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                    const wOffset3 = wC * dwS2 + wOffset2;\n                    for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                        const wOffset4 = d1 * dwS3 + wOffset3;\n                        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                            let dotProd = 0;\n                            for (let b = 0; b < convInfo.batchSize; ++b) {\n                                const xOffset1 = b * xS0;\n                                const yOffset1 = b * dyS0;\n                                for (let yF = yFMin; yF < yFMax; ++yF) {\n                                    const xF = wF + yF * strideDepth - frontPad;\n                                    const xOffset2 = xF * xS1 + xOffset1;\n                                    const yOffset2 = yF * dyS1 + yOffset1;\n                                    for (let yR = yRMin; yR < yRMax; ++yR) {\n                                        const xR = wR + yR * strideHeight - topPad;\n                                        const xOffset3 = xR * xS2 + xOffset2;\n                                        const yOffset3 = yR * dyS2 + yOffset2;\n                                        for (let yC = yCMin; yC < yCMax; ++yC) {\n                                            const xC = wC + yC * strideWidth - leftPad;\n                                            const xOffset4 = xC * xS3 + xOffset3;\n                                            const yOffset4 = yC * dyS3 + yOffset3;\n                                            dotProd +=\n                                                xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                                        }\n                                    }\n                                }\n                            }\n                            dwValues[wOffset4 + d2] = dotProd;\n                        }\n                    }\n                }\n            }\n        }\n        return dw.toTensor();\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        let result = this.depthwiseConv2D(input, filter, convInfo);\n        if (bias) {\n            result = this.add(result, bias);\n        }\n        if (activation) {\n            result =\n                mapActivation(this, result, activation, preluActivationWeights);\n        }\n        return result;\n    }\n    depthwiseConv2D(x, filter, convInfo) {\n        assertNotComplex([x, filter], 'depthwiseConv2D');\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const padLeft = convInfo.padInfo.left;\n        const padTop = convInfo.padInfo.top;\n        const chMul = convInfo.outChannels / convInfo.inChannels;\n        const y = tf.buffer(convInfo.outShape, x.dtype);\n        const xVals = this.readSync(x.dataId);\n        const wVals = this.readSync(filter.dataId);\n        const yVals = y.values;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            const xOffset1 = b * x.strides[0];\n            const yOffset1 = b * y.strides[0];\n            for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                const yOffset2 = yOffset1 + yR * y.strides[1];\n                const xRCorner = yR * convInfo.strideHeight - padLeft;\n                for (let wR = 0; wR < filterHeight; ++wR) {\n                    const xR = xRCorner + wR * dilationHeight;\n                    if (xR < 0 || xR >= convInfo.inHeight) {\n                        continue;\n                    }\n                    const wOffset1 = wR * filter.strides[0];\n                    const xOffset2 = xOffset1 + xR * x.strides[1];\n                    for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                        const yOffset3 = yOffset2 + yC * y.strides[2];\n                        const xCCorner = yC * convInfo.strideWidth - padTop;\n                        for (let wC = 0; wC < filterWidth; ++wC) {\n                            const xC = xCCorner + wC * dilationWidth;\n                            if (xC < 0 || xC >= convInfo.inWidth) {\n                                continue;\n                            }\n                            const wOffset2 = wOffset1 + wC * filter.strides[1];\n                            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n                            let yOffset4 = yOffset3;\n                            let wOffset3 = wOffset2;\n                            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                const xVal = xVals[xOffset3 + d1];\n                                for (let q = 0; q < chMul; ++q) {\n                                    yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                                }\n                                yOffset4 += chMul;\n                                wOffset3 += chMul;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n        const dx = tf.buffer(convInfo.inShape, 'float32');\n        const dxValues = dx.values;\n        const [dxS0, dxS1, dxS2] = dx.strides;\n        const dyValues = this.readSync(dy.dataId);\n        const [dyS0, dyS1, dyS2] = dy.strides;\n        const fltValues = this.readSync(filter.dataId);\n        const [fltS0, fltS1, fltS2] = filter.strides;\n        const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n        const topPad = filterHeight - 1 - convInfo.padInfo.top;\n        const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        const chMul = outChannels / inChannels;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let d1 = 0; d1 < inChannels; ++d1) {\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yR = xRMin; yR < yRMax; ++yR) {\n                            const wR = yR * strideHeight - xRCorner;\n                            for (let yC = xCMin; yC < yCMax; ++yC) {\n                                const wC = yC * strideWidth - xCCorner;\n                                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                                for (let dm = 0; dm < chMul; ++dm) {\n                                    const d2 = d1 * chMul + dm;\n                                    const pixel = dyValues[dyOffset + d2];\n                                    const weight = fltValues[fltOffset + dm];\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    depthwiseConv2DDerFilter(x, dy, convInfo) {\n        assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dW = tf.buffer(convInfo.filterShape, 'float32');\n        const leftPad = convInfo.padInfo.left;\n        const topPad = convInfo.padInfo.top;\n        const chMul = convInfo.outChannels / convInfo.inChannels;\n        const xBuf = this.bufferSync(x);\n        const dyBuf = this.bufferSync(dy);\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    const d1 = Math.trunc(d2 / chMul);\n                    const dm = d2 % chMul;\n                    let dotProd = 0;\n                    for (let b = 0; b < convInfo.batchSize; ++b) {\n                        for (let yR = yRMin; yR < yRMax; ++yR) {\n                            const xR = wR + yR * strideHeight - topPad;\n                            for (let yC = yCMin; yC < yCMax; ++yC) {\n                                const xC = wC + yC * strideWidth - leftPad;\n                                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                            }\n                        }\n                    }\n                    dW.set(dotProd, wR, wC, d1, dm);\n                }\n            }\n        }\n        return dW.toTensor();\n    }\n    tile(x, reps) {\n        assertNotComplex(x, 'tile');\n        return tile(this.bufferSync(x), reps);\n    }\n    pad(x, paddings, constantValue) {\n        assertNotComplex(x, 'pad');\n        const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        const start = paddings.map(p => p[0]);\n        const xBuffer = this.bufferSync(x);\n        const buffer = tf.buffer(outShape, x.dtype);\n        if (constantValue !== 0) {\n            buffer.values.fill(constantValue);\n        }\n        for (let i = 0; i < x.size; i++) {\n            const coords = xBuffer.indexToLoc(i);\n            const outCoords = coords.map((c, i) => c + start[i]);\n            buffer.set(xBuffer.get(...coords), ...outCoords);\n        }\n        return buffer.toTensor();\n    }\n    gather(x, indices, axis) {\n        assertNotComplex([x, indices], 'gather');\n        const newShape = x.shape.slice();\n        const indicesValues = this.readSync(indices.dataId);\n        newShape[axis] = indicesValues.length;\n        const result = tf.buffer(newShape, x.dtype);\n        const xBuf = this.bufferSync(x);\n        for (let i = 0; i < result.size; ++i) {\n            const newLoc = result.indexToLoc(i);\n            const originalLoc = newLoc.slice();\n            originalLoc[axis] = indicesValues[newLoc[axis]];\n            const originalIndex = xBuf.locToIndex(originalLoc);\n            result.values[i] = xBuf.values[originalIndex];\n        }\n        return result.toTensor();\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        assertNotComplex([x], 'batchToSpaceND');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n        const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n        const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n        const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n        const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n        return tf.transpose(x.reshape(reshaped), permuted)\n            .reshape(reshapedPermuted)\n            .slice(sliceBeginCoords, sliceSize);\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        assertNotComplex([x], 'spaceToBatchND');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const completePaddings = [[0, 0]];\n        completePaddings.push(...paddings);\n        for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n            completePaddings.push([0, 0]);\n        }\n        const paddedX = x.pad(completePaddings);\n        const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n        const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n        const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n        const paddedXT = tf.transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation);\n        return reshape(paddedXT, flattenShape);\n    }\n    maxPool(x, convInfo) {\n        assertNotComplex(x, 'maxPool');\n        const xValues = this.readSync(x.dataId);\n        return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'max')\n            .toTensor();\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        assertNotComplex([x, y], 'maxPoolBackprop');\n        const xValues = this.readSync(x.dataId);\n        const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const dyBuf = this.bufferSync(dy);\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let d = 0; d < convInfo.inChannels; ++d) {\n                for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                    for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                        // Shader code begins.\n                        const dyRCorner = dxR - padTop;\n                        const dyCCorner = dxC - padLeft;\n                        let dotProd = 0;\n                        for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                            const dyR = (dyRCorner + wR) / strideHeight;\n                            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                                Math.floor(dyR) !== dyR) {\n                                continue;\n                            }\n                            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                                const dyC = (dyCCorner + wC) / strideWidth;\n                                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                    Math.floor(dyC) !== dyC) {\n                                    continue;\n                                }\n                                const maxPos = effectiveFilterHeight * effectiveFilterWidth -\n                                    1 - maxPosBuf.get(b, dyR, dyC, d);\n                                const curPos = wR * effectiveFilterWidth + wC;\n                                const mask = maxPos === curPos ? 1 : 0;\n                                if (mask === 0) {\n                                    continue;\n                                }\n                                const pixel = dyBuf.get(b, dyR, dyC, d);\n                                dotProd += pixel * mask;\n                            }\n                        }\n                        dx.set(dotProd, b, dxR, dxC, d);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        assertNotComplex([dy, x], 'avgPoolBackprop');\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        const dyBuf = this.bufferSync(dy);\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let d = 0; d < convInfo.inChannels; ++d) {\n                for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                    for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                        // Shader code begins.\n                        const dyRCorner = dxR - padTop;\n                        const dyCCorner = dxC - padLeft;\n                        let dotProd = 0;\n                        for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                            const dyR = (dyRCorner + wR) / strideHeight;\n                            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                                Math.floor(dyR) !== dyR) {\n                                continue;\n                            }\n                            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                                const dyC = (dyCCorner + wC) / strideWidth;\n                                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                    Math.floor(dyC) !== dyC) {\n                                    continue;\n                                }\n                                const pixel = dyBuf.get(b, dyR, dyC, d);\n                                dotProd += pixel;\n                            }\n                        }\n                        dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    pool3d(x, convInfo, poolType) {\n        assertNotComplex(x, 'pool3d');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const initialValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n            Number.POSITIVE_INFINITY);\n        const xValues = this.readSync(x.dataId);\n        const output = tf.buffer(convInfo.outShape, x.dtype);\n        const outputVals = output.values;\n        const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n            convInfo.outShape[3] * convInfo.outShape[4];\n        const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n        const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n        const outputColStrides = convInfo.outShape[4];\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            const outputBatchOffset = batch * outputBatchStrides;\n            const inputBatchOffset = batch * x.strides[0];\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                    const xDepthCorner = yDepth * strideDepth - padFront;\n                    let xDepthMin = xDepthCorner;\n                    while (xDepthMin < 0) {\n                        xDepthMin += dilationDepth;\n                    }\n                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                    const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                        const xRowCorner = yRow * strideHeight - padTop;\n                        let xRowMin = xRowCorner;\n                        while (xRowMin < 0) {\n                            xRowMin += dilationHeight;\n                        }\n                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                        const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                            const xColCorner = yCol * strideWidth - padLeft;\n                            let xColMin = xColCorner;\n                            while (xColMin < 0) {\n                                xColMin += dilationWidth;\n                            }\n                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                            // Shader code begins\n                            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n                            let minMaxValue = initialValue;\n                            let avgValue = 0;\n                            let count = 0;\n                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                    const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                        const xColOffset = xRowOffset + xCol * x.strides[3];\n                                        const pixel = xValues[xColOffset + channel];\n                                        if ((poolType === 'max' && pixel > minMaxValue)) {\n                                            minMaxValue = pixel;\n                                        }\n                                        else if (poolType === 'avg') {\n                                            avgValue += pixel;\n                                            count++;\n                                        }\n                                        if (isNaN(minMaxValue)) {\n                                            break;\n                                        }\n                                    }\n                                    if (isNaN(minMaxValue)) {\n                                        break;\n                                    }\n                                }\n                                if (isNaN(minMaxValue)) {\n                                    break;\n                                }\n                            }\n                            const outputOffset = outputColOffset + channel;\n                            outputVals[outputOffset] =\n                                poolType === 'avg' ? avgValue / count : minMaxValue;\n                        }\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    }\n    avgPool3d(x, convInfo) {\n        assertNotComplex(x, 'avgPool3d');\n        return this.pool3d(x, convInfo, 'avg').toFloat();\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        assertNotComplex([dy, x], 'avgPool3dBackprop');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        const dyBuf = this.bufferSync(dy);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                            // Shader code begins.\n                            const dyDepthCorner = dxDepth - padFront;\n                            const dyRowCorner = dxRow - padTop;\n                            const dyColCorner = dxCol - padLeft;\n                            let dotProd = 0;\n                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                    Math.floor(dyDepth) !== dyDepth) {\n                                    continue;\n                                }\n                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                    const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                        Math.floor(dyRow) !== dyRow) {\n                                        continue;\n                                    }\n                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                        const dyCol = (dyColCorner + wCol) / strideWidth;\n                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                            Math.floor(dyCol) !== dyCol) {\n                                            continue;\n                                        }\n                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        dotProd += pixel;\n                                    }\n                                }\n                            }\n                            dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    maxPool3d(x, convInfo) {\n        assertNotComplex(x, 'maxPool3d');\n        return this.pool3d(x, convInfo, 'max').toFloat();\n    }\n    maxPool3dPositions(x, convInfo) {\n        const maxPositions = tf.buffer(convInfo.outShape, 'int32');\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const xBuf = this.bufferSync(x);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n                    const xDepthCorner = yDepth * strideDepth - padFront;\n                    let xDepthMin = xDepthCorner;\n                    while (xDepthMin < 0) {\n                        xDepthMin += dilationDepth;\n                    }\n                    const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n                    for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n                        const xRowCorner = yRow * strideHeight - padTop;\n                        let xRowMin = xRowCorner;\n                        while (xRowMin < 0) {\n                            xRowMin += dilationHeight;\n                        }\n                        const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n                        for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n                            const xColCorner = yCol * strideWidth - padLeft;\n                            let xColMin = xColCorner;\n                            while (xColMin < 0) {\n                                xColMin += dilationWidth;\n                            }\n                            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n                            // Shader code begins\n                            let maxValue = Number.NEGATIVE_INFINITY;\n                            let maxPosition = -1;\n                            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n                                const wDepth = xDepth - xDepthCorner;\n                                for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                                    const wRow = xRow - xRowCorner;\n                                    for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                                        const wCol = xCol - xColCorner;\n                                        const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                                        if (pixel >= maxValue) {\n                                            maxValue = pixel;\n                                            maxPosition = wDepth * effectiveFilterHeight *\n                                                effectiveFilterWidth +\n                                                wRow * effectiveFilterHeight + wCol;\n                                        }\n                                    }\n                                }\n                            }\n                            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return maxPositions.toTensor();\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        assertNotComplex([x, y], 'maxPool3dBackprop');\n        const maxPositions = this.maxPool3dPositions(x, convInfo);\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const dx = tf.buffer(x.shape, 'float32');\n        const maxPosBuf = this.bufferSync(maxPositions);\n        const dyBuf = this.bufferSync(dy);\n        for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n            for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n                for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                    for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                        for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                            // Shader code begins\n                            const dyDepthCorner = dxDepth - padFront;\n                            const dyRowCorner = dxRow - padTop;\n                            const dyColCorner = dxCol - padLeft;\n                            let dotProd = 0;\n                            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                    Math.floor(dyDepth) !== dyDepth) {\n                                    continue;\n                                }\n                                for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                    const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                    if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                        Math.floor(dyRow) !== dyRow) {\n                                        continue;\n                                    }\n                                    for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                        const dyCol = (dyColCorner + wCol) / strideWidth;\n                                        if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                            Math.floor(dyCol) !== dyCol) {\n                                            continue;\n                                        }\n                                        const maxPos = effectiveFilterDepth *\n                                            effectiveFilterHeight * effectiveFilterWidth -\n                                            1 -\n                                            maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                            wRow * effectiveFilterWidth + wCol;\n                                        const mask = maxPos === curPos ? 1 : 0;\n                                        if (mask === 0) {\n                                            continue;\n                                        }\n                                        const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                        dotProd += pixel * mask;\n                                    }\n                                }\n                            }\n                            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n                        }\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    }\n    cast(x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    }\n    reshape(x, shape) {\n        return backend_util.reshapeTensor(x, shape);\n    }\n    avgPool(x, convInfo) {\n        assertNotComplex(x, 'avgPool');\n        assertNotComplex(x, 'maxPool');\n        const xValues = this.readSync(x.dataId);\n        return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'avg')\n            .toTensor()\n            .toFloat();\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        assertNotComplex(x, 'resizeBilinear');\n        const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n        const xValues = this.readSync(x.dataId);\n        const result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n        const effectiveInputSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutputSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let outputIdx = 0;\n        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n        for (let b = 0; b < batch; b++) {\n            for (let r = 0; r < newHeight; r++) {\n                const sourceFracRow = effectiveRowSizeRatio * r;\n                const sourceRowFloor = Math.floor(sourceFracRow);\n                const rowFrac = sourceFracRow - sourceRowFloor;\n                const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n                const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n                const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n                for (let c = 0; c < newWidth; c++) {\n                    const sourceFracCol = effectiveColSizeRatio * c;\n                    const sourceColFloor = Math.floor(sourceFracCol);\n                    const colFrac = sourceFracCol - sourceColFloor;\n                    const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n                    const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n                    const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n                    const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n                    const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n                    for (let d = 0; d < numChannels; d++) {\n                        // Begin shader.\n                        // Compute the fractional index of the source.\n                        const topLeft = xValues[topLeftOffest + d];\n                        const bottomLeft = xValues[botLeftOffset + d];\n                        const topRight = xValues[topRightOffset + d];\n                        const bottomRight = xValues[botRightOffest + d];\n                        const top = topLeft + (topRight - topLeft) * colFrac;\n                        const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n                        const newValue = top + (bottom - top) * rowFrac;\n                        result[outputIdx++] = newValue;\n                    }\n                }\n            }\n        }\n        return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        assertNotComplex([dy, x], 'resizeBilinearBackprop');\n        const [batch, xHeight, xWidth, depth] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        const output = new Float32Array(batch * xHeight * xWidth * depth);\n        // In the backwards pass, we want to find the pixels that were generated\n        // for each pixel in the input image the forward pass and add the\n        // corresponding coefficient from dy to the gradient (with some\n        // interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n        const dyValues = this.readSync(dy.dataId);\n        let offset = 0;\n        for (let b = 0; b < batch; b++) {\n            const bOffset = b * x.strides[0];\n            for (let r = 0; r < yHeight; r++) {\n                const dxR = r * heightScale;\n                const topDxRIndex = Math.floor(dxR);\n                const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n                const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n                const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n                const dxRLerp = dxR - topDxRIndex;\n                const inverseDxRLerp = 1.0 - dxRLerp;\n                for (let c = 0; c < yWidth; c++) {\n                    const dxC = c * widthScale;\n                    const leftDxCIndex = Math.floor(dxC);\n                    const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n                    const dxCLerp = dxC - leftDxCIndex;\n                    const inverseDxCLerp = 1.0 - dxCLerp;\n                    const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n                    const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n                    const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * x.strides[2];\n                    const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * x.strides[2];\n                    const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;\n                    const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n                    const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n                    const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n                    for (let d = 0; d < depth; d++) {\n                        const dyVal = dyValues[offset++];\n                        output[topLeftRCOffset + d] +=\n                            dyVal * inverseDxRLerpTimesInverseDxCLerp;\n                        output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n                        output[bottomLeftRCOffset + d] +=\n                            dyVal * dxRLerpTimesInverseDxCLerp;\n                        output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n    }\n    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n        assertNotComplex(x, 'resizeNearestNeighbor');\n        const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n        const xValues = this.readSync(x.dataId);\n        const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n        const effectiveInputSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutputSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n        const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n        let outputOffset = 0;\n        for (let b = 0; b < batch; b++) {\n            const batchOffset = b * x.strides[0];\n            for (let r = 0; r < newHeight; r++) {\n                const sourceFracRow = effectiveRowSizeRatio * r;\n                const sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                    Math.floor(sourceFracRow));\n                const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n                for (let c = 0; c < newWidth; c++) {\n                    const sourceFracCol = effectiveColSizeRatio * c;\n                    const sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                        Math.floor(sourceFracCol));\n                    const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n                    for (let d = 0; d < numChannels; d++) {\n                        // Begin shader.\n                        // Compute the fractional index of the source.\n                        const newVal = xValues[colOffset + d];\n                        output[outputOffset++] = newVal;\n                    }\n                }\n            }\n        }\n        return tf.tensor(output, [batch, newHeight, newWidth, numChannels], x.dtype);\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n        const [batch, xHeight, xWidth, depth] = x.shape;\n        const [, yHeight, yWidth] = dy.shape;\n        const output = new Float32Array(batch * xHeight * xWidth * depth);\n        const dyValues = this.readSync(dy.dataId);\n        // In the backwards pass, we want to find the pixels that were generated\n        // for each pixel in the input image the forward pass\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        // Loop over the output space.\n        for (let b = 0; b < batch; b++) {\n            const batchOffset = b * x.strides[0];\n            for (let r = 0; r < xHeight; r++) {\n                const rowOffset = batchOffset + r * x.strides[1];\n                // Compute bounds for where in dy we will look\n                const startRLerp = Math.floor(r * invHeightScale);\n                const startDyR = Math.floor(startRLerp - (winHeight / 2));\n                for (let c = 0; c < xWidth; c++) {\n                    const colOffset = rowOffset + c * x.strides[2];\n                    // Compute bounds for where in dy we will look\n                    const startCLerp = Math.floor(c * invWidthScale);\n                    const startDyC = Math.floor(startCLerp - (winWidth / 2));\n                    for (let d = 0; d < depth; d++) {\n                        let accum = 0;\n                        // loop over dy\n                        for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n                            const dyR = dyRIndex + startDyR;\n                            // Guard against the window exceeding the bounds of dy\n                            if (dyR < 0 || dyR >= yHeight) {\n                                continue;\n                            }\n                            const dyROffset = batchOffset + dyR * dy.strides[1];\n                            const sourceFracRow = dyR * heightScale;\n                            const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                                Math.floor(sourceFracRow));\n                            if (r !== sourceNearestRow) {\n                                continue;\n                            }\n                            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                                const dyC = dyCIndex + startDyC;\n                                // Guard against the window exceeding the bounds of dy\n                                if (dyC < 0 || dyC >= yWidth) {\n                                    continue;\n                                }\n                                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                                const sourceFracCol = dyC * widthScale;\n                                const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                                    Math.floor(sourceFracCol));\n                                if (c === sourceNearestCol) {\n                                    accum += dyValues[dyCOffset + d];\n                                }\n                            }\n                        }\n                        output[colOffset + d] = accum;\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(output, x.shape, x.dtype);\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n        const xVals = this.readSync(x.dataId);\n        const mVals = this.readSync(mean.dataId);\n        const varVals = this.readSync(variance.dataId);\n        const sVals = scale ? this.readSync(scale.dataId) :\n            new Float32Array([1]);\n        const offVals = offset ? this.readSync(offset.dataId) :\n            new Float32Array([0]);\n        const outVals = new Float32Array(xVals.length);\n        const offValsLength = offVals.length;\n        const sValsLength = sVals.length;\n        const varValsLength = varVals.length;\n        const mValsLength = mVals.length;\n        let offi = 0;\n        let mi = 0;\n        let si = 0;\n        let vi = 0;\n        for (let i = 0; i < xVals.length; ++i) {\n            outVals[i] = offVals[offi++] +\n                (xVals[i] - mVals[mi++]) * sVals[si++] /\n                    Math.sqrt(varVals[vi++] + varianceEpsilon);\n            if (offi >= offValsLength) {\n                offi = 0;\n            }\n            if (mi >= mValsLength) {\n                mi = 0;\n            }\n            if (si >= sValsLength) {\n                si = 0;\n            }\n            if (vi >= varValsLength) {\n                vi = 0;\n            }\n        }\n        return tf.tensor4d(outVals, x.shape);\n    }\n    localResponseNormalization4D(x, depthRadius, bias, alpha, beta) {\n        assertNotComplex(x, 'localResponseNormalization4D');\n        const channels = x.shape[3];\n        const maxD = channels - 1;\n        const xValues = this.readSync(x.dataId);\n        const size = x.size;\n        const result = new Float32Array(size);\n        function sumAcrossChannels(offset) {\n            const currentChannel = offset % channels;\n            let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n            const endSumOffset = offset - currentChannel +\n                Math.min(currentChannel + depthRadius, maxD);\n            let sum = 0.0;\n            for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n                const z = xValues[beginSumOffset];\n                sum += z * z;\n            }\n            return sum;\n        }\n        for (let offset = 0; offset < size; offset++) {\n            const sum = sumAcrossChannels(offset);\n            const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n            result[offset] = val;\n        }\n        return tf.tensor4d(result, x.shape);\n    }\n    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n        assertNotComplex(dy, 'LRNGrad');\n        const channels = dy.shape[3];\n        const dyValues = this.readSync(dy.dataId);\n        const inputImageValues = this.readSync(inputImage.dataId);\n        const outputImageValues = this.readSync(outputImage.dataId);\n        const result = new Float32Array(dy.size);\n        const size = dy.size;\n        for (let offset = 0; offset < size; offset++) {\n            const currentChannel = offset % channels;\n            const depthBegin = (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n            const depthEnd = (offset - currentChannel) +\n                Math.min(channels, currentChannel + depthRadius + 1);\n            let norm = 0;\n            for (let k = depthBegin; k < depthEnd; k++) {\n                norm += Math.pow(inputImageValues[k], 2);\n            }\n            norm = alpha * norm + bias;\n            for (let k = depthBegin; k < depthEnd; k++) {\n                let dyi = -2 * alpha * beta * inputImageValues[k] *\n                    outputImageValues[offset] / norm;\n                if (offset === k) {\n                    dyi += Math.pow(norm, -beta);\n                }\n                dyi *= dyValues[offset];\n                result[k] += dyi;\n            }\n        }\n        return tf.tensor4d(result, dy.shape);\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        assertNotComplex(logits, 'multinomial');\n        const probabilities = normalized ? logits : tf.softmax(logits);\n        const batchSize = probabilities.shape[0];\n        const numEvents = probabilities.shape[1];\n        const res = tf.zeros([batchSize, numSamples], 'int32');\n        const resVals = this.readSync(res.dataId);\n        const probVals = this.readSync(probabilities.dataId);\n        for (let b = 0; b < batchSize; ++b) {\n            const offset = b * numEvents;\n            // The cdf won't include the last event. It will be implicit if no other\n            // event happened.\n            const cdf = new Float32Array(numEvents - 1);\n            cdf[0] = probVals[offset];\n            for (let event = 1; event < cdf.length; ++event) {\n                cdf[event] = cdf[event - 1] + probVals[offset + event];\n            }\n            const random = seedrandom.alea(seed.toString());\n            const outOffset = b * numSamples;\n            for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n                const r = random();\n                // Assume last event happened by default.\n                resVals[outOffset + sampleId] = cdf.length;\n                for (let event = 0; event < cdf.length; event++) {\n                    if (r < cdf[event]) {\n                        resVals[outOffset + sampleId] = event;\n                        break;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        assertNotComplex(indices, 'oneHot');\n        const res = new Float32Array(indices.size * depth);\n        res.fill(offValue);\n        const indicesVal = this.readSync(indices.dataId);\n        for (let event = 0; event < indices.size; ++event) {\n            if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n                res[event * depth + indicesVal[event]] = onValue;\n            }\n        }\n        return tf.tensor2d(res, [indices.size, depth], 'int32');\n    }\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        assertNotComplex(boxes, 'nonMaxSuppression');\n        const boxesVals = this.readSync(boxes.dataId);\n        const scoresVals = this.readSync(scores.dataId);\n        return nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    }\n    fft(x) {\n        return this.fftBatch(x, false);\n    }\n    ifft(x) {\n        return this.fftBatch(x, true);\n    }\n    /**\n     * Calculate FFT of inner most elements of batch tensor.\n     */\n    fftBatch(x, inverse) {\n        const batch = x.shape[0];\n        const innerDim = x.shape[1];\n        // Collects real and imaginary values separately.\n        const realResult = tf.buffer(x.shape, 'float32');\n        const imagResult = tf.buffer(x.shape, 'float32');\n        const real = tf.real(x).as2D(batch, innerDim);\n        const imag = tf.imag(x).as2D(batch, innerDim);\n        for (let b = 0; b < batch; b++) {\n            // TODO: Support slice ops for complex type.\n            const r = real.slice([b, 0], [1, innerDim]);\n            const i = imag.slice([b, 0], [1, innerDim]);\n            const input = tf.complex(r, i);\n            // Run FFT by batch element.\n            const res = this.readSync(this.fftImpl(input, inverse).dataId);\n            for (let d = 0; d < innerDim; d++) {\n                const c = backend_util.getComplexWithIndex(res, d);\n                realResult.values[b * innerDim + d] = c.real;\n                imagResult.values[b * innerDim + d] = c.imag;\n            }\n        }\n        const t = tf.complex(realResult.toTensor(), imagResult.toTensor());\n        return t.as2D(batch, innerDim);\n    }\n    fftImpl(x, inverse) {\n        const x1D = x.as1D();\n        const n = x1D.size;\n        if (this.isExponentOf2(n)) {\n            let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);\n            if (inverse) {\n                result = tf.complex(tf.real(result).div(tf.scalar(n)), tf.imag(result).div(tf.scalar(n)));\n            }\n            return result;\n        }\n        else {\n            const data = this.readSync(x.dataId);\n            const rawOutput = this.fourierTransformByMatmul(data, n, inverse);\n            const output = backend_util.splitRealAndImagArrays(rawOutput);\n            return tf.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);\n        }\n    }\n    isExponentOf2(size) {\n        return (size & size - 1) === 0;\n    }\n    // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n    fftRadix2(input, size, inverse) {\n        if (size === 1) {\n            return input;\n        }\n        const data = this.readSync(input.dataId);\n        const half = size / 2;\n        const evenComplex = backend_util.complexWithEvenIndex(data);\n        let evenTensor = tf.complex(evenComplex.real, evenComplex.imag).as1D();\n        const oddComplex = backend_util.complexWithOddIndex(data);\n        let oddTensor = tf.complex(oddComplex.real, oddComplex.imag).as1D();\n        // Recursive call for half part of original input.\n        evenTensor = this.fftRadix2(evenTensor, half, inverse);\n        oddTensor = this.fftRadix2(oddTensor, half, inverse);\n        const e = backend_util.exponents(size, inverse);\n        const exponent = tf.complex(e.real, e.imag).mul(oddTensor);\n        const addPart = evenTensor.add(exponent);\n        const subPart = evenTensor.sub(exponent);\n        const realTensor = tf.real(addPart).concat(tf.real(subPart));\n        const imagTensor = tf.imag(addPart).concat(tf.imag(subPart));\n        return tf.complex(realTensor, imagTensor).as1D();\n    }\n    // Calculate fourier transform by multplying sinusoid matrix.\n    fourierTransformByMatmul(data, size, inverse) {\n        const ret = new Float32Array(size * 2);\n        // TODO: Use matmul instead once it supports complex64 type.\n        for (let r = 0; r < size; r++) {\n            let real = 0.0;\n            let imag = 0.0;\n            for (let c = 0; c < size; c++) {\n                const e = backend_util.exponent(r * c, size, inverse);\n                const term = backend_util.getComplexWithIndex(data, c);\n                real += term.real * e.real - term.imag * e.imag;\n                imag += term.real * e.imag + term.imag * e.real;\n            }\n            if (inverse) {\n                real /= size;\n                imag /= size;\n            }\n            backend_util.assignToTypedArray(ret, real, imag, r);\n        }\n        return ret;\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n        util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n        const batchSize = x.shape[0];\n        const inputHeight = x.shape[1];\n        const inputWidth = x.shape[2];\n        const inputDepth = x.shape[3];\n        const outputHeight = inputHeight * blockSize;\n        const outputWidth = inputWidth * blockSize;\n        const outputDepth = inputDepth / (blockSize * blockSize);\n        const xValues = this.readSync(x.dataId);\n        const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n        let outputIdx = 0;\n        for (let b = 0; b < batchSize; ++b) {\n            for (let h = 0; h < outputHeight; ++h) {\n                const inH = Math.floor(h / blockSize);\n                const offsetH = (h % blockSize);\n                for (let w = 0; w < outputWidth; ++w) {\n                    const inW = Math.floor(w / blockSize);\n                    const offsetW = (w % blockSize);\n                    const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n                    for (let d = 0; d < outputDepth; ++d) {\n                        const inD = d + offsetD;\n                        const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n                        result[outputIdx++] = xValues[inputIdx];\n                    }\n                }\n            }\n        }\n        return tf.tensor4d(result, [batchSize, outputHeight, outputWidth, outputDepth]);\n    }\n    broadcastedBinaryOp(a, b, dtype, op) {\n        const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const result = tf.buffer(newShape, dtype);\n        const aVals = this.readSync(a.dataId);\n        const bVals = this.readSync(b.dataId);\n        const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n        const resVals = result.values;\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resVals.length; ++i) {\n                resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            const aBuf = this.bufferSync(a);\n            const bBuf = this.bufferSync(b);\n            for (let i = 0; i < resVals.length; ++i) {\n                const loc = result.indexToLoc(i);\n                const aLoc = loc.slice(-a.rank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = aBuf.locToIndex(aLoc);\n                const bLoc = loc.slice(-b.rank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = bBuf.locToIndex(bLoc);\n                resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return result.toTensor();\n    }\n    broadcastedBinaryComplexOp(a, b, op) {\n        const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const realResult = tf.buffer(newShape, 'float32');\n        const imagResult = tf.buffer(newShape, 'float32');\n        const aVals = this.readSync(a.dataId);\n        const bVals = this.readSync(b.dataId);\n        const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n        const realVals = realResult.values;\n        const imagVals = imagResult.values;\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < realVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                realVals[i] = result.real;\n                imagVals[i] = result.imag;\n            }\n        }\n        else {\n            const aRealBuf = this.bufferSync(this.data.get(a.dataId).complexTensors.real);\n            const bRealBuf = this.bufferSync(this.data.get(b.dataId).complexTensors.real);\n            for (let i = 0; i < realVals.length; i++) {\n                const loc = realResult.indexToLoc(i);\n                const aLoc = loc.slice(-a.rank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = aRealBuf.locToIndex(aLoc);\n                const bLoc = loc.slice(-b.rank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = bRealBuf.locToIndex(bLoc);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                realVals[i] = opResult.real;\n                imagVals[i] = opResult.imag;\n            }\n        }\n        return this.complex(realResult.toTensor(), imagResult.toTensor());\n    }\n    split(x, sizeSplits, axis) {\n        return split(x, sizeSplits, axis);\n    }\n    dispose() { }\n    floatPrecision() {\n        return 32;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return super.epsilon();\n    }\n    cropAndResize(images, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n        const numBoxes = boxes.shape[0];\n        const [cropHeight, cropWidth] = cropSize;\n        const output = tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n        const boxVals = this.readSync(boxes.dataId);\n        const boxIndVals = this.readSync(boxIndex.dataId);\n        const imageVals = this.readSync(images.dataId);\n        const inStride = images.strides; // to calculate flat indexes into image\n        const outStride = output.strides; // to calculate flat indexes into output\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n        for (let b = 0; b < numBoxes; b++) {\n            const startInd = b * 4;\n            const y1 = boxVals[startInd];\n            const x1 = boxVals[startInd + 1];\n            const y2 = boxVals[startInd + 2];\n            const x2 = boxVals[startInd + 3];\n            const bInd = boxIndVals[b];\n            if (bInd >= batch) {\n                continue;\n            }\n            const heightScale = (cropHeight > 1) ?\n                (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n                0;\n            const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n            for (let y = 0; y < cropHeight; y++) {\n                const yInd = (cropHeight > 1) ?\n                    y1 * (imageHeight - 1) + y * (heightScale) :\n                    0.5 * (y1 + y2) * (imageHeight - 1);\n                if (yInd < 0 || yInd > imageHeight - 1) {\n                    for (let x = 0; x < cropWidth; x++) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                    }\n                    continue;\n                }\n                if (method === 'bilinear') {\n                    const topInd = Math.floor(yInd);\n                    const bottomInd = Math.ceil(yInd);\n                    const yLerp = yInd - topInd;\n                    for (let x = 0; x < cropWidth; x++) {\n                        const xInd = (cropWidth > 1) ?\n                            x1 * (imageWidth - 1) + x * widthScale :\n                            0.5 * (x1 + x2) * (imageWidth - 1);\n                        if (xInd < 0 || xInd > imageWidth - 1) {\n                            for (let c = 0; c < numChannels; c++) {\n                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                                output.values[ind] = extrapolationValue;\n                            }\n                            continue;\n                        }\n                        const leftInd = Math.floor(xInd);\n                        const rightInd = Math.ceil(xInd);\n                        const xLerp = xInd - leftInd;\n                        for (let c = 0; c < numChannels; c++) {\n                            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                                bInd * inStride[0];\n                            const topLeft = imageVals[ind];\n                            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                                bInd * inStride[0];\n                            const topRight = imageVals[ind];\n                            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                                bInd * inStride[0];\n                            const bottomLeft = imageVals[ind];\n                            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                                bInd * inStride[0];\n                            const bottomRight = imageVals[ind];\n                            const top = topLeft + (topRight - topLeft) * xLerp;\n                            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = top + ((bottom - top) * yLerp);\n                        }\n                    }\n                }\n                else { // method == \"nearest\"\n                    for (let x = 0; x < cropWidth; ++x) {\n                        const xInd = (cropWidth > 1) ?\n                            x1 * (imageWidth - 1) + x * widthScale :\n                            0.5 * (x1 + x2) * (imageWidth - 1);\n                        if (xInd < 0 || xInd > imageWidth - 1) {\n                            for (let c = 0; c < numChannels; c++) {\n                                const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                                output.values[ind] = extrapolationValue;\n                            }\n                            continue;\n                        }\n                        const closestX = Math.round(xInd);\n                        const closestY = Math.round(yInd);\n                        for (let c = 0; c < numChannels; c++) {\n                            const inInd = c + closestX * inStride[2] +\n                                closestY * inStride[1] + bInd * inStride[0];\n                            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[outInd] = imageVals[inInd];\n                        }\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n        const sumDupeIndices = false;\n        return this.scatter(sparseIndices, sparseValues, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n    gatherND(x, indices) {\n        const indicesShape = indices.shape;\n        const sliceRank = indicesShape[indicesShape.length - 1];\n        const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(x, indices);\n        if (numSlices === 0) {\n            return tf.tensor([], resultShape, x.dtype);\n        }\n        const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n        const indicesData = this.readSync(indices.dataId);\n        const xData = this.readSync(x.dataId);\n        for (let i = 0; i < numSlices; i++) {\n            const index = [];\n            let flattenIndex = 0;\n            for (let j = 0; j < sliceRank; j++) {\n                const dim = indicesData[i * sliceRank + j];\n                flattenIndex += dim * strides[j];\n                index.push(dim);\n            }\n            if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n                throw new Error(`Invalid indices: ${index} does not index into ${x.shape}`);\n            }\n            for (let k = 0; k < sliceSize; k++) {\n                buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n            }\n        }\n        return buffer.toTensor().reshape(resultShape);\n    }\n    scatterND(indices, updates, shape) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n        const defaultValue = tf.scalar(0);\n        const sumDupeIndices = true;\n        return this.scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n    }\n    fill(shape, value, dtype) {\n        dtype = dtype || util.inferDtype(value);\n        const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return engine().makeTensor(values, shape, dtype, this);\n    }\n    onesLike(x) {\n        if (x.dtype === 'string') {\n            throw new Error('onesLike is not supported for string tensors');\n        }\n        else {\n            return this.fill(x.shape, 1, x.dtype);\n        }\n    }\n    zerosLike(x) {\n        const values = util.getArrayFromDType(x.dtype, util.sizeFromShape(x.shape));\n        return this.makeOutput(values, x.shape, x.dtype);\n    }\n    linspace(start, stop, num) {\n        return backend_util.linspaceImpl(start, stop, num);\n    }\n    scatter(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n        const flattenShape = [outputSize / sliceSize, sliceSize];\n        const indicesData = this.readSync(indices.dataId);\n        const updatesData = this.readSync(updates.dataId);\n        if (outputSize === 0) {\n            return tf.tensor([], shape, updates.dtype);\n        }\n        const buffer = new TensorBuffer(flattenShape, updates.dtype);\n        buffer.values.fill(this.readSync(defaultValue.dataId)[0]);\n        for (let i = 0; i < numUpdates; i++) {\n            const index = [];\n            let flattenIndex = 0;\n            for (let j = 0; j < sliceRank; j++) {\n                const dim = indicesData[i * sliceRank + j];\n                index.push(dim);\n                flattenIndex += dim * strides[j];\n            }\n            if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n                throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n            }\n            for (let k = 0; k < sliceSize; k++) {\n                if (sumDupeIndices) {\n                    buffer.values[flattenIndex * sliceSize + k] +=\n                        updatesData[i * sliceSize + k];\n                }\n                else {\n                    buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n                        updatesData[0] :\n                        updatesData[i * sliceSize + k];\n                }\n            }\n        }\n        return buffer.toTensor().reshape(shape);\n    }\n}\n//# sourceMappingURL=backend_cpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport {shared} from '@tensorflow/tfjs-backend-cpu/dist/base';\n\nconst {maxImpl: maxImplCPU, transposeImpl: transposeImplCPU} = shared;\n\nexport {maxImplCPU, transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols, isReshapeFree} from '../webgl_util';\n\nfunction packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, null /* customSetup */,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n\nexport function reshape(\n    x: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const xTexData = backend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, afterShape) &&\n      !(xTexData.texture !== null &&\n        isReshapeFree(xTexData.shape, afterShape))) {\n    return packedReshape(x, afterShape, backend);\n  }\n\n  return {dataId: x.dataId, shape: afterShape, dtype: x.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernel_utils/reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(x, [batchSize, inSize], backend);\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n\n  if (reshapedInput.dataId !== x.dataId) {\n    // dispose the output of the packed reshape.\n    backend.disposeData(reshapedInput.dataId);\n  }\n\n  return reshape(reduced, outShape, backend);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod';\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const [batchSize, inSize] = x.shape;\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo = {windowSize, inSize, batchSize};\n  const program = new ReduceProgram(reduceInfo, reductionType);\n  const output = backend.runWebGLProgram(program, [x], dtype);\n\n  if (output.shape[1] === 1) {\n    return output;\n  }\n\n  return reduce(output, dtype, reductionType, backend);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Max, MaxAttrs, MaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxInputs;\n    const {reductionIndices, keepDims} = attrs as {} as MaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    let maxInput = x;\n    if (maxInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(maxInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const maxInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const maxInputData = webglBackend.texData.get(maxInput.dataId);\n        maxInputData.values = maxInputValues;\n      } else {\n        maxInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n    let outShape = maxOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    }\n\n    let out;\n    if (shouldExecuteOnCPU) {\n      const xTexData = webglBackend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const outValues = maxImplCPU(\n          values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n      out = webglBackend.makeTensorInfo(outShape, x.dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = maxImpl(maxInput, reduceShape, outShape, webglBackend);\n    }\n\n    if (maxInputIsTransposed) {\n      webglBackend.disposeData(maxInput.dataId);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    backend_util.warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionV3Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold} =\n        attrs as unknown as NonMaxSuppressionV3Attrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n\n    return kernel_impls.nonMaxSuppressionV3Impl(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    backend_util.warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionV4Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n        attrs as unknown as NonMaxSuppressionV4Attrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n        padToMaxOutputSize);\n\n    return [selectedIndices, validOutputs];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    backend_util.warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionV5Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as unknown as NonMaxSuppressionV5Attrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], radians: number,\n      fillValue: number|[number, number, number],\n      center: number|[number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    const sinFactor = Math.sin(radians).toFixed(3);\n    const cosFactor = Math.cos(radians).toFixed(3);\n    this.outputShape = imageShape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const centerXString = centerX.toFixed(3);\n    const centerYString = centerY.toFixed(3);\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${\n        cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${\n        sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram(\n        (image as Tensor4D).shape, radians, fillValue, center);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {divConfig} from './kernels/Div';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {maxConfig} from './kernels/Max';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {transposeConfig} from './kernels/Transpose';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  maxConfig, fromPixelsConfig, divConfig, maxPoolWithArgmaxConfig,\n  nonMaxSuppressionV3Config, nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config, rotateWithOffsetConfig, squareConfig,\n  squaredDifferenceConfig, transposeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square, SquareInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SQUARE, UnaryOpProgram} from '../unaryop_gpu';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const webglBackend = backend as MathBackendWebGL;\n    const program = new UnaryOpProgram(x.shape, SQUARE);\n    return webglBackend.runWebGLProgram(program, [x], x.dtype);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, SquaredDifference, SquaredDifferenceInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {a, b} = inputs as SquaredDifferenceInputs;\n    const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n    const webGLBackend = backend as MathBackendWebGL;\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(SQUARED_DIFFERENCE, a.shape, b.shape) :\n        new BinaryOpProgram(SQUARED_DIFFERENCE, a.shape, b.shape);\n    return webGLBackend.compileAndRun(program, [a, b]);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as TransposeInputs;\n    const {perm} = attrs as {} as TransposeAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = x.shape[perm[i]];\n    }\n\n    let out: TensorInfo;\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n      const xTexData = webglBackend.texData.get(x.dataId);\n      const values = xTexData.values as TypedArray;\n      const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n      out = webglBackend.makeTensorInfo(newShape, x.dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = transposeImpl(x, perm, webglBackend);\n    }\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n */\n/** @doc {heading: 'Environment', namespace: 'webgl'} */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\nimport './register_all_kernels';\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.1.0';\nexport {version};\n"],"names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","getBool","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","logShaderSourceAndInfoLog","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","viewport","scissor","ENV","registerFlag","get","device_util","isMobile","threshold","AddNProgram","[object Object]","outputShape","shapes","this","variableNames","_","snippets","forEach","variable","push","operation","userCode","AddNPackedProgram","ArgMinMaxProgram","reduceInfo","op","firstPass","windowSize","batchSize","inSize","outSize","compOp","indexSnippet","getVecChannels","name","rank","getChannels","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getFlatIndexFrom3D","ENCODE_FLOAT_SNIPPET","getBroadcastDims","backend_util","makeShader","inputsInfo","usesPackedTextures","prefixSnippets","x","shapeInfo","logicalShape","isUniform","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","type","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","texShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","tNumR","tNumC","offset","getFlatOffsetUniformName","getSamplerScalar","getUniformSampler","getSampler1D","keptDims","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","JSON","parse","stringify","ArgMinMaxPackedProgram","assert","dtype","sourceLocSetup","sourceRank","sourceLocDType","channels","inChannel","intChannels","srcRCoords","concat","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","AvgPool2DBackpropProgram","convInfo","filterHeight","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outDepth","BatchNormProgram","xShape","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","assertAndGetBroadcastShape","offsetSnippet","scaleSnippet","BatchNormPackedProgram","COMPLEX_MULTIPLY","BinaryOpComplexProgram","aShape","bShape","ADD","SUB","MUL","PRELU","BinaryOpProgram","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","ClipProgram","gpgpu","webGLProgram","minLoc","getUniformLocationNoThrow","maxLoc","uniform1f","ClipPackedProgram","ComplexAbsProgram","ConcatProgram","computeOutShape","offsets","Array","shift","lastIndex","lastShift","ConcatPackedProgram","axis","channel","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","c","idx","Conv2DDerFilterProgram","filterShape","isChannelsLast","dataFormat","inHeight","inWidth","Conv2DDerInputProgram","rowDim","colDim","channelDim","outChannels","Conv3DDerFilterProgram","inDepth","Conv3DDerInputProgram","DepthwiseConv2DDerFilterProgram","channelMul","inChannels","DepthwiseConv2DDerInputProgram","Conv2DProgram","addBias","activation","hasPreluActivationWeights","inputDepthNearestVec4","floor","inputDepthVec4Remainder","activationSnippet","applyActivationSnippet","addBiasSnippet","Conv3DProgram","DepthwiseConv2DProgram","hasPreluActivation","xNumRows","xNumCols","DepthwiseConvPacked2DProgram","texelsAcross","mainLoop","r","texelC","nextTexelOffset","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","batch","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","CumSumProgram","exclusive","reverse","val","getCoords","condition","idxString","getFinalCoord","DecodeMatrixProgram","DENSE","DecodeMatrixPackedProgram","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","DiagProgram","EncodeFloatProgram","DOWNLOAD","EncodeFloatPackedProgram","EncodeMatrixProgram","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","row","col","COMPLEX_FFT","FFTProgram","inputShape","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","FillProgram","value","valueLoc","GatherProgram","indicesLength","sourceCoords","currentCoords","getSourceCoords","GatherNDProgram","sliceDim","stridesType","strideString","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","COLOR_BUFFER_FLOAT","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","debug","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","query","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext","getQueryTimerExtensionWebGL2","createQuery","TIME_ELAPSED_EXT","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","arr","linearSearchLastTrue","itemsToPoll","isDoneFn","resolveFn","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","Im2ColPackedProgram","itemsPerBlockRow","unrolled","LRNProgram","radius","bias","beta","rad","maxD","powOperator","basis","LRNGradProgram","depthRadius","LRNPackedProgram","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","MatMulPackedProgram","transposeA","transposeB","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","MultinomialProgram","numOutcomes","numSamples","seed","seedLoc","OneHotProgram","numIndices","onValue","offValue","PackProgram","outOfBoundsCondition","dims","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","coord","getSourceCoordsArr","getOutput","PadProgram","paddings","constantValue","p","start","end","unpackedCoords","PadPackedProgram","source","cLimit","componentSetup","paddingArea","j","Pool2DProgram","poolType","computePositions","flattenPositions","includeBatchInIndex","isAvgPool","batchFlattenPositionStr","flattenPositionStr","initializationValue","compareOp","filterWidthNearestVec4","filterWidthVec4Remainder","updateSnippet","Pool3DProgram","ReduceProgram","reduceType","windowSizeNearestVec4","windowSizeVec4Remainder","vecType","ReshapePackedProgram","thisRC","ResizeBilinearBackpropProgram","dy","alignCorners","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","ResizeBilinearProgram","newHeight","newWidth","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","ResizeBilinearPackedProgram","ResizeNearestNeigborBackpropProgram","ResizeNearestNeighborProgram","roundBase","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextColumn","nextRow","getChannel","inCoordsArray","channels1","getR","getG","getB","getA","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","SliceProgram","destSize","uniformPart","body","startLoc","uniform1iv","SlicePackedProgram","sourceLoc","upperRow","lowerRow","StridedSliceProgram","begin","inputDtype","newCoords","outputAxis","TextureManager","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","logicalTexType","deleteTexThreshold","deleteMatrixTexture","texList","texIndex","splice","logEnabled","total","freeRatio","round","numBytesAllocated","numBytesFree","tex","internalFormatForPhysicalTexType","numElements","packedWidth","packedHeight","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","TileProgram","reps","UnaryOpProgram","opSnippet","CHECK_NAN_SNIPPET","ABS","RELU","RELU6","ELU","SELU","SELU_SCALEALPHA","SELU_SCALE","NEG","CEIL","FLOOR","EXP","EXPM1","ERF","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","CLONE","UnaryOpPackedProgram","UnpackProgram","segment_util","kernel_impls","tile","topkImpl","whereImpl","binaryCaches","mapActivationToShaderProgram","packed","unary_packed_op.RELU","unary_op.RELU","unary_packed_op.ELU","unary_op.ELU","unary_packed_op.RELU6","unary_op.RELU6","binaryop_packed_gpu.PRELU","binaryop_gpu.PRELU","MathBackendWebGL","KernelBackend","super","WeakMap","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","numDataIds","cpuBackend","pendingDeletes","values","checkNumericalProblems","dataId","complexTensors","unary_op.CLONE","runWebGLProgram","readSync","disposeData","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","dataSync","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","has","subscribers","read","tmpDownloadTarget","vals","decode","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","ps","all","dTypeVals","delete","pendingDisposal","webgl_util.canBeRepresented","tmpTarget","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","webgl_util.getShapeAs3D","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","sum","ms","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesInGPUFree","startMs","endMs","waitForQueryAndGetTime","timerQuery","add","releaseGPUData","dispose","key","origDataId","refCount","dataRefCount","releaseTexture","uploadToGPU","findBackend","sizeThreshold","getCPUBackend","warnedAboutCPUBackend","every","makeOutput","keep","clone","shouldExecuteOnCPU","tensor","isContinous","slice_util","isSliceContinous","customSetup","getCustomSetupFunc","compileAndRun","shallowSlice","xTexData","t","newTexData","Object","assign","computeFlatOffset","stridedSlice","some","tensors","reals","imags","complex","midIndex","leftSide","rightSide","tensors2D","as2D","reshape","neg","packedUnaryOp","unary_op.NEG","a","outerShapeA","outerShapeB","transpose","a3D","as3D","b3D","multiply","upcastType","preluActivationWeights","hasBias","fusedActivation","aData","bData","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","makeComplexComponentTensorInfo","packedBinaryOp","binaryop_gpu.MUL","mean","variance","scale","batchNormPackedProgram","batchNormProgram","inputImage","outputImage","decodedData","decodeString","buf","indices","gather","blockShape","crops","prod","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","flattenShape","paddedXT","computeOptimalWindowSize","bestIndicesA","argReduce","argReducePacked","axes","assertAxesAreInnerMostDims","reduceShape","computeOutAndReduceShapes","a2D","outputDType","tf.sumOutType","segmentIds","permutation","getAxesPermutation","permutedX","getInnerMostAxes","segOpCompute","getUndoAxesPermutation","segOpComputeOptimalWindowSize","range","argMinMaxReduce","log2","prevResult","less","greater","condVals","k","sorted","xVals","minimum","maximum","complexSeparableBinaryOp","binaryop_gpu.ADD","complexParts","aPart","bPart","aHandle","bHandle","complexTensor","complexPart","addN","d1","d2","binaryop_gpu.SUB","subtract","unary_op.CEIL","unary_op.FLOOR","exp","unary_op.EXP","expm1","unary_op.EXPM1","logits","dim","parseAxisParam","maxLogit","expandedShape","expandShapeToKeepDim","sumExp","div","rsqrt","unary_op.SELU","unary_op.ABS","xData","unary_op.ERF","unary_op.STEP","sharedMatMulDim","outerShapeX","outerShapeFilter","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","targetShape","xReshaped","filterReshaped","fusedBatchMatMul","originalXTexDataShape","webgl_util.isReshapeFree","pointwiseConv","pointwiseConvTexData","makeTensorFromDataId","numCols","x2ColShape","xSqueezed","squeeze","w2Row","im2ColProgram","im2Col","matmulProgram","product","conv2dByMatMul","conv2dWithIm2Row","shouldPackDepthwiseConv","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","avgPoolBackpropProgram","castTensor","outIndex","fill","avgPool3dBackpropProgram","maxPool3dPositionsProgram","maxPool3dPositions","maxPool3dBackPropProgram","info","packedReshape","reshapeTensor","normalized","probs","softmax","image","boxes","boxIndex","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","sizeSplits","updates","sliceRank","numUpdates","outputSize","calculateShapes","flattenIndices","flattenX","defaultValue","scalar","sparseIndices","sparseValues","fftImpl","fft_gpu.COMPLEX_FFT","indicesShape","resultShape","numSlices","prepareAndValidate","inferDtype","getArrayFromDType","makeTensor","stop","linspaceImpl","write","makeTensorInfo","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","outputDtype","preventEagerUnpackingOfOutput","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","getTypedArrayFromDType","dataToDispose","inputsData","packedInputs","uniformValues","unpackTensor","packTensor","savedInput","outputData","keyInputs","hasOffset","keyUserCode","constructor","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","shader_compiler.makeShader","infLoc","nanLoc","uniformLocations","varName","gpgpu_math.compileProgram","startTimer","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","Infinity","NaN","varLoc","varOffsetLoc","uniform1fv","setInputMatrixTexture","executeProgram","gpgpu_math.runProgram","endTimer","unpacked","outInfo","getBinary","keys","HTMLCanvasElement","remove","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","floatPrecision","webgl_util.getTextureShapeFromLogicalShape","isByteArray","tempDenseInputHandle","getTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","acquireTexture","float32Values","Int32Array","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","divConfig","kernelName","Div","backendName","kernelFunc","backend","divImpl","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","args","attrs","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","fromPixels2DContext","drawImage","tempPixelHandle","aVals","reduceSize","perm","xRank","xSize","xStrides","newStrides","indexToLoc","newLoc","locToIndex","nonMaxSuppressionV3Impl","maxImpl","maxImplCPU","transposeImpl","transposeImplCPU","shared","reshapedInput","reduced","reductionType","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","getc","maxConfig","Max","reductionIndices","keepDims","webglBackend","origAxes","permutedAxes","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","out","outValues","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","filterSize","dilations","eitherStridesOrDilationsAreOne","computePool2DInfo","indexes","poolOutput","maxPoolWithArgmaxImpl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","gpuBackend","boxesVals","scoresVals","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","selectedIndices","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","softNmsSigmaVal","selectedScores","RotateProgram","radians","fillValue","center","sinFactor","sin","cosFactor","cos","centerX","centerY","getImageCenter","centerXString","centerYString","fillSnippet","kernelConfigs","RotateWithOffset","Square","SquaredDifference","webGLBackend","Transpose","cpuTranspose","kernelConfig","registerKernel","forceHalfFloat","isBrowser","registerBackend","webgl"],"mappings":"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"}