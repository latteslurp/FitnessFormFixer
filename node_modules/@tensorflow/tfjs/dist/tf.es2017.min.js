/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).tf=t.tf||{})}(this,(function(t){"use strict";class e{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function n(){return t.ENV}let r;function s(){if(null==r){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}r=t}return r}function a(t,e){const n=function(){const t=s();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}t.ENV=null;const i=a("kernelRegistry",()=>new Map),o=a("gradRegistry",()=>new Map);function l(t,e){const n=d(t,e);return i.get(n)}function u(t){return o.get(t)}function c(t){const e=i.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function h(t){const{kernelName:e,backendName:n}=t,r=d(e,n);i.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),i.set(r,t)}function p(t){const{kernelName:e}=t;o.has(e)&&n().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),o.set(e,t)}function d(t,e){return`${e}_${t}`}function f(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function m(t,e,n){return Math.max(t,Math.min(e,n))}function g(t){return t%2==0?t:t+1}function y(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function b(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function x(t,e,n=""){b(C(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function w(t){b(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function v(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||z(t)&&!n)for(let r=0;r<t.length;++r)v(t[r],e,n);else e.push(t);return e}function N(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function C(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function S(t){return t%1==0}function k(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function I(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function E(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function A(t,e=(t=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function T(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function $(t,e){const n=e.length;return b((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),b(t.every(t=>S(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function R(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:$(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function D(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function _(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function F(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function O(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function M(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function z(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function L(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function B(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function P(t){return"string"==typeof t||t instanceof String}function W(t){return"boolean"==typeof t}function V(t){return"number"==typeof t}function U(t){return Array.isArray(t)?U(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":V(t)?"float32":P(t)?"string":W(t)?"bool":"float32"}function G(t){return!!(t&&t.constructor&&t.call&&t.apply)}function H(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function q(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function j(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=v(t)),n().getBool("DEBUG")&&F(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function K(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return function t(e,n,r){const s=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)s[n]=r[e+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((t,e)=>t*e);for(let n=0;n<a;n++)s[n]=t(e+n*o,i,r)}return s}(0,t,e)}function X(t,e){const n=Y(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function Y(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function J(t,e){const n=t.reduce((t,e)=>t*e,1);if(null==e||"float32"===e)return K(t,new Float32Array(n));if("int32"===e)return K(t,new Int32Array(n));if("bool"===e)return K(t,new Uint8Array(n));throw new Error("Unknown data type "+e)}function Z(){return n().platform.now()}function Q(t){t.forEach(e=>{b(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function tt(t,e){return n().platform.fetch(t,e)}function et(t,e="utf-8"){return e=e||"utf-8",n().platform.encode(t,e)}function nt(t,e="utf-8"){return e=e||"utf-8",n().platform.decode(t,e)}function rt(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function st(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}var at=Object.freeze({__proto__:null,shuffle:f,clamp:m,nearestLargerEven:g,sum:y,randUniform:function(t,e){const n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n},assert:b,assertShapesMatch:x,assertNonNull:w,flatten:v,sizeFromShape:N,isScalarShape:function(t){return 0===t.length},arraysEqual:C,isInt:S,tanh:k,sizeToSquarishShape:I,createShuffledIndices:function(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return f(e),e},rightPad:E,repeatedTry:A,inferFromImplicitShape:T,parseAxisParam:$,squeezeShape:R,getTypedArrayFromDType:D,getArrayFromDType:_,checkConversionForErrors:F,isValidDtype:O,hasEncodingLoss:M,isTypedArray:z,bytesPerElement:L,bytesFromStringArray:B,isString:P,isBoolean:W,isNumber:V,inferDtype:U,isFunction:G,nearestDivisor:H,computeStrides:q,toTypedArray:j,toNestedArray:K,makeOnesTypedArray:X,makeZerosTypedArray:Y,makeZerosNestedTypedArray:J,now:Z,assertNonNegativeIntegerDimensions:Q,fetch:tt,encodeString:et,decodeString:nt,locToIndex:rt,indexToLoc:st});class it{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ot)}profileKernel(t,e,n){let r;const s=this.backendTimer.time(()=>{r=n()});return r.map(e=>{e.data().then(n=>{!function(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(n,e.dtype,t)})}),{kernelName:t,outputs:r,inputs:e,timeMs:s.then(t=>t.kernelMs),extraInfo:s.then(t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach(t=>{Promise.all([t.data(),r,a]).then(n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])})})}}class ot{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?E(r+"ms",9):r.error,o=E(t,25),l=e.rank,u=e.size,c=E(e.shape.toString(),14);let h="";for(const t in s){const n=s[t].shape||e.shape,r=n.length;h+=`${t}: ${r}D ${r>0?n:""} `}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function lt(t,e,n,r){const s=q(e),a=function(t,e,n,r){const s=N(e),a=r[r.length-1],i=new Array(a).fill(0),o=e.length,l="complex64"===n?ht(t):t;if(o>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],ut(l[e+t],0,n).length)}return i}(t,e,n,s),i=e.length,o=function t(e,n,r,s,a,i=!0){const o="complex64"===r?2:1,l=n[0],u=n.length;if(0===u){if("complex64"===r){return[ut(ht(e)[0],0,r)]}return"bool"===r?[ct(e[0])]:[e[0].toString()]}if(1===u){if(l>20){const t=3*o;let n=Array.from(e.slice(0,t)),s=Array.from(e.slice((l-3)*o,l*o));return"complex64"===r&&(n=ht(n),s=ht(s)),["["+n.map((t,e)=>ut(t,a[e],r)).join(", ")+", ..., "+s.map((t,e)=>ut(t,a[l-3+e],r)).join(", ")+"]"]}return["["+("complex64"===r?ht(e):Array.from(e)).map((t,e)=>ut(t,a[e],r)).join(", ")+"]"]}const c=n.slice(1),h=s.slice(1),p=s[0]*o,d=[];if(l>20){for(let n=0;n<3;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,!1))}d.push("...");for(let n=l-3;n<l;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,n===l-1))}}else for(let n=0;n<l;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,n===l-1))}const f=2===u?",":"";d[0]="["+d[0]+f;for(let t=1;t<d.length-1;t++)d[t]=" "+d[t]+f;let m=",\n";for(let t=2;t<u;t++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":m),d}(t,e,n,s,a),l=["Tensor"];return r&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(o.map(t=>"    "+t).join("\n")),l.join("\n")}function ut(t,e,n){let r;return r=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":P(t)?`'${t}'`:"bool"===n?ct(t):parseFloat(t.toFixed(7)).toString(),E(r,e)}function ct(t){return 0===t?"false":"true"}function ht(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class pt{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=N(t),null!=n){const t=n.length;b(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||_(e,this.size),this.strides=q(t)}set(t,...e){0===e.length&&(e=[0]),b(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return dt().makeTensor(this.values,this.shape,this.dtype)}}let dt=null,ft=null;class mt{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=N(t),this.strides=q(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return ft.buffer(this.shape,this.dtype,t)}bufferSync(){return ft.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return K(this.shape,t)}arraySync(){return K(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=dt().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>nt(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=dt().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>nt(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await dt().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(dt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return ft.print(this,t)}clone(){return this.throwIfDisposed(),ft.clone(this)}toString(t=!1){return lt(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),ft.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),dt().makeVariable(this,t,e,n)}}Object.defineProperty(mt,Symbol.hasInstance,{value:t=>!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype});class gt extends mt{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!C(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);dt().disposeTensor(this),this.dataId=t.dataId,dt().incRef(this,null)}dispose(){dt().disposeVariable(this),this.isDisposedInternal=!0}}var yt,bt,xt,wt,vt;Object.defineProperty(gt,Symbol.hasInstance,{value:t=>t instanceof mt&&null!=t.assign&&t.assign instanceof Function}),(yt=t.Rank||(t.Rank={})).R0="R0",yt.R1="R1",yt.R2="R2",yt.R3="R3",yt.R4="R4",yt.R5="R5",yt.R6="R6",function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(bt||(bt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(xt||(xt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(wt||(wt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(vt||(vt={}));const Nt={float32:wt,int32:bt,bool:xt,complex64:vt};function Ct(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return Nt[t][e]}function St(t){return Ct(t,"int32")}function kt(t,e){if(t.dtype===e.dtype)return[t,e];const n=Ct(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function It(t,e){b(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function Et(t,e){return e.some(e=>e.id===t.id)}function At(t){const e=[];return function t(e,n,r){if(null==e)return;if(e instanceof mt)return void n.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const e in a){const s=a[e];r.has(s)||(r.add(s),t(s,n,r))}}(t,e,new Set),e}var Tt=Object.freeze({__proto__:null,makeTypesMatch:kt,assertTypesMatch:It,isTensorInList:Et,getTensorsInContainer:At});class $t{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class Rt{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new $t}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new it(this.backendInstance),!0}setupRegisteredKernels(){c(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){c(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return Rt.nextTensorId++}nextVariableId(){return Rt.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>t.toFloat()}),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach(t=>{s+="complex64"===t.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,i){let o,u=[];const c=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const h=this.state.numBytes,p=this.state.numTensors;let d;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const f=l(r,this.backendName);let m;if(null!=f)d=()=>{const t=this.backend.numDataIds();m=f.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(m)?m:[m];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const o=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(c){let t=this.getTensorsForGradient(r,e,o);if(null==t){null==i&&(i=[]);const e=o.filter((t,e)=>i[e]);t=(a||[]).slice().concat(e)}u=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{c&&(u=t.map(t=>this.keep(this.clone(t))))};d=()=>{const n=this.backend.numDataIds();m=this.tidy(()=>t(this.backend,e));const s=Array.isArray(m)?m:[m];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{if(this.ENV.getBool("DEBUG")){let t;t=this.profiler.profileKernel(r,e,()=>d()),this.profiler.logKernelProfile(t),o=t.outputs}else o=d()}),c&&this.addTapeNode(r,e,o,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-h,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>null!=e[t]?e[t].shape:null),outputShapes:o.map(t=>t.shape)}),Array.isArray(m)?o:o[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=u(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(b(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const i=n.filter((t,e)=>s[e]);return a.concat(i)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&P(t[0])&&(s=t.map(t=>et(t)));const a=r.write(s,e,n),i=new mt(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const t=this.state.tensorInfo.get(a),e=B(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,r){const s=new mt(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new gt(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*L(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof gt||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;return this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=u(t);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],r=Y(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t}),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=At(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(b(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));b(s instanceof mt,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach(t=>r[t.id]=!0),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[s.id]=null==n?function(t){const e=X(N(t),"float32");return Dt.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n){for(let r=e.length-1;r>=0;r--){const s=e[r],a=[];if(s.outputs.forEach(e=>{const n=t[e.id];null!=n?a.push(n):a.push(null)}),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(a);for(const e in s.inputs){if(!(e in i))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(i)}.`);const r=n(()=>i[e]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const a=s.inputs[e];if(!C(r.shape,a.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${a.shape}'`);if(null==t[a.id])t[a.id]=r;else{const e=t[a.id];t[a.id]=e.add(r),e.dispose()}}}}(t,a,t=>this.tidy(t));const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(t){return b(G(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;b(e.every(t=>t instanceof mt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((t,e)=>{r[e]=t}),this.runKernelFunc((r,s)=>(n=t(...e,s),b(n.value instanceof mt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),b(G(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];b(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),b(a.every(t=>t instanceof mt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Z(),n=await this.backend.time(t);return n.wallMs=Z()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new $t;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Rt.nextTensorId=0,Rt.nextVariableId=0;const Dt=function(){const n=s();if(null==n._tfengine){const t=new e(n);n._tfengine=new Rt(t)}var r;return r=n._tfengine.ENV,t.ENV=r,dt=()=>n._tfengine,n._tfengine}();function _t(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ft(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Ot=Object.freeze({__proto__:null,isMobile:_t,isBrowser:Ft});const Mt=n();Mt.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Mt.registerFlag("IS_BROWSER",()=>Ft()),Mt.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Mt.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Mt.registerFlag("PROD",()=>!1),Mt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Mt.getBool("DEBUG")),Mt.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Mt.registerFlag("IS_TEST",()=>!1);function zt(t,e){let r=t;if(z(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const s=[];for(;Array.isArray(r)||z(r)&&"string"!==e;)s.push(r.length),r=r[0];return Array.isArray(t)&&n().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!z(e))return void b(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);b(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${e.length} elements`),b(e.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const s=n.slice(1);for(let n=0;n<e.length;++n)t(e[n],s,r.concat(n))}(t,s,[]),s}function Lt(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function Bt(t,e,n,r="numeric"){if(t instanceof mt)return Lt(r,t.dtype,e,n),t;let s=U(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Lt(r,s,e,n),null==t||!z(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=zt(t,s);z(t)||Array.isArray(t)||(t=[t]);const i="string"!==s?j(t,s):v(t,[],!0);return Dt.makeTensor(i,a,s)}function Pt(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,r)=>Bt(t,`${e}[${r}]`,n),r)}function Wt(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const s=(...t)=>{Dt.startScope(n);try{const e=r(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Dt.endScope(e),e}catch(t){throw Dt.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Vt=Wt({cast_:function(t,e){const n=Bt(t,"x","cast");if(!O(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return Dt.runKernelFunc(t=>t.cast(n,e),r,null,"Cast",s)}});const Ut=Wt({mul_:function(t,e){let n=Bt(t,"a","mul"),r=Bt(e,"b","mul");[n,r]=kt(n,r);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s},s,null,"Multiply")}});const Gt=Wt({step_:function(t,e=0){const n=Bt(t,"x","step"),r={x:n},s={alpha:e};return Dt.runKernelFunc(t=>t.step(n,e),r,null,"Step",s)}}),Ht={kernelName:"Abs",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(t,Gt(Vt(n,"float32"),-1))}}};const qt=Wt({floorDiv_:function(t,e){let n=Bt(t,"a","floorDiv"),r=Bt(e,"b","floorDiv");[n,r]=kt(n,r);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s},s,null,"FloorDiv")}});const jt=Wt({div_:function(t,e){let n=Bt(t,"a","div"),r=Bt(e,"b","div");if([n,r]=kt(n,r),"int32"===n.dtype&&"int32"===r.dtype)return qt(n,r);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s},s,null,"Div",{})}});const Kt=Wt({neg_:function(t){const e=Bt(t,"x","neg"),n={x:e};return Dt.runKernelFunc(t=>t.neg(e),n,null,"Negate")}});function Xt(t,e,n,r){if(null==r&&(r=U(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!z(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Q(e);const t=N(e),r=N(n);b(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==N(e.slice(t));b(n[t]===e[t]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return z(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?j(t,r):v(t,[],!0),Dt.makeTensor(t,e,r)}function Yt(t,e){if((z(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&z(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Xt(t,[],[],e)}const Jt=Wt({sqrt_:function(t){const e=Bt(t,"x","sqrt"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.sqrt(e);return n([e]),r},n,null,"Sqrt")}});const Zt=Wt({square_:function(t){const e=Bt(t,"x","square"),n=[e];return Dt.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}});const Qt=Wt({sub_:function(t,e){let n=Bt(t,"a","sub"),r=Bt(e,"b","sub");[n,r]=kt(n,r);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s},s,null,"Sub")}}),te={kernelName:"Acos",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Zt(Vt(n,"float32")),r=Jt(Qt(Yt(1),e));return Kt(jt(t,r))}}}},ee={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Jt(Qt(Zt(Vt(n,"float32")),1));return jt(t,e)}}}};function ne(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function re(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function se(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const ae={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=se(n.shape,r.shape);return{a:()=>{let e=t;const r=re(n.shape,s);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:()=>{let e=t;const n=re(r.shape,s);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}},ie={kernelName:"AddN",saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,r)=>{n[r]=()=>t.clone()}),n}};const oe=Wt({zerosLike_:function(t){const e=Bt(t,"x","zerosLike"),n={x:e};return Dt.runKernelFunc(t=>t.zerosLike(e),n,null,"ZerosLike")}}),le={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>oe(n)}}},ue={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>oe(n)}}},ce={kernelName:"Asin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>jt(t,Jt(Qt(Yt(1),Zt(Vt(n,"float32")))))}}};const he=Wt({add_:function(t,e){let n=Bt(t,"a","add"),r=Bt(e,"b","add");[n,r]=kt(n,r);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.add(n,r);return e([n,r]),s},s,null,"Add")}}),pe={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Jt(he(Yt(1),Zt(Vt(n,"float32"))));return jt(t,e)}}}};const de=Wt({reshape_:function(t,e){const n=Bt(t,"x","reshape",null);e=T(e,n.size),b(n.size===N(e),()=>"new shape and old shape must have the same number of elements.");const r={x:n},s={shape:e};return Dt.runKernelFunc((t,r)=>(r([n]),t.reshape(n,e)),r,null,"Reshape",s)}});function fe(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function me(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}function ge(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map(e=>t[e])]}function ye(t,e){return me(t,e.map(t=>1),e)}function be(t,e,n){b(fe(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function xe(t,e){if(fe(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(t=>n.push(t)),n}function we(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function ve(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const Ne=Wt({sum_:function(t,e=null,n=!1){let r=Bt(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());const s={x:r},a={axis:e,keepDims:n};return Dt.runKernelFunc((t,s)=>{s([r]);const a=$(e,r.shape),i=xe(a,r.rank);let o=a,l=r;null!=i&&(l=r.transpose(i),o=ve(o.length,r.rank));let u=t.sum(l,o);if(n){const t=ye(u.shape,a);u=u.reshape(t)}return u},s,null,"Sum",a)}}),Ce={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=se(n.shape,r.shape);return{a:()=>{const e=he(Zt(n),Zt(r));let a=Ut(t,jt(r,e));const i=re(n.shape,s);return i.length>0&&(a=Ne(a,i)),de(a,n.shape)},b:()=>{const e=he(Zt(n),Zt(r));let a=Kt(Ut(t,jt(n,e)));const i=re(r.shape,s);return i.length>0&&(a=Ne(a,i)),de(a,r.shape)}}}},Se={kernelName:"Atan",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>jt(t,he(Zt(Vt(n,"float32")),1))}}},ke={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>jt(t,Qt(Yt(1),Zt(Vt(n,"float32"))))}}};function Ie(t,e,n,r,s="NHWC",a){return Te(t,[...e,t[3]],n,a,r,null,null,Le(s))}function Ee(t,e,n,r,s,a,i="channelsLast"){const[o,l]=De(e);let u;if("channelsLast"===i)u=[o,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[o,l,t[1],t[1]]}return Te(t,u,n,r,s,a,!1,i)}function Ae(t,e,n,r,s,a,i="NDHWC"){const[o,l,u]=_e(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,l,u,t[1],t[1]]}return $e(t,c,n,r,s,!1,h,a)}function Te(t,e,n,r,s,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=t}const[p,d,,f]=e,[m,g]=De(n),[y,x]=De(r),w=Fe(p,y),v=Fe(d,x),{padInfo:N,outHeight:C,outWidth:k}=function(t,e,n,r,s,a,i,o,l){let u,c,h;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=Re(t,e,n));const a=t[0],i=t[1],o=Oe((a-e+2*r)/n+1,s);b(S(o),()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`);const l=Oe((i-e+2*r)/n+1,s);return b(S(l),()=>`The output # of columns (${l}) must be an integer. Change the stride and/or zero pad parameters`),[o,l]}([e,n],a,r,t,o);c=s[0],h=s[1]}else if("same"===t){c=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(c-1)*r+a-e),o=Math.max(0,(h-1)*s+i-n),l=Math.floor(t/2),p=t-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===t)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const p="channelsLast"===l?t[1][0]:t[2][0],d="channelsLast"===l?t[1][1]:t[2][1],f="channelsLast"===l?t[2][0]:t[3][0],m="channelsLast"===l?t[2][1]:t[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Oe((e-a+p+d)/r+1,o),h=Oe((n-i+f+m)/s+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(s,u,c,m,g,w,v,a,o),I=i?f*h:f;let E;return"channelsFirst"===o?E=[l,I,C,k]:"channelsLast"===o&&(E=[l,C,k,I]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:C,outWidth:k,outChannels:I,padInfo:N,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:w,effectiveFilterWidth:v,dilationHeight:y,dilationWidth:x,inShape:t,outShape:E,filterShape:e}}function $e(t,e,n,r,s,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,p,u,c,h]=t}const[d,f,m,,g]=e,[y,x,w]=_e(n),[v,N,C]=_e(r),k=Fe(d,v),I=Fe(f,N),E=Fe(m,C),{padInfo:A,outDepth:T,outHeight:$,outWidth:R}=function(t,e,n,r,s,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=Re(t,e,r));const i=t[0],o=t[1],l=t[2],u=Oe((i-e+2*s)/r+1,a);b(S(u),()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`);const c=Oe((o-e+2*s)/r+1,a);b(S(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=Oe((l-e+2*s)/r+1,a);return b(S(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[u,c,h,n]}([e,n,r,1],o,1,s,t,c);p=a[0],d=a[1],f=a[2]}else if("same"===t){p=Math.ceil(e/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const t=(p-1)*s+o-e,c=(d-1)*a+l-n,m=(f-1)*i+u-r,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((e-o+1)/s),d=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,u,c,h,y,x,w,k,I,E,o),D=a?g*p:g;let _;return"channelsFirst"===i?_=[l,D,T,$,R]:"channelsLast"===i&&(_=[l,T,$,R,D]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:$,outWidth:R,outChannels:D,padInfo:A,strideDepth:y,strideHeight:x,strideWidth:w,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:k,effectiveFilterHeight:I,effectiveFilterWidth:E,dilationDepth:v,dilationHeight:N,dilationWidth:C,inShape:t,outShape:_,filterShape:e}}function Re(t,e,n,r=1){const s=Fe(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function De(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function _e(t){return"number"==typeof t?[t,t,t]:t}function Fe(t,e){return e<=1?t:t+(t-1)*(e-1)}function Oe(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function Me(t){const[e,n,r]=De(t);return 1===e&&1===n&&1===r}function ze(t,e){return Me(t)||Me(e)}function Le(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const Be=Wt({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=Bt(t,"dy","avgPool3dBackprop"),l=Bt(e,"input","avgPool3dBackprop");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=de(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=de(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),b(5===u.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+u.rank+"."),b(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),b(ze(r,s),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=i&&b(S(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const p={dy:u,input:c},d={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},f=Dt.runKernelFunc(t=>{const e=Ae(c.shape,n,r,s,a,i);return t.avgPool3dBackprop(u,c,e)},p,null,"AvgPool3DBackprop",d);return h?de(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Pe={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>Be(t,r,s,a,u,o,l)}}};const We=Wt({avgPoolBackprop_:function(t,e,n,r,s){const a=Bt(t,"dy","avgPoolBackprop"),i=Bt(e,"input","avgPoolBackprop");b(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=de(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=de(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===l.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+l.rank+"."),b(4===o.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+".");const c={dy:l,input:o},h={filterSize:n,strides:r,pad:s},p=Dt.runKernelFunc(t=>{const e=Ee(o.shape,n,r,1,s);return t.avgPoolBackprop(l,o,e)},c,null,"AvgPoolBackprop",h);return u?de(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Ve={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>We(t,r,s,a,i)}}};const Ue=Wt({matMul_:function(t,e,n=!1,r=!1){let s=Bt(t,"a","matMul"),a=Bt(e,"b","matMul");[s,a]=kt(s,a),b(s.rank>=2&&a.rank>=2&&s.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],l=n?s.shape[s.rank-1]:s.shape[s.rank-2],u=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),p=N(c),d=N(h);b(C(c,h),()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${s.shape} and `+a.shape+" must match."),b(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=s.shape.slice(0,-2).concat([l,u]),m=de(s,n?[p,i,l]:[p,l,i]),g=de(a,r?[d,u,o]:[d,o,u]),y={a:m,b:g},x={transposeA:n,transposeB:r},w=Dt.runKernelFunc((t,e)=>(e([m,g]),t.batchMatMul(m,g,n,r)),y,null,"BatchMatMul",x);return de(w,f)}}),Ge={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Ue(t,s,!1,!1),b:()=>Ue(t,r,!0,!1)}:a&&!i?{a:()=>Ue(s,t,!1,!0),b:()=>Ue(r,t,!1,!1)}:{a:()=>Ue(s,t,!0,!0),b:()=>Ue(t,r,!0,!0)}:{a:()=>Ue(t,s,!1,!0),b:()=>Ue(r,t,!0,!1)}}};const He=Wt({spaceToBatchND_:function(t,e,n){const r=Bt(t,"x","spaceToBatchND");b(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),b(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),b(r.shape.reduce((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);const s={x:r},a={blockShape:e,paddings:n};return Dt.runKernelFunc(t=>t.spaceToBatchND(r,e,n),s,null,"SpaceToBatchND",a)}}),qe={kernelName:"BatchToSpaceND",gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>He(t,r,s)}}},je={kernelName:"BroadcastTo",gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>Ne(t,o,!0)}}},Ke={kernelName:"Cast",gradFunc:t=>({x:()=>t.clone()})},Xe={kernelName:"Ceil",gradFunc:t=>({x:()=>oe(t)})};const Ye=Wt({greaterEqual_:function(t,e){let n=Bt(t,"a","greaterEqual"),r=Bt(e,"b","greaterEqual");[n,r]=kt(n,r),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s},s,null,"GreaterEqual")}});const Je=Wt({lessEqual_:function(t,e){let n=Bt(t,"a","lessEqual"),r=Bt(e,"b","lessEqual");[n,r]=kt(n,r),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s},s,null,"LessEqual")}});const Ze=Wt({logicalAnd_:function(t,e){const n=Bt(t,"a","logicalAnd","bool"),r=Bt(e,"b","logicalAnd","bool");se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc(t=>t.logicalAnd(n,r),s,null,"LogicalAnd")}});const Qe=Wt({where_:function(t,e,n){const r=Bt(e,"a","where"),s=Bt(n,"b","where"),a=Bt(t,"condition","where","bool"),i=se(r.shape,s.shape),o=r.broadcastTo(i),l=s.broadcastTo(i);1===a.rank&&b(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&x(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return Dt.runKernelFunc((t,e)=>{const n=t.select(a,o,l);return e([a]),n},u,null,"SelectV2")}}),tn={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Qe(Ze(Ye(r,s),Je(r,a)),t,oe(t))}}};function en(t,e,n=0){let r=[];if("number"==typeof e)b(t.shape[n]%e==0,()=>"Number of splits must evenly divide the axis."),r=new Array(e).fill(t.shape[n]/e);else{b(e.reduce((t,e)=>(-1===e&&(t+=1),t),0)<=1,()=>"There should be only one negative value in split array.");const s=e.indexOf(-1);if(-1!==s){const r=e.reduce((t,e)=>e>0?t+e:t);e[s]=t.shape[n]-r}b(t.shape[n]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),r=e}return r}const nn=Wt({split_:function(t,e,n=0){const r=Bt(t,"x","split"),s={x:r},a={numOrSizeSplits:e,axis:n};return Dt.runKernelFunc((t,s)=>{const a=$(n,r.shape)[0],i=en(r,e,a);return t.split(r,i,a)},s,null,"SplitV",a)}}),rn={kernelName:"Concat",saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map(t=>t.shape),{axis:s}=n,a=$(s,e[0].shape)[0],i=r.map(t=>t[a]);return nn(t,i,a).map(t=>()=>t)}};const sn=Wt({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=de(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=de(e,[1,e.shape[0],e.shape[1],e.shape[2]])),b(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),b(4===l.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."),b(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];b(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),b(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&b(S(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h={x:o,dy:l},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i};return Dt.runKernelFunc(t=>{const e=Le(a),u=Te(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,l,u)},h,null,"Conv2DBackpropFilter",p)}});const an=Wt({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){b(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,l=e,u=!1;3===e.rank&&(u=!0,l=de(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),b(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),b(4===l.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank),b(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];b(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),b(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&b(S(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const p={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Dt.runKernelFunc((t,e)=>{const u=Le(a),c=Te(o,n.shape,r,1,s,i,!1,u),h=t.conv2dDerInput(l,n,c);return e([l,n]),h},p,null,"Conv2DBackpropInput",d);return u?de(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),on={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return b(Me(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>an(r.shape,t,s,i,o,l),filter:()=>sn(r,t,s.shape,i,o,l)}}};const ln=Wt({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Bt(t,"x","conv2d"),l=Bt(e,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=de(o,[1,o.shape[0],o.shape[1],o.shape[2]])),b(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),b(4===l.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+"."),null!=i&&b(S(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?u.shape[3]:u.shape[1];b(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),b(ze(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=Dt.runKernelFunc((t,e)=>{const o=Le(s),c=Te(u.shape,l.shape,n,a,r,i,!1,o),h=t.conv2d(u,l,c);return e([u,l]),h},p,null,"Conv2D",d);return c?de(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),un={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>ln(t,s,a,i,o,1,l),filter:()=>sn(t,r,s.shape,a,i,o,l)}}};const cn=Wt({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=de(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=de(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),b(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),b(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),b(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),b(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),b(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,y:i},l={strides:r,pad:s};return Dt.runKernelFunc(t=>{const e=$e(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)},o,null,"Conv3DBackpropFilterV2",l)}});const hn=Wt({conv3DBackpropInput_:function(t,e,n,r,s){b(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=de(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const l=a[4],u=i.shape[4];b(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),b(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),b(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),b(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),b(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);const c={dy:i},h={pad:s},p=Dt.runKernelFunc(t=>{const e=$e(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)},c,null,"Conv3DBackpropInputV2",h);return o?de(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),pn={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;b(Me(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,o]=e;return{x:()=>hn(i.shape,t,o,s,a),filter:()=>cn(i,t,o.shape,s,a)}}};const dn=Wt({sin_:function(t){const e=Bt(t,"x","sin"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.sin(e);return n([e]),r},n,null,"Sin")}}),fn={kernelName:"Cos",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(Kt(dn(Vt(n,"float32"))),t)}}};const mn=Wt({sinh_:function(t){const e=Bt(t,"x","sinh"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.sinh(e);return n([e]),r},n,null,"Sinh")}}),gn={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(mn(Vt(n,"float32")),t)}}};const yn=Wt({transpose_:function(t,e){const n=Bt(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),b(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{b(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return Dt.runKernelFunc(t=>t.transpose(n,e),r,null,"Transpose",s)}});const bn=Wt({cumsum_:function(t,e=0,n=!1,r=!1){const s=Bt(t,"x","cumsum"),a={x:s},i={axis:e,exclusive:n,reverse:r};return Dt.runKernelFunc((t,a)=>{const i=xe([e],s.rank);let o=s;null!=i&&(o=yn(s,i));const l=ve(1,s.rank)[0];let u=t.cumsum(o,l,n,r);if(a([s]),null!=i){const t=we(i);u=yn(u,t)}return u},a,null,"Cumsum",i)}}),xn={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=xe([s],r.rank);let n=bn(t,s,a,!i);return null!=e&&(n=yn(n,e)),n}}}};const wn=Wt({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r){let s=t;3===t.rank&&(s=de(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let a=e;3===a.rank&&(a=de(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={x:s,dy:a};return Dt.runKernelFunc(t=>t.depthwiseConv2DDerFilter(s,a,r),i,null,"DepthwiseConv2dNativeBackpropFilter")}});const vn=Wt({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r){let s=e,a=!1;3===e.rank&&(a=!0,s=de(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={dy:s},o=Dt.runKernelFunc(t=>t.depthwiseConv2DDerInput(s,n,r),i,null,"DepthwiseConv2dNativeBackpropInput");return a?de(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),Nn={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;b(Me(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=e;b(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),b(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),b(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),b(ze(s,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`),null!=i&&b(S(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c=Te(l.shape,u.shape,s,o,a,i,!0);return{x:()=>vn(l.shape,t,u,c),filter:()=>wn(l,t,u.shape,c)}}},Cn={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,a={x:r,filter:s,dy:t},i={x:r,filter:s,dy:t};return{x:()=>Dt.runKernel("Dilation2DBackpropInput",a,n),filter:()=>Dt.runKernel("Dilation2DBackpropFilter",i,n)}}},Sn={kernelName:"Div",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=se(n.shape,r.shape);return{a:()=>{const e=jt(t,r.toFloat()),a=re(n.shape,s);return a.length>0?Ne(e,a).reshape(n.shape):e},b:()=>{let e=Ut(t,n.toFloat());const a=re(r.shape,s);a.length>0&&(e=de(Ne(e,a),r.shape));const i=Zt(r);return Kt(jt(e,i.toFloat()))}}}},kn={kernelName:"Elu",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>Dt.runKernelFunc(r,s,null,"EluGrad")}}};const In=Wt({exp_:function(t){const e=Bt(t,"x","exp"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.exp(e);return n([r]),r},n,null,"Exp")}}),En={kernelName:"Erf",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Ut(In(Kt(Zt(n))),2/Math.sqrt(Math.PI));return{x:()=>Ut(t,r)}}},An={kernelName:"Exp",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(t,n)}}},Tn={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(t,In(n))}}},$n={kernelName:"Floor",gradFunc:t=>({x:()=>oe(t)})},Rn={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=se(n.shape,r.shape);return{a:()=>{const e=t.div(r.toFloat()),a=re(n.shape,s);return a.length>0?e.sum(a).reshape(n.shape):e},b:()=>{let e=t.mul(n.toFloat());const a=re(r.shape,s);a.length>0&&(e=e.sum(a).reshape(r.shape));const i=r.square();return e.div(i.toFloat()).neg()}}}};const Dn=Wt({rsqrt_:function(t){const e=Bt(t,"x","rsqrt"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.rsqrt(e);return n([e]),r},n,null,"Rsqrt")}});const _n=Wt({tile_:function(t,e){const n=Bt(t,"x","tile",null);b(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const r=[n],s={x:n},a={reps:e};return Dt.runKernelFunc((t,r)=>{const s=t.tile(n,e);return r([n]),s},s,null,"Tile",a,r)}}),Fn={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,l=null==o?Yt(1):o,u=re(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=Qt(s,a),p=Ut(t,l),d=Dn(he(i,Yt(r))),f=Ut(Ut(Ut(d,d),d),Yt(-.5));return{x:()=>1===a.rank?de(Ut(Ut(t,_n(d.as4D(1,1,1,a.shape[0]),c)),l),s.shape):de(Ut(Ut(t,d),l),s.shape),mean:()=>{let t=Ut(Ut(d,Yt(-1)),p);return 1===a.rank&&(t=Ne(t,u)),de(t,a.shape)},variance:()=>{let t=Ut(Ut(f,h),p);return 1===a.rank&&(t=Ne(t,u)),de(t,a.shape)},scale:()=>{const e=Ut(h,d);let n=Ut(t,e);return 1===a.rank&&(n=Ne(n,u)),de(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=Ne(e,u)),de(e,a.shape)}}}};const On=Wt({unsortedSegmentSum_:function(t,e,n){const r=Bt(t,"x","unsortedSegmentSum"),s=Bt(e,"segmentIds","unsortedSegmentSum","int32");b(S(n),()=>"numSegments must be of dtype int");const a={x:r,segmentIds:s},i={numSegments:n};return Dt.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a},a,null,"UnsortedSegmentSum",i)}}),Mn={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:a}=n,i=$(a,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,o=e.slice(0,i),l=o.length,u=e.slice(a,e.length).slice(1),c=u.length,h=zn(0,l),p=zn(l+1,l+1+c),d=Ln([o,[n],u]),f=de(t,d),m=de(s,[n]),g=Ln([[l],h,p]),y=yn(f,g);let b=On(y,m,r.shape[i]);const x=we(g);return b=yn(b,x),b},indices:()=>s}}};function zn(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Ln(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const Bn={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>oe(n),b:()=>oe(r)}}},Pn={kernelName:"Identity",gradFunc:t=>({x:()=>t.toFloat()})},Wn={kernelName:"IsFinite",gradFunc:t=>({x:()=>oe(t)})},Vn={kernelName:"IsInf",gradFunc:t=>({x:()=>oe(t)})},Un={kernelName:"IsNan",gradFunc:t=>({x:()=>oe(t)})},Gn={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>jt(t,he(n,1))}}},Hn={kernelName:"Log",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>jt(t,Vt(n,"float32"))}}},qn={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=r.exp();return t.sub(t.sum(s,!0).mul(e))}}}};const jn=Wt({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){const o={x:t,y:e,dy:n},l={depthRadius:r,bias:s,alpha:a,beta:i};return Dt.runKernelFunc(o=>o.LRNGrad(n,t,e,r,s,a,i),o,null,"LRNBackprop",l)}}),Kn={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>jn(r,s,t,a,i,o,l)}}};const Xn=Wt({equal_:function(t,e){let n=Bt(t,"a","equal"),r=Bt(e,"b","equal");[n,r]=kt(n,r),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc(t=>t.equal(n,r),s,null,"Equal")}});function Yn(t,e,n,r,s){return e.rank<n.rank&&(e=de(e,ye(e.shape,r))),t.rank<n.rank&&(t=de(t,ye(t.shape,r))),{x:()=>{const r=Ut(t,Vt(Xn(n,e),t.dtype));return null==s?r:yn(r,s)}}}const Jn={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,[a,i]=e,o=$(s,a.shape),l=xe(o,a.rank),u=Yn(t,i,a,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=yn(t)),t}}}};const Zn=Wt({less_:function(t,e){let n=Bt(t,"a","less"),r=Bt(e,"b","less");[n,r]=kt(n,r),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc(t=>t.less(n,r),s,null,"Less")}}),Qn={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Ut(t,Vt(Ye(n,r),"float32")),b:()=>Ut(t,Vt(Zn(n,r),"float32"))}}};const tr=Wt({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const l=Bt(t,"dy","maxPool3dBackprop"),u=Bt(e,"input","maxPool3dBackprop"),c=Bt(n,"output","maxPool3dBackprop");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=de(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=de(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=de(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),b(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),b(5===p.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+p.rank+"."),b(5===d.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."),b(ze(s,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=o&&b(S(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m={dy:h,input:p,output:d},g={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},y=Dt.runKernelFunc(t=>{const e=Ae(p.shape,r,s,a,i,o);return t.maxPool3dBackprop(h,p,d,e)},m,null,"MaxPool3DBackprop",g);return f?de(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),er={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>tr(t,r,s,a,i,c,l,u)}}};const nr=Wt({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=Bt(t,"dy","maxPoolBackprop"),l=Bt(e,"input","maxPoolBackprop"),u=Bt(n,"output","maxPoolBackprop");b(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),b(4===o.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+"."),b(4===l.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+l.rank+"."),null!=i&&b(S(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c={dy:o,input:l,output:u},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return Dt.runKernelFunc(t=>{const e=Ee(l.shape,r,s,1,a,i);return t.maxPoolBackprop(o,l,u,e)},c,null,"MaxPoolBackprop",h)}}),rr={kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>nr(t,r,s,a,i,o)}}},sr={kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[a,i]=e,o=$(s,a.shape),l=xe(o,a.rank),u=Yn(t,i,a,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=yn(t)),t}}}};const ar=Wt({greater_:function(t,e){let n=Bt(t,"a","greater"),r=Bt(e,"b","greater");[n,r]=kt(n,r),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc(t=>t.greater(n,r),s,null,"Greater")}}),ir={kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Ut(t,Vt(Je(n,r),"float32")),b:()=>Ut(t,Vt(ar(n,r),"float32"))}}};const or=Wt({floor_:function(t){const e=Bt(t,"x","floor"),n={x:e};return Dt.runKernelFunc(t=>t.floor(e),n,null,"Floor")}}),lr={kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=se(n.shape,r.shape);return{a:()=>{const e=re(n.shape,s);return e.length>0?de(Ne(t,e),n.shape):t},b:()=>{const e=Ut(t,Kt(or(jt(n,r)))),a=re(r.shape,s);return a.length>0?de(Ne(e,a),r.shape):e}}}},ur={kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=se(n.shape,r.shape);return{a:()=>{const e=Ut(t,Vt(r,"float32")),a=re(n.shape,s);return a.length>0?de(Ne(e,a),n.shape):e},b:()=>{const e=Ut(t,Vt(n,"float32")),a=re(r.shape,s);return a.length>0?de(Ne(e,a),r.shape):e}}}},cr={kernelName:"Negate",gradFunc:t=>({x:()=>Kt(t)})};const hr=Wt({complex_:function(t,e){const n=Bt(t,"real","complex"),r=Bt(e,"imag","complex");x(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Dt.runKernelFunc(t=>t.complex(n,r),s,null,"Complex")}});function pr(t,e="float32"){if("complex64"===e){const e=pr(t,"float32"),n=pr(t,"float32");return hr(e,n)}const n=Y(N(t),e);return Dt.makeTensor(n,t,e)}const dr={kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>pr(n.shape,"float32")}}},fr={kernelName:"OnesLike",gradFunc:t=>({x:()=>oe(t)})},mr={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map(t=>t[0]);return{x:()=>t.slice(a,r.shape)}}};const gr=Wt({log_:function(t){const e=Bt(t,"x","log"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.log(e);return n([e]),r},n,null,"Log")}});const yr=Wt({pow_:function(t,e){let n=Bt(t,"base","pow"),r=Bt(e,"exp","pow");[n,r]=kt(n,r);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s},s,null,"Pow")}}),br={kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=se(a.shape,i.shape);return{a:()=>{const e=Vt(i,"float32");let n=Ut(t,Ut(e,yr(a,Qt(e,Yt(1)))));const r=re(a.shape,o);return r.length>0&&(n=Ne(n,r)),de(n,a.shape)},b:()=>{const e=ar(a,0),n=Qe(e,gr(a),oe(a));let r=Ut(t,Ut(s,n));const l=re(i.shape,o);return l.length>0&&(r=Ne(r,l)),de(r,i.shape)}}}},xr={kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=ar(n,0);return{x:()=>Qe(s,t,Ut(t,r)),alpha:()=>{let e=Qe(s,oe(t),Ut(t,n));const a=re(r.shape,t.shape);return a.length>0&&(e=Ne(e,a)),de(e,r.shape)}}}},wr={kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>jt(t,Kt(Zt(n)))}}},vr={kernelName:"Relu6",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Ut(Je(n,6),Gt(n));return{x:()=>Ut(t,Vt(r,"float32"))}}},Nr={kernelName:"Relu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(t,Vt(Gt(n),"float32"))}}},Cr={kernelName:"Reshape",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>de(t,n.shape)}}},Sr={kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeBilinearBackprop(t,r,s)},a={images:r};return{images:()=>Dt.runKernelFunc(s,a,null,"ResizeBilinearGrad",n)}}},kr={kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeNearestNeighborBackprop(t,r,s)},a={images:r};return{images:()=>Dt.runKernelFunc(s,a,null,"ResizeNearestNeighborGrad",n)}}};const Ir=Wt({clone_:function(t){const e=Bt(t,"x","clone",null),n={x:e};return Dt.runKernelFunc(()=>Dt.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n,null,"Identity")}});const Er=Wt({reverse_:function(t,e){const n=Bt(t,"x","reverse"),r={x:n},s={dims:e};return Dt.runKernelFunc(t=>{const r=$(e,n.shape);if(0===n.rank)return Ir(n);const s=t.reverse(n,r);return de(s,n.shape)},r,null,"Reverse",s)}}),Ar={kernelName:"Reverse",gradFunc:(t,e,n)=>{const{dims:r}=n,s=$(r,t.shape);return{x:()=>Er(t,s)}}},Tr={kernelName:"Round",gradFunc:t=>({x:()=>oe(t)})},$r={kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Kt(jt(t,Ut(yr(n,1.5),2)))}}};const Rr=Wt({logicalNot_:function(t){const e=Bt(t,"x","logicalNot","bool"),n={x:e};return Dt.runKernelFunc(t=>t.logicalNot(e),n,null,"LogicalNot")}}),Dr={kernelName:"SelectV2",inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Vt(oe(n),"float32"),t:()=>Ut(t,Vt(n,t.dtype)),e:()=>Ut(t,Vt(Rr(n),t.dtype))}}},_r=1.0507009873554805,Fr={kernelName:"Selu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=ar(n,Yt(0)),r=Yt(1.7580993408473768),s=Yt(_r),a=Ut(t,s),i=Ut(Ut(t,r),In(Vt(n,"float32")));return Qe(e,a,i)}}}},Or={kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(t,Ut(n,Qt(Yt(1),n)))}}},Mr={kernelName:"Sign",gradFunc:t=>({x:()=>oe(t)})};const zr=Wt({cos_:function(t){const e=Bt(t,"x","cos"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.cos(e);return n([e]),r},n,null,"Cos")}}),Lr={kernelName:"Sin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(zr(Vt(n,"float32")),t)}}};const Br=Wt({cosh_:function(t){const e=Bt(t,"x","cosh"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.cosh(e);return n([e]),r},n,null,"Cosh")}}),Pr={kernelName:"Sinh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(Br(Vt(n,"float32")),t)}}};const Wr=Wt({pad_:function(t,e,n=0){const r=Bt(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return Dt.runKernelFunc((t,s)=>(s([r]),t.pad(r,e,n)),a,null,"PadV2",s)}});function Vr(t,e,n){b(t.rank===e.length,()=>`Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`),b(t.rank===n.length,()=>`Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`);for(let r=0;r<t.rank;++r)b(e[r]+n[r]<=t.shape[r],()=>`Error in slice${t.rank}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function Ur(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function Gr(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function Hr(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}function qr(t,e,n){return n<=t?n:n-(e-1)}function jr(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function Kr(t,e,n,r,s){const a=[...s],i=jr(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=qr(e,n,s);let o=r[i];t&1<<i&&(o=0),a[s]=o}return a}function Xr(t,e,n,r,s){const a=[...s],i=jr(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=qr(e,n,s);let o=r[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let t=0;t<a.length;t++){const e=s[t];a[t]<0&&(a[t]+=e),a[t]=m(0,a[t],s[t])}return a}function Yr(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function Jr(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=m(0,i,l-1),i}function Zr(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=o>0?m(0,i,l):m(-1,i,l-1),i}function Qr(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function ts(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function es(t,e,n){let r,s;return r="number"==typeof e?[e,...new Array(t.rank-1).fill(0)]:e.length<t.rank?e.concat(new Array(t.rank-e.length).fill(0)):e.slice(),r.forEach(t=>{b(-1!==t,()=>"slice() does not support negative begin indexing.")}),s=null==n?new Array(t.rank).fill(-1):"number"==typeof n?[n,...new Array(t.rank-1).fill(-1)]:n.length<t.rank?n.concat(new Array(t.rank-n.length).fill(-1)):n,s=s.map((e,n)=>e>=0?e:(b(-1===e,()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`),t.shape[n]-r[n])),[r,s]}var ns=Object.freeze({__proto__:null,assertParamsValid:Vr,maskToAxes:Ur,computeOutShape:Gr,stridesWithElidedDims:Hr,startIndicesWithElidedDims:Kr,stopIndicesWithElidedDims:Xr,stridesForAxis:Yr,startForAxis:Jr,stopForAxis:Zr,isSliceContinous:Qr,computeFlatOffset:ts,parseSliceParams:es});const rs={kernelName:"Slice",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:a}=n,i=r.shape,[o,l]=es(r,s,a),u=[];for(let e=0;e<t.rank;e++)u.push([o[e],i[e]-o[e]-l[e]]);return{x:()=>Wr(t,u)}}},ss={kernelName:"Softmax",outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,a=Ut(t,r);return{logits:()=>Qt(a,Ut(Ne(a,[s],!0),r))}}};const as=Wt({sigmoid_:function(t){const e=Bt(t,"x","sigmoid"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.sigmoid(e);return n([r]),r},n,null,"Sigmoid")}}),is={kernelName:"Softplus",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(t,as(n))}}};const os=Wt({batchToSpaceND_:function(t,e,n){const r=Bt(t,"x","batchToSpaceND"),s=e.reduce((t,e)=>t*e);b(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),b(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),b(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`);const a={x:r},i={blockShape:e,crops:n};return Dt.runKernelFunc(t=>t.batchToSpaceND(r,e,n),a,null,"BatchToSpaceND",i)}}),ls={kernelName:"SpaceToBatchND",gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>os(t,r,s)}}};function us(t,e){const n=t[0].length;t.forEach((t,e)=>{b(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),b(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=t[0];t.forEach((t,s)=>{for(let a=0;a<n;a++)b(a===e||t[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function cs(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}function hs(t,e,n){return Xt(t,e,zt(t,n),n)}const ps=Wt({concat_:function(t,e=0){b(t.length>=1,()=>"Pass at least one tensor to concat");let n=Pt(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const r=$(e,n[0].shape)[0],s=cs(n.map(t=>t.shape),r);if(0===N(s))return hs([],s);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];us(n.map(t=>t.shape),r);const a=n,i={axis:e};return Dt.runKernelFunc((t,e)=>{const s=t.concat(n,r);return e(n),s},a,null,"Concat",i)}}),ds={kernelName:"SplitV",gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>ps(t,r)}}},fs={kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>jt(t,Ut(Jt(Vt(n,"float32")),2))}}},ms={kernelName:"Square",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(t,Ut(n.toFloat(),2))}}},gs={kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Yt(2);return{a:()=>Ut(t,Ut(s,Qt(n,r))),b:()=>Ut(t,Ut(s,Qt(r,n)))}}},ys={kernelName:"Step",gradFunc:t=>({x:()=>oe(t)})},bs={kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=se(n.shape,r.shape);return{a:()=>{let e=t;const r=re(n.shape,s);return r.length>0&&(e=Ne(e,r)),de(e,n.shape)},b:()=>{let e=t;const n=re(r.shape,s);return n.length>0&&(e=Ne(e,n)),de(Kt(e),r.shape)}}}};function xs(t,e="float32"){if("complex64"===e){const e=xs(t,"float32"),n=pr(t,"float32");return hr(e,n)}const n=X(N(t),e);return Dt.makeTensor(n,t,e)}const ws={kernelName:"Sum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:a}=n;$(a,r.shape).forEach(t=>{s[t]=1});const i=de(t,s),o=Ut(i,xs(r.shape,"float32"));return{x:()=>o}}},vs={kernelName:"Tan",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>jt(t,Zt(zr(n)))}}},Ns={kernelName:"Tanh",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ut(Qt(Yt(1),Zt(n)),t)}}};const Cs=Wt({slice_:function(t,e,n){const r=Bt(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const[s,a]=es(r,e,n);Vr(r,s,a);const i={x:r},o={begin:e,size:n};return Dt.runKernelFunc((t,e)=>(e([r]),t.slice(r,s,a)),i,null,"Slice",o)}}),Ss={kernelName:"Tile",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=oe(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=he(e,Cs(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=he(e,Cs(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=he(e,Cs(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=he(e,Cs(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},ks={kernelName:"Transpose",gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=we(s);return{x:()=>yn(t,a)}}};const Is=Wt({expandDims_:function(t,e=0){const n=Bt(t,"x","expandDims",null);b(e<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return e<0&&(b(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),r.splice(e,0,1),de(n,r)}});const Es=Wt({stack_:function(t,e=0){const n=Pt(t,"tensors","stack");if(b(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return Is(n[0],e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;b(e<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{x(s,t.shape,"All tensors passed to stack must have matching shapes"),b(a===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>Is(t,e));return ps(i,e)}}),As={kernelName:"Unpack",gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>Es(t,s)}}};function Ts(t){return t<=30?t:H(t,Math.floor(Math.sqrt(t)))}function $s(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}var Rs=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(t,e){let n,r=!1;for(t<=30?(n=t,r=!0):n=H(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=H(t,n+1);return n},computeOutShape:function(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r},collectGatherOpShapeInfo:$s});const Ds=Wt({gather_:function(t,e,n=0){const r=Bt(t,"x","gather"),s=Bt(e,"indices","gather","int32"),a={x:r,indices:s},i={axis:n};return Dt.runKernelFunc((t,e)=>{const a=$(n,r.shape)[0],i=$s(r,s,a),o=t.gather(r,s.flatten(),a);return e([r,s]),o.reshape(i.outputShape)},a,null,"GatherV2",i)}});const _s=Wt({maximum_:function(t,e){let n=Bt(t,"a","maximum"),r=Bt(e,"b","maximum");[n,r]=kt(n,r),"bool"===n.dtype&&(n=Vt(n,"int32"),r=Vt(r,"int32")),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s},s,null,"Maximum")}});const Fs=[Ht,te,ee,ae,ie,le,ue,ce,pe,Ce,Se,ke,Pe,Ve,Ge,qe,je,Ke,Xe,tn,rn,un,on,pn,fn,gn,xn,Nn,Cn,Sn,kn,En,An,Tn,Rn,$n,Fn,Mn,Bn,Pn,Wn,Vn,Un,Gn,Hn,qn,Kn,Jn,Jn,Qn,er,rr,sr,ir,lr,ur,cr,dr,fr,mr,mr,br,xr,wr,vr,Nr,Cr,Sr,kr,Ar,Tr,$r,Dr,Fr,Or,Mr,Lr,Pr,rs,ss,is,ls,ls,ds,ds,fs,gs,ms,ys,bs,ws,vs,Ns,Ss,ks,As,{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=_s(e,oe(e)),r=Ds(t,n);let s=Ye(e,Yt(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=Is(s,t+1);s=Ze(s,xs(r.shape,"bool"));const i=oe(r);return Qe(s,r,i)}(t,n)}}},{kernelName:"ZerosLike",gradFunc:t=>({x:()=>oe(t)})}];for(const t of Fs)p(t);class Os{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}n().get("IS_BROWSER")&&n().setPlatform("browser",new Os);const Ms=()=>require("node-fetch");let zs;class Ls{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=n().global.fetch?n().global.fetch(t,e):(null==zs&&(zs=Ms()),zs(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}n().get("IS_NODE")&&n().setPlatform("node",new Ls);const Bs={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Ps(t,e){const n=[],r=[],s=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)});r.push(t)}else r.push(o.data());null!=e&&(l.group=e),n.push(l)}return{data:Vs(await Promise.all(r)),specs:n}}function Ws(t,e){const n={};let r,s=0;for(const a of e){const e=a.name,i=a.dtype,o=a.shape,l=N(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Bs[n.dtype],c=t.slice(s,s+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Ks()),u=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=Math.round(e*n.scale+n.min)}}s+=l*o}else if("string"===i){const e=N(a.shape);u=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(s,s+4))[0];s+=4;const n=new Uint8Array(t.slice(s,s+e));u.push(n),s+=e}}else{const r=Bs[i],a=t.slice(s,s+l*r);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);{u=new Float32Array(a);const t=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let e=0;e<t.length;e++)t[e]=u[2*e],r[e]=u[2*e+1];const s=hs(t,o,"float32"),i=hs(r,o,"float32");n[e]=hr(s,i)}}s+=l*r}"complex64"!==i&&(n[e]=hs(u,o,i))}return n}function Vs(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const r=new Uint8Array(e);let s=0;return n.forEach(t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength}),r.buffer}const Us="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Gs(t){return Us?Buffer.byteLength(t):new Blob([t]).size}function Hs(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let r=0;return t.forEach(t=>{n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function qs(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function js(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Gs(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Gs(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function Ks(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[s]=o}return new Float32Array(s)}}class Xs{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Xs.instance&&(Xs.instance=new Xs),Xs.instance}static registerSaveRouter(t){Xs.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Xs.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Xs.getHandlers(t,"save")}static getLoadHandlers(t,e){return Xs.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?Xs.getInstance().loadRouters:Xs.getInstance().saveRouters).forEach(e=>{const s=e(t,n);null!==s&&r.push(s)}),r}}const Ys=t=>Xs.getSaveHandlers(t),Js=(t,e)=>Xs.getLoadHandlers(t,e);class Zs{constructor(){this.managers={}}static getInstance(){return null==Zs.instance&&(Zs.instance=new Zs),Zs.instance}static registerManager(t,e){b(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),b(t.length>0,()=>"scheme must not be an empty string.");const n=Zs.getInstance();b(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Qs(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Zs.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function ta(t,e,n=!1){b(t!==e,()=>`Old path and new path are the same: '${t}'`);const r=Xs.getLoadHandlers(t);b(r.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),b(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`);const s=r[0],a=Xs.getSaveHandlers(e);b(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),b(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const i=a[0],o=Qs(t).scheme,l=Qs(t).path,u=o===Qs(t).scheme,c=await s.load();n&&u&&await Zs.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Zs.getManager(o).removeModel(l),h.modelArtifactsInfo}function ea(){if(!n().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function na(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class ra{constructor(t){if(this.indexedDB=ea(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>na(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction("models_store","readonly"),r=e.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=js(e),a=s.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;o.onsuccess=()=>{l=s.transaction("models_store","readwrite");const o=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore("model_info_store");const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)})}}ra.URL_SCHEME="indexeddb://";const sa=t=>{return n().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ra.URL_SCHEME)?(e=t.slice(ra.URL_SCHEME.length),new ra(e)):null;var e};Xs.registerSaveRouter(sa),Xs.registerLoadRouter(sa);class aa{constructor(){this.indexedDB=ea()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>na(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(ra.URL_SCHEME)?e.slice(ra.URL_SCHEME.length):e,new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>na(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(t);let l;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{l=s.transaction("models_store","readwrite");const r=l.objectStore("models_store").delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)})}}if(n().getBool("IS_BROWSER"))try{Zs.registerManager(ra.URL_SCHEME,new aa)}catch(t){}const ia="tensorflowjs_models",oa="info",la="model_topology",ua="weight_specs",ca="weight_data",ha="model_metadata";function pa(t){return{info:[ia,t,oa].join("/"),topology:[ia,t,la].join("/"),weightSpecs:[ia,t,ua].join("/"),weightData:[ia,t,ca].join("/"),modelMetadata:[ia,t,ha].join("/")}}function da(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class fa{constructor(t){if(!n().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=pa(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=js(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Us)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Us){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}fa.URL_SCHEME="localstorage://";const ma=t=>{return n().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(fa.URL_SCHEME)?(e=t.slice(fa.URL_SCHEME.length),new fa(e)):null;var e};Xs.registerSaveRouter(ma),Xs.registerLoadRouter(ma);class ga{constructor(){b(n().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),b("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=ia+"/",n="/"+oa;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[da(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=pa(t=(e=t).startsWith(fa.URL_SCHEME)?e.slice(fa.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}if(n().getBool("IS_BROWSER"))try{Zs.registerManager(fa.URL_SCHEME,new ga)}catch(t){}function ya(t){return new Promise(t=>setTimeout(t)).then(t)}class ba{constructor(t){if(!n().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(ba.URL_SCHEME)&&(t=t.slice(ba.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await ya(()=>a.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await ya(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:js(t)}}}}ba.URL_SCHEME="downloads://";class xa{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error("weightManifest field is missing from file "+t.name));let l;try{l=this.checkManifestAndWeightFiles(o,e)}catch(t){return void r(t)}const u=[],c=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{c.push(t),h.push(null)}),u.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const r=e.target.result,s=c.indexOf(t);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:u,weightData:Hs(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(l[t])})})},s.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],r=e.map(t=>qs(t.name)),s={};for(const a of t)a.paths.forEach(t=>{const a=qs(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[t]=e[r.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return s}}function wa(t,e,n,r){!function(t){b(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){b(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),b(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),b(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++s/t.length*(r-n);return e(i),a}),a)))}async function va(t,e){null==e&&(e={});const r=null==e.fetchFunc?n().platform.fetch:e.fetchFunc,s=t.map(t=>r(t,e.requestInit,{isBinary:!0})),a=(null==e.onProgress?await Promise.all(s):await wa(s,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(a):await wa(a,e.onProgress,.5,1)}async function Na(t,e="",n,r){return Ca(t=>va(t,{requestInit:r}))(t,e,n)}function Ca(t){return async(e,n="",r)=>{const s=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const l="quantization"in t?t.quantization.dtype:t.dtype,u=Bs[l]*N(t.shape),c=()=>{s[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:u})};null!=r?r.forEach((e,n)=>{e===t.name&&(c(),i[n]=!0)}):c(),o.push(t.name),n+=u})}),!i.every(t=>t)){const t=r.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const l=s.reduce((t,e,n)=>(e&&t.push(n),t),[]),u=[];l.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;u.push(e)})});const c=await t(u),h={};let p=0;return l.forEach(t=>{const n=e[t].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[p+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[t].forEach(t=>{const e=Ws(s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const t in e)h[t]=e[t]}),p+=n}),h}}Xs.registerSaveRouter(t=>n().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ba.URL_SCHEME)?function(t="model"){return new ba(t)}(t.slice(ba.URL_SCHEME.length)):null);class Sa{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(b("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=n().platform.fetch,b(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&b(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:js(t),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,u;if(null!=r){const t=await this.loadWeights(r);[l,u]=t}return{modelTopology:n,weightSpecs:l,weightData:u,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),s=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[];return t.forEach(t=>{t.paths.forEach(t=>{i.push(s+t+r)})}),[a,Hs(await va(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ka(t){return null!=t.match(Sa.URL_SCHEME_REGEX)}Sa.URL_SCHEME_REGEX=/^https?:\/\//;const Ia=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>ka(t)):ka(t),n)return Ea(t,e)}return null};function Ea(t,e){return new Sa(t,e)}function Aa(t,e){return Ea(t,e)}Xs.registerSaveRouter(Ia),Xs.registerLoadRouter(Ia);class Ta{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class $a{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}var Ra=Object.freeze({__proto__:null,browserFiles:function(t){return new xa(t)},browserHTTPRequest:Aa,concatenateArrayBuffers:Hs,decodeWeights:Ws,encodeWeights:Ps,fromMemory:function(t,e,n,r){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new Ta(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ta({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ta({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r})},getLoadHandlers:Js,getModelArtifactsInfoForJSON:js,getSaveHandlers:Ys,http:Ea,isHTTPScheme:ka,loadWeights:Na,registerLoadRouter:t=>Xs.registerLoadRouter(t),registerSaveRouter:t=>Xs.registerSaveRouter(t),weightsLoaderFactory:Ca,withSaveHandler:function(t){return new $a(t)},copyModel:async function(t,e){return ta(t,e,!1)},listModels:async function(){const t=Zs.getSchemes(),e={};for(const n of t){const t=await Zs.getManager(n).listModels();for(const r in t){e[n+"://"+r]=t[r]}}return e},moveModel:async function(t,e){return ta(t,e,!0)},removeModel:async function(t){const e=Qs(t);return Zs.getManager(e.scheme).removeModel(e.path)}});const Da=Wt({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const s=Bt(t,"indices","oneHot","int32"),a=[...s.shape,e],i={indices:s},o={depth:e,onValue:n,offValue:r};return Dt.runKernelFunc((t,i)=>(i([s]),de(t.oneHot(s.flatten(),e,n,r),a)),i,null,"OneHot",o)}});const _a=Wt({confusionMatrix_:function(t,e,n){const r=Bt(t,"labels","confusionMatrix"),s=Bt(e,"predictions","confusionMatrix");b(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),b(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),b(1===s.rank,()=>"Expected the rank of predictions to be 1, but got "+s.rank),b(r.shape[0]===s.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`),b(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=Da(r.asType("int32"),n),i=Da(s.asType("int32"),n);return a.transpose().matMul(i).asType("int32")}});var Fa=Object.freeze({__proto__:null,confusionMatrix:_a});function Oa(t,e,n){if(w(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=zt(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Xt(t,e,r,n)}let Ma;const za=Wt({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=l("FromPixels",Dt.backendName)){const n={pixels:t},r={numChannels:e};return Dt.runKernel("FromPixels",n,r)}const[o,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let c,h;if(i?c=t.getContext("2d").getImageData(0,0,o,u).data:r||n?c=t.data:(a||s)&&(null==Ma&&(Ma=document.createElement("canvas").getContext("2d")),Ma.canvas.width=o,Ma.canvas.height=u,Ma.drawImage(t,0,0,o,u),c=Ma.getImageData(0,0,o,u).data),4===e)h=new Int32Array(c);else{const t=o*u;h=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)h[n*e+t]=c[4*n+t]}return Oa(h,[u,o,e],"int32")}});var La=Object.freeze({__proto__:null,toPixels:async function(t,e){let n=Bt(t,"img","toPixels");if(!(t instanceof mt)){const t=n;n=t.toInt(),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);const i=await n.data(),o=n.min(),l=n.max(),u=await Promise.all([o.data(),l.data()]),c=u[0],h=u[1],p=c[0],d=h[0];if(o.dispose(),l.dispose(),"float32"===n.dtype){if(p<0||d>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [${p} - ${d}].`)}else{if("int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);if(p<0||d>255)throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [${p} - ${d}].`)}const f="float32"===n.dtype?255:1,m=new Uint8ClampedArray(s*r*4);for(let t=0;t<r*s;++t){let e,n,r,s;1===a?(e=i[t]*f,n=i[t]*f,r=i[t]*f,s=255):3===a?(e=i[3*t]*f,n=i[3*t+1]*f,r=i[3*t+2]*f,s=255):4===a&&(e=i[4*t]*f,n=i[4*t+1]*f,r=i[4*t+2]*f,s=i[4*t+3]*f);const o=4*t;m[o+0]=Math.round(e),m[o+1]=Math.round(n),m[o+2]=Math.round(r),m[o+3]=Math.round(s)}if(null!=e){e.width=s,e.height=r;const t=e.getContext("2d"),n=new ImageData(m,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),m},fromPixels:za});function Ba(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const l=[...q(t.shape).map(t=>t/o),1].slice(0,r);return[i,s,o,l]}var Pa=Object.freeze({__proto__:null,prepareAndValidate:Ba});function Wa(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function Va(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Wa(n,e,t)}function Ua(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:N(e.shape)/o,sliceSize:i,strides:[...q(n.slice(0,s)),1],outputSize:N(n)}}var Ga=Object.freeze({__proto__:null,validateUpdateShape:Wa,validateInput:Va,calculateShapes:Ua});class Ha{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class qa{constructor(){this.classNameMap={}}static getMap(){return null==qa.instance&&(qa.instance=new qa),qa.instance}static register(t){qa.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function ja(t){b(null!=t.className,()=>"Class being registered does not have the static className property defined."),b("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),b(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),qa.register(t)}var Ka=Object.freeze({__proto__:null,Serializable:Ha,SerializationMap:qa,registerClass:ja});function Xa(){return 32===Dt.backend.floatPrecision()?.001:.1}function Ya(t,e,n){let r=!0;if((z(t)||z(e))&&(r=!1),z(t)&&z(e)&&(r=!0),r){const n=t.constructor.name,r=e.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+r)}if(Array.isArray(t)&&Array.isArray(e)){const n=zt(t),r=zt(e);if(!C(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=z(t)?t:v(t),a=z(e)?e:v(e);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let t=0;t<a.length;++t){const e=s[t],r=a[t];if(!n(e,r))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function Ja(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Za=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,e,n){return null==n&&(n=Xa()),Ya(t,e,(t,e)=>Ja(t,e,n))},testEpsilon:Xa,expectPromiseToFail:function(t,e){t().then(()=>e.fail(),()=>e())},expectArraysEqual:function(t,e){const n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return P(t)||P(t[0])||P(e)||P(e[0])?Ya(t,n,(t,e)=>t==e):Ya(t,e,(t,e)=>Ja(t,e,0))},expectNumbersClose:function(t,e,n){if(null==n&&(n=Xa()),!Ja(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)},expectValuesInRange:function(t,e,n){for(let r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(`Value out of range:${t[r]} low: ${e}, high: ${n}`)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}});function Qa(t){n().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ti(){return Dt}function ei(){return Dt.memory()}function ni(t,e){return Dt.tidy(t,e)}function ri(t){At(t).forEach(t=>t.dispose())}function si(t){return Dt.keep(t)}function ai(t,e,n=1){return Dt.registerBackend(t,e,n)}function ii(){return Dt.backend}const oi=Wt({abs_:function(t){const e=Bt(t,"x","abs"),n={x:e};return Dt.runKernelFunc((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e)),n,null,"Abs")}});const li=Wt({acos_:function(t){const e=Bt(t,"x","acos"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.acos(e);return n([e]),r},n,null,"Acos")}});const ui=Wt({acosh_:function(t){const e=Bt(t,"x","acosh"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.acosh(e);return n([e]),r},n,null,"Acosh")}});const ci=Wt({addN_:function(t){b(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),b(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>Bt(t,"tensors"+e,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!C(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=e;return Dt.runKernelFunc((t,n)=>{const r=t.addN(e);return n(e),r},r,null,"AddN")}});const hi=Wt({all_:function(t,e=null,n=!1){let r=Bt(t,"x","all","bool");const s={x:r},a={axis:e,keepDims:n};return Dt.runKernelFunc(t=>{const s=$(e,r.shape);let a=s;const i=xe(a,r.rank);null!=i&&(r=r.transpose(i),a=ve(a.length,r.rank));const o=t.all(r,a);if(n){const t=ye(o.shape,s);return o.reshape(t)}return o},s,null,"All",a)}});const pi=Wt({any_:function(t,e=null,n=!1){let r=Bt(t,"x","any","bool");const s={x:r},a={axis:e,keepDims:n};return Dt.runKernelFunc(t=>{const s=$(e,r.shape);let a=s;const i=xe(a,r.rank);null!=i&&(r=r.transpose(i),a=ve(a.length,r.rank));const o=t.any(r,a);if(n){const t=ye(o.shape,s);return o.reshape(t)}return o},s,null,"Any",a)}});const di=Wt({argMax_:function(t,e=0){let n=Bt(t,"x","argMax");const r={x:n},s={axis:e};return Dt.runKernelFunc((t,r)=>{r([n]);let s=$(e,n.shape);const a=xe(s,n.rank);return null!=a&&(n=n.transpose(a),s=ve(s.length,n.rank)),t.argMax(n,s[0])},r,null,"ArgMax",s)}});const fi=Wt({argMin_:function(t,e=0){let n=Bt(t,"x","argMin");const r={x:n},s={axis:e};return Dt.runKernelFunc((t,r)=>{r([n]),null==e&&(e=0);let s=$(e,n.shape);const a=xe(s,n.rank);return null!=a&&(n=n.transpose(a),s=ve(s.length,n.rank)),t.argMin(n,s[0])},r,null,"ArgMin",s)}});const mi=Wt({asin_:function(t){const e=Bt(t,"x","asin"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.asin(e);return n([e]),r},n,null,"Asin")}});const gi=Wt({asinh_:function(t){const e=Bt(t,"x","asinh"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.asinh(e);return n([e]),r},n,null,"Asinh")}});const yi=Wt({atan_:function(t){const e=Bt(t,"x","atan"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.atan(e);return n([e]),r},n,null,"Atan")}});const bi=Wt({atan2_:function(t,e){let n=Bt(t,"a","atan2"),r=Bt(e,"b","atan2");[n,r]=kt(n,r);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s},s,null,"Atan2")}});const xi=Wt({atanh_:function(t){const e=Bt(t,"x","atanh"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.atanh(e);return n([e]),r},n,null,"Atanh")}});const wi=Wt({avgPool_:function(t,e,n,r,s){const a=Bt(t,"x","avgPool","float32");b(ze(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=de(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=s&&b(S(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const l={x:i},u={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let c=Dt.runKernelFunc((t,a)=>{const o=Ee(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&C(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)},l,null,"AvgPool",u);return c=Vt(c,a.dtype),o?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const vi=Wt({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Qa("dilations is deprecated, this field will be gone in v3.0.0.");const o=Bt(t,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=de(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===l.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),b("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),b(ze(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&b(S(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:l},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let p=Dt.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const u=Ae(l.shape,e,n,i,r,s,a);return o([l]),t.avgPool3d(l,u)},c,null,"AvgPool3D",h);return p=Vt(p,l.dtype),u?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}});const Ni=Wt({tanh_:function(t){const e=Bt(t,"x","tanh"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.tanh(e);return n([r]),r},n,null,"Tanh")}});const Ci=Wt({basicLSTMCell_:function(t,e,n,r,s,a){const i=Bt(t,"forgetBias","basicLSTMCell"),o=Bt(e,"lstmKernel","basicLSTMCell"),l=Bt(n,"lstmBias","basicLSTMCell"),u=Bt(r,"data","basicLSTMCell"),c=Bt(s,"c","basicLSTMCell"),h=Bt(a,"h","basicLSTMCell"),p=ps([u,h],1),d=Ue(p,o),f=he(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Cs(f,[0,0],y),x=Cs(f,[0,g],y),w=Cs(f,[0,2*g],y),v=Cs(f,[0,3*g],y),N=he(Ut(as(b),Ni(x)),Ut(c,as(he(i,w))));return[N,Ut(Ni(N),as(v))]}});function Si(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}const ki=Wt({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=Bt(t,"x","batchNorm"),o=Bt(e,"mean","batchNorm"),l=Bt(n,"variance","batchNorm");let u,c;null!=s&&(u=Bt(s,"scale","batchNorm")),null!=r&&(c=Bt(r,"offset","batchNorm")),b(o.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),b(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),b(null==u||o.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t,e}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=Dt.runKernelFunc((t,e)=>(e([h,o,l,u]),t.batchNorm(h,Si(o),Si(l),Si(c),Si(u),a)),p,null,"FusedBatchNorm",d);return de(f,i.shape)}});const Ii=Wt({batchNorm2d_:function(t,e,n,r,s,a){const i=Bt(t,"x","batchNorm"),o=Bt(e,"mean","batchNorm"),l=Bt(n,"variance","batchNorm");let u,c;return null!=s&&(u=Bt(s,"scale","batchNorm")),null!=r&&(c=Bt(r,"offset","batchNorm")),b(2===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),b(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),b(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&b(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&b(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),ki(i,o,l,c,u,a)}});const Ei=Wt({batchNorm3d_:function(t,e,n,r,s,a){const i=Bt(t,"x","batchNorm"),o=Bt(e,"mean","batchNorm"),l=Bt(n,"variance","batchNorm");let u,c;return null!=s&&(u=Bt(s,"scale","batchNorm")),null!=r&&(c=Bt(r,"offset","batchNorm")),b(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),b(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),b(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&b(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&b(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),ki(i,o,l,c,u,a)}});const Ai=Wt({batchNorm4d_:function(t,e,n,r,s,a){const i=Bt(t,"x","batchNorm"),o=Bt(e,"mean","batchNorm"),l=Bt(n,"variance","batchNorm");let u,c;return null!=s&&(u=Bt(s,"scale","batchNorm")),null!=r&&(c=Bt(r,"offset","batchNorm")),b(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),b(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),b(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&b(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&b(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),ki(i,o,l,c,u,a)}});const Ti=Wt({broadcastTo_:function(t,e){let n=Bt(t,"broadcastTo","x");const r=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=de(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return Ir(n);const i={x:n},o={shape:e,inputShape:s};return Dt.runKernelFunc(t=>t.tile(n,a),i,null,"BroadcastTo",o)}});function $i(t,e="float32",n){return e=e||"float32",Q(t),new pt(t,e,n)}const Ri=Wt({ceil_:function(t){const e=Bt(t,"x","ceil"),n={x:e};return Dt.runKernelFunc(t=>t.ceil(e),n,null,"Ceil")}});const Di=Wt({clipByValue_:function(t,e,n){const r=Bt(t,"x","clipByValue");b(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const s={x:r},a={clipValueMin:e,clipValueMax:n};return Dt.runKernelFunc((t,s)=>{const a=t.clip(r,e,n);return s([r]),a},s,null,"ClipByValue",a)}});const _i=Wt({concat1d_:function(t){return ps(t,0)}});const Fi=Wt({concat2d_:function(t,e){return ps(t,e)}});const Oi=Wt({concat3d_:function(t,e){return ps(t,e)}});const Mi=Wt({concat4d_:function(t,e){return ps(t,e)}});const zi=Wt({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=Bt(t,"x","conv1d"),l=Bt(e,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=de(o,[1,o.shape[0],o.shape[1]])),b(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),b(3===l.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+"."),null!=i&&b(S(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),b(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),b(ze(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),b("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=de(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=de(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=ln(p,h,[1,n],r,"NHWC",[1,a],i);return de(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Li=Wt({conv2dTranspose_:function(t,e,n,r,s,a){const i=Bt(t,"x","conv2dTranspose"),o=Bt(e,"filter","conv2dTranspose");return an(n,i,o,r,s,"NHWC",a)}});const Bi=Wt({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=Bt(t,"x","conv3d"),o=Bt(e,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=de(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),b(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),b(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),b(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),b(ze(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),b("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c={x:l,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},p=Dt.runKernelFunc((t,e)=>{const s=$e(l.shape,o.shape,n,a,r),i=t.conv3d(l,o,s);return e([l,o]),i},c,null,"Conv3D",h);return u?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}});const Pi=Wt({conv3dTranspose_:function(t,e,n,r,s){const a=Bt(t,"x","conv3dTranspose"),i=Bt(e,"filter","conv3dTranspose");return hn(n,a,i,r,s)}});const Wi=Wt({depthToSpace_:function(t,e,n="NHWC"){const r=Bt(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];b(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`),b(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`),b(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`);const o={x:r},l={blockSize:e,dataFormat:n};return Dt.runKernelFunc(t=>t.depthToSpace(r,e,n),o,null,"DepthToSpace",l)}});const Vi=Wt({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Bt(t,"x","depthwiseConv2d"),l=Bt(e,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=de(o,[1,o.shape[0],o.shape[1],o.shape[2]])),b(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),b(4===l.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+"."),b(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null!=i&&b(S(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h={x:u,filter:l},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},d=Dt.runKernelFunc((t,e)=>{null==a&&(a=[1,1]),b(ze(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const s=Te(u.shape,l.shape,n,a,r,i,!0),o=t.depthwiseConv2D(u,l,s);return e([u,l]),o},h,null,"DepthwiseConv2dNative",p);return c?de(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Ui=Wt({diag_:function(t){const e=Bt(t,"x","diag").flatten(),n={x:e};return Dt.runKernelFunc(n=>{const r=n.diag(e),s=[...t.shape,...t.shape];return de(r,s)},n,null,"Diag")}});const Gi=Wt({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const i=Bt(t,"x","dilation2d"),o=Bt(e,"filter","dilation2d");b(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),b(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),b("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let l=i,u=!1;3===i.rank&&(l=de(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:r,dilations:s},p=Dt.runKernel("Dilation2D",c,h);return u?de(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Hi=Wt({divNoNan_:function(t,e){let n=Bt(t,"a","div"),r=Bt(e,"b","div");[n,r]=kt(n,r);const s=jt(n,r),a=oe(s),i=r.equal(a);return Qe(i,a,s)}});const qi=Wt({dot_:function(t,e){const n=Bt(t,"t1","dot"),r=Bt(e,"t2","dot");b(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(b(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const t=de(n,[1,-1]),e=de(r,[-1,1]),s=Ue(t,e);return de(s,[])}if(1===n.rank&&2===r.rank){const t=de(n,[1,-1]),e=de(r,[r.shape[0],r.shape[1]]),s=Ue(t,e);return de(s,[s.size])}if(2===n.rank&&1===r.rank){const t=de(r,[-1,1]),e=Ue(n,t);return de(e,[e.size])}{const t=de(r,[r.shape[0],r.shape[1]]);return Ue(n,t)}}});const ji=Wt({elu_:function(t){const e=Bt(t,"x","elu"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},n,null,"Elu")}});const Ki=Wt({erf_:function(t){let e=Bt(t,"x","erf");b("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=e.toFloat());const n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.erf(e);return n([e]),r},n,null,"Erf")}});const Xi=Wt({expm1_:function(t){const e=Bt(t,"x","expm1"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.expm1(e);return n([e]),r},n,null,"Expm1")}});const Yi=Wt({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=$i([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=s.toTensor().as2D(t,e);if(null==n)return i;if(1===n.length)return _n(Is(i,0),[n[0],1,1]);if(2===n.length)return _n(Is(Is(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return _n(Is(Is(Is(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Ji=Wt({fft_:function(t){b("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Dt.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.fft(s).reshape(t.shape)},e,null,"FFT")}});function Zi(t,e,n){const r={shape:t,value:e,dtype:n};return Dt.runKernelFunc(r=>r.fill(t,e,n),{},null,"Fill",r)}const Qi=Wt({ifft_:function(t){b("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Dt.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.ifft(s).reshape(t.shape)},e,null,"IFFT")}});const to=Wt({imag_:function(t){const e=Bt(t,"input","imag"),n={input:e};return Dt.runKernelFunc(t=>t.imag(e),n,null,"Imag")}});const eo=Wt({real_:function(t){const e=Bt(t,"input","real"),n={input:e};return Dt.runKernelFunc(t=>t.real(e),n,null,"Real")}});const no=Wt({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=de(t,[n,e]);r=Qi(s)}else{const s=[n,2*(e-1)],a=de(eo(t),[n,e]),i=de(to(t),[n,e]),o=Er(Cs(a,[0,1],[n,e-2]),1),l=Ut(Er(Cs(i,[0,1],[n,e-2]),1),Yt(-1)),u=ps([a,o],1),c=ps([i,l],1),h=de(hr(u,c),[s[0],s[1]]);r=Qi(h)}if(r=eo(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=de(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});const ro=Wt({isFinite_:function(t){const e=Bt(t,"x","isFinite"),n={x:e};return Dt.runKernelFunc(t=>t.isFinite(e),n,null,"IsFinite")}});const so=Wt({isInf_:function(t){const e=Bt(t,"x","isInf"),n={x:e};return Dt.runKernelFunc(t=>t.isInf(e),n,null,"IsInf")}});const ao=Wt({isNaN_:function(t){const e=Bt(t,"x","isNaN"),n={x:e};return Dt.runKernelFunc(t=>t.isNaN(e),n,null,"IsNan")}});const io=Wt({leakyRelu_:function(t,e=.2){const n=Bt(t,"x","leakyRelu");return _s(Ut(Yt(e),n),n)}});function oo(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return Dt.runKernelFunc(r=>r.linspace(t,e,n),{},null,"LinSpace",r)}const lo=Wt({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Bt(t,"x","localResponseNormalization");b(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),b(S(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=de(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:e,bias:n,alpha:r,beta:s},c=Dt.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o},l,null,"LRN",u);return o?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const uo=Wt({log1p_:function(t){const e=Bt(t,"x","log1p"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.log1p(e);return n([e]),r},n,null,"Log1p")}});function co(t,e){b(G(t),()=>"The f passed in variableGrads(f) must be a function"),b(null==e||Array.isArray(e)&&e.every(t=>t instanceof gt),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in Dt.registeredVariables)e.push(Dt.registeredVariables[t])}const r=n?e.filter(t=>!t.trainable):null,s=e.length;b((e=e.filter(t=>t.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=Dt.gradients(t,e,null,!0);b(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),b(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=r&&r.forEach(t=>o[t.name]=null),{value:a,grads:o}}function ho(t){return Dt.customGrad(t)}function po(t){if(t.filter(t=>null==t).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const fo=Wt({logSigmoid_:function(t){const e=Bt(t,"x","logSigmoid");return ho(t=>({value:Kt(Kt(t).softplus()),gradFunc:e=>Ut(e,as(Kt(t)))}))(e)}});const mo=Wt({max_:function(t,e=null,n=!1){const r=Bt(t,"x","max"),s={x:r},a={reductionIndices:e,keepDims:n};return Dt.runKernelFunc((t,s)=>{let a=$(e,r.shape);const i=xe(a,r.rank);let o=r;null!=i&&(o=yn(r,i),a=ve(a.length,o.rank));const l=t.max(o,a);null!=i&&o.dispose();let u=l;if(n){const t=ye(u.shape,$(e,r.shape));u=de(u,t),l.dispose()}return s([r,u]),u},s,null,"Max",a)}});const go=Wt({logSoftmax_:function(t,e=-1){const n=Bt(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const r={logits:n},s={axis:e};return Dt.runKernelFunc((n,r)=>{const s=mo(t,e,!0),a=Qt(t,s),i=a.toFloat().sub(a.exp().sum(e,!0).log());return r([i]),i},r,null,"LogSoftmax",s)}});const yo=Wt({logSumExp_:function(t,e=null,n=!1){const r=Bt(t,"x","logSumExp"),s=$(e,r.shape),a=mo(r,s,!0),i=Qt(r,a),o=In(i),l=Ne(o,s),u=gr(l),c=he(de(a,u.shape),u);if(n){const t=ye(c.shape,s);return de(c,t)}return c}});const bo=Wt({logicalOr_:function(t,e){const n=Bt(t,"a","logicalOr","bool"),r=Bt(e,"b","logicalOr","bool");se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc(t=>t.logicalOr(n,r),s,null,"LogicalOr")}});const xo=Wt({logicalXor_:function(t,e){const n=Bt(t,"a","logicalXor","bool"),r=Bt(e,"b","logicalXor","bool");return se(n.shape,r.shape),Ze(bo(t,e),Rr(Ze(t,e)))}});const wo=Wt({maxPool_:function(t,e,n,r,s){const a=Bt(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=de(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),b(ze(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=s&&b(S(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const l={x:i},u={filterSize:e,strides:n,pad:r,dimRoundingMode:s},c=Dt.runKernelFunc((t,a)=>{const o=Ee(i.shape,e,n,1,r,s);let l;return l=1===o.filterWidth&&1===o.filterHeight&&C(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,l]),l},l,null,"MaxPool",u);return o?de(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const vo=Wt({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Qa("dilations is deprecated, this field will be gone in v3.0.0.");const o=Bt(t,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3])),b(5===l.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),b("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),b(ze(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&b(S(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:l},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},p=Dt.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const u=Ae(l.shape,e,n,i,r,s,a),c=t.maxPool3d(l,u);return o([l,c]),c},c,null,"MaxPool3D",h);return u?de(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const No=Wt({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:Bt(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=Dt.runKernel("MaxPoolWithArgmax",a,i);return{result:o[0],indexes:o[1]}}});const Co=Wt({mean_:function(t,e=null,n=!1){const r=Bt(t,"x","mean"),s=$(e,r.shape),a=N(ge(r.shape,s)[1]);return ho(t=>{const r=Yt(a),i=r.dtype===t.dtype?t:Vt(t,r.dtype),o=jt(i,r);return{value:Ne(o,e,n),gradFunc:e=>{const n=t.shape.slice();s.forEach(t=>{n[t]=1});const r=de(e,n);return jt(Ut(r,xs(t.shape,"float32")),a)}}})(r)}});const So=Wt({min_:function(t,e=null,n=!1){const r=Bt(t,"x","min"),s={x:r},a={axis:e,keepDims:n};return Dt.runKernelFunc((t,s)=>{const a=$(e,r.shape);let i=a;const o=xe(i,r.rank);let l=r;null!=o&&(l=yn(r,o),i=ve(i.length,r.rank));const u=t.min(l,i);null!=o&&l.dispose();let c=u;if(n){const t=ye(c.shape,a);c=de(u,t),u.dispose()}return s([r,c]),c},s,null,"Min",a)}});const ko=Wt({minimum_:function(t,e){let n=Bt(t,"a","minimum"),r=Bt(e,"b","minimum");[n,r]=kt(n,r),"bool"===n.dtype&&(n=Vt(n,"int32"),r=Vt(r,"int32")),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s},s,null,"Minimum")}});const Io=Wt({mod_:function(t,e){let n=Bt(t,"a","mod"),r=Bt(e,"b","mod");[n,r]=kt(n,r);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.mod(n,r);return e([n,r]),s},s,null,"Mod")}});const Eo=Wt({moments_:function(t,e=null,n=!1){const r=$(e,(t=Bt(t,"x","moments")).shape),s=Co(t,r,n);let a=s.shape;n||(a=ye(s.shape,r));const i=Zt(Qt(Vt(t,"float32"),de(s,a)));return{mean:s,variance:Co(i,r,n)}}});const Ao=Wt({multiRNNCell_:function(t,e,n,r){const s=Bt(e,"data","multiRNNCell"),a=Pt(n,"c","multiRNNCell"),i=Pt(r,"h","multiRNNCell");let o=s;const l=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let t=0;t<l.length;t+=2)u.push(l[t]),c.push(l[t+1]);return[u,c]}});const To=Wt({multinomial_:function(t,e,n,r=!1){const s=Bt(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?s.as2D(1,-1):s,l=Dt.runKernelFunc(t=>t.multinomial(o,r,e,n),{logits2D:o});return 1===i?l.as1D():l}});const $o=Wt({notEqual_:function(t,e){let n=Bt(t,"a","notEqual"),r=Bt(e,"b","notEqual");[n,r]=kt(n,r),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc(t=>t.notEqual(n,r),s,null,"NotEqual")}});const Ro=Wt({onesLike_:function(t){const e=Bt(t,"x","onesLike"),n={x:e};return Dt.runKernelFunc((t,n)=>{if("complex64"===e.dtype){const t=Ro(eo(e)),n=oe(to(e));return hr(t,n)}return t.onesLike(e)},n,null,"OnesLike")}});const Do=Wt({outerProduct_:function(t,e){const n=Bt(t,"v1","outerProduct"),r=Bt(e,"v2","outerProduct");b(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=de(n,[-1,1]),a=de(r,[1,-1]);return Ue(s,a)}});const _o=Wt({pad1d_:function(t,e,n=0){return b(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),Wr(t,[e],n)}});const Fo=Wt({pad2d_:function(t,e,n=0){return b(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Wr(t,e,n)}});const Oo=Wt({pad3d_:function(t,e,n=0){return b(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Wr(t,e,n)}});const Mo=Wt({pad4d_:function(t,e,n=0){return b(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Wr(t,e,n)}});const zo=Wt({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Bt(t,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=de(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(ze(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const u=Ee(o.shape,e,a,s,r),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),r=n.map(t=>Math.floor(t/2)),s=n.map((t,e)=>t-r[e]);return n.map((t,e)=>[r[e],s[e]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(t,e,n){const r=n.map(t=>t[0]),s=n.map(t=>t[1]),a=t.concat(r,s),i=e.map((t,e)=>(t-a[e]%t)%t),o=s.map((t,e)=>t+i[e]),l=e.map((t,e)=>[r[e],o[e]]),u=e.map((t,e)=>[0,i[e]]);return[l,u]}([u.inHeight,u.inWidth],c,h),m=p?r:"valid",g=p?o:He(o,c,d),y=("avg"===n?()=>wi(g,e,a,m):()=>wo(g,e,a,m))(),x=p?y:os(y,c,f);return l?de(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const Lo=Wt({prelu_:function(t,e){const n=Bt(t,"x","prelu"),r=Bt(e,"alpha","prelu"),s={x:n,alpha:r};return Dt.runKernelFunc((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s},s,null,"Prelu")}});function Bo(t,e=!1){console.log(t.toString(e))}const Po=Wt({prod_:function(t,e=null,n=!1){let r=Bt(t,"x","prod");const s={x:r},a={axis:e,keepDims:n};return Dt.runKernelFunc(t=>{"bool"===r.dtype&&(r=r.toInt());const s=$(e,r.shape),a=xe(s,r.rank);let i=s,o=r;null!=a&&(o=r.transpose(a),i=ve(i.length,r.rank));let l=t.prod(o,i);if(n){const t=ye(l.shape,s);l=l.reshape(t)}return l},s,null,"Prod",a)}});const Wo=Wt({rand_:function(t,e,n){const r=N(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return Dt.makeTensor(s,t,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Vo(t,e){return t(e={exports:{}},e.exports),e.exports}var Uo=Vo((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function s(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),Go=Vo((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),Ho=Vo((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),qo=Vo((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function s(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),jo=Vo((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],l=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,l=Math.max(l,e.length)),s=0,a=-32;a<l;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function s(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),Ko=Vo((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),Xo=Vo((function(t){!function(e,n){var r,s=this,a=n.pow(256,6),i=n.pow(2,52),o=2*i;function l(t,l,d){var f=[],m=h(function t(e,n){var r,s=[],a=typeof e;if(n&&"object"==a)for(r in e)try{s.push(t(e[r],n-1))}catch(t){}return s.length?s:"string"==a?e:e+"\0"}((l=1==l?{entropy:!0}:l||{}).entropy?[t,p(e)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(256):(t=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(t)),p(t)}catch(t){var n=s.navigator,a=n&&n.plugins;return[+new Date,s,a,s.screen,p(e)]}}():t,3),f),g=new u(f),y=function(){for(var t=g.g(6),e=a,n=0;t<i;)t=256*(t+n),e*=256,n=g.g(1);for(;t>=o;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|g.g(4)},y.quick=function(){return g.g(4)/4294967296},y.double=y,h(p(g.S),e),(l.pass||d||function(t,e,r,s){return s&&(s.S&&c(s,g),t.state=function(){return c(g,{})}),r?(n.random=t,e):t})(y,m,"global"in l?l.global:this==n,l.state)}function u(t){var e,n=t.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<256;)i[s]=s++;for(s=0;s<256;s++)i[s]=i[a=255&a+t[s%n]+(e=i[s])],i[a]=e;(r.g=function(t){for(var e,n=0,s=r.i,a=r.j,i=r.S;t--;)e=i[s=255&s+1],n=256*n+i[255&(i[s]=i[a=255&a+e])+(i[a]=e)];return r.i=s,r.j=a,n})(256)}function c(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function h(t,e){for(var n,r=t+"",s=0;s<r.length;)e[255&s]=255&(n^=19*e[255&s])+r.charCodeAt(s++);return p(e)}function p(t){return String.fromCharCode.apply(0,t)}if(n.seedrandom=l,h(n.random(),e),t.exports){t.exports=l;try{r=require("crypto")}catch(t){}}}([],Math)}));Xo.alea=Uo,Xo.xor128=Go,Xo.xorwow=Ho,Xo.xorshift7=qo,Xo.xor4096=jo,Xo.tychei=Ko;var Yo=Xo.alea;class Jo{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Yo(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Zo{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=Yo(s.toString()),this.randn=new Jo(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class Qo{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Yo(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const tl=Wt({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new Zo(e,n,r,s),i=$i(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const el=Wt({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new Jo(e,n,r,!1,s),i=$i(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const nl=Wt({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=$i(t,r),i=new Qo(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function rl(t,e){w(t);const n=zt(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Xt(t,null,n,e)}function sl(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return Dt.runKernelFunc(()=>{if(t===e||t<e&&n<0||e<t&&n>1)return pr([0],r);const s=Y(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return rl(s,r)},{},null,"Range",s)}const al=Wt({reciprocal_:function(t){const e=Bt(t,"x","reciprocal"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.reciprocal(e);return n([e]),r},n,null,"Reciprocal")}});const il=Wt({relu_:function(t){const e=Bt(t,"x","relu"),n={x:e};return Dt.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?e.toInt():t.relu(e)),n,null,"Relu")}});const ol=Wt({relu6_:function(t){const e=Bt(t,"x","relu6"),n={x:e};return Dt.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?Vt(e,"int32"):t.relu6(e)),n,null,"Relu6")}});const ll=Wt({reverse1d_:function(t){const e=Bt(t,"x","reverse");return b(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),Er(e,0)}});const ul=Wt({reverse2d_:function(t,e){const n=Bt(t,"x","reverse");return b(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),Er(n,e)}});const cl=Wt({reverse3d_:function(t,e){const n=Bt(t,"x","reverse");return b(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),Er(n,e)}});const hl=Wt({reverse4d_:function(t,e){const n=Bt(t,"x","reverse");return b(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),Er(n,e)}});const pl=Wt({rfft_:function(t,e){b("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,s=Cs(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map(t=>t);r[t.shape.length-1]=e-n,s=ps([t,pr(r)],t.shape.length-1),n=e}else s=t;const a=oe(s),i=de(hr(s,a),[r,n]),o=Ji(i),l=Math.floor(n/2)+1,u=eo(o),c=to(o),h=nn(u,[l,n-l],u.shape.length-1),p=nn(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,de(hr(h[0],p[0]),d)}});const dl=Wt({round_:function(t){const e=Bt(t,"x","round"),n={x:e};return Dt.runKernelFunc(t=>t.round(e),n,null,"Round")}});const fl=Wt({selu_:function(t){const e=Bt(t,"x","selu"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.selu(e);return n([e]),r},n,null,"Selu")}});const ml=Wt({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=Bt(t,"x","separableConv2d"),l=Bt(e,"depthwiseFilter","separableConv2d"),u=Bt(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");b(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),b(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),b(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),b(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),b(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const p=l.shape[2],d=l.shape[3];b(u.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`);const f=Vi(c,l,r,s,i,a),m=ln(f,u,1,"valid",i);return h?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}});const gl=async function(t,e){const n=Bt(t,"x","setdiff1d"),r=Bt(e,"y","setdiff1d");b(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),b(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),b(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let t=0;t<s.length;t++)i.has(s[t])||o++;const l=new pt([o],n.dtype),u=new pt([o],"int32");for(let t=0,e=0;t<s.length;t++)i.has(s[t])||(l.values[e]=s[t],u.values[e]=t,e++);return[l.toTensor(),u.toTensor()]};const yl=Wt({sign_:function(t){const e=Bt(t,"x","sign"),n={x:e};return Dt.runKernelFunc(t=>t.sign(e),n,null,"Sign")}});const bl=Wt({slice1d_:function(t,e,n){const r=Bt(t,"x","slice1d");return b(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Cs(r,[e],[n])}});const xl=Wt({slice2d_:function(t,e,n){const r=Bt(t,"x","slice2d");return b(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Cs(r,e,n)}});const wl=Wt({slice3d_:function(t,e,n){const r=Bt(t,"x","slice3d");return b(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Cs(r,e,n)}});const vl=Wt({slice4d_:function(t,e,n){const r=Bt(t,"x","slice4d");return b(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Cs(r,e,n)}});const Nl=Wt({softmax_:function(t,e=-1){const n=Bt(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return Dt.runKernelFunc((t,r)=>{const s=t.softmax(n,e);return r([s]),s},r,null,"Softmax",s)}});const Cl=Wt({softplus_:function(t){const e=Bt(t,"x","softplus"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.softplus(e);return n([e]),r},n,null,"Softplus")}});const Sl=Wt({squaredDifference_:function(t,e){let n=Bt(t,"a","squaredDifference"),r=Bt(e,"b","squaredDifference");[n,r]=kt(n,r),se(n.shape,r.shape);const s={a:n,b:r};return Dt.runKernelFunc((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s},s,null,"SquaredDifference",{})}});const kl=Wt({squeeze_:function(t,e){const n=Bt(t,"x","squeeze");return de(n,R(n.shape,e).newShape)}});const Il=Wt({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,l=0){null==r&&(r=new Array(e.length));let u=Bt(t,"x","stridedSlice");const c={x:u},h={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Dt.runKernelFunc(t=>{const c=Ur(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=u.rank-e.length,p=Ur(o),d=u.shape.slice();if(p.forEach(t=>{e[t]=0,n[t]=1,d.splice(t,0,1)}),u=de(u,d),c.length&&h>0){const t=c[0],i=h+1;e=Kr(s,t,i,e,u.shape),n=Xr(a,t,i,n,u.shape),r=Hr(r,t,i,u.shape)}else for(let t=0;t<u.rank;t++)e[t]=Jr(s,e,r,u.shape,t,i),n[t]=Zr(a,n,r,u.shape,t,i),r[t]=Yr(r,t,i);const f=Ur(l);f.forEach(t=>{n[t]=e[t]+1,r[t]=1});const m=Gr(e,n,r),g=m.filter((t,e)=>-1===f.indexOf(e));return r.every(t=>1===t)?de(Cs(u,e,m),g):t.stridedSlice(u,e,n,r).reshape(g)},c,null,"StridedSlice",h)}});const El=Wt({tan_:function(t){const e=Bt(t,"x","tan"),n={x:e};return Dt.runKernelFunc((t,n)=>{const r=t.tan(e);return n([e]),r},n,null,"Tan")}});function Al(t,e,n){if(w(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=zt(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Xt(t,e,r,n)}function Tl(t,e,n){if(w(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=zt(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Xt(t,e,r,n)}function $l(t,e,n){if(w(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=zt(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Xt(t,e,r,n)}function Rl(t,e,n){if(w(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=zt(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Xt(t,e=e||r,r,n)}const Dl=Wt({topk_:function(t,e=1,n=!0){const r=Bt(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+e);const a={x:r},i={k:e,sorted:n},[o,l]=Dt.runKernelFunc(t=>t.topk(r,e,n),a,null,"TopK",i);return{values:o,indices:l}}});const _l=Wt({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Jo(e,n,r,!0,s),i=$i(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Fl=Wt({unstack_:function(t,e=0){const n=Bt(t,"x","unstack");b(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const r={value:n},s={axis:e};return Dt.runKernelFunc(t=>t.unstack(n,e),r,null,"Unpack",s)}});function Ol(t,e=!0,n,r){return Dt.makeVariable(t,e,n,r)}function Ml(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=$i(t,"int32"),s=$i([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const zl=async function(t){const e=Bt(t,"condition","whereAsync","bool"),n=await e.data(),r=Ml(e.shape,n);return t!==e&&e.dispose(),r};const Ll=async function(t,e,n){const r=Bt(t,"tensor","boolMask"),s=Bt(e,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;b(i>0,()=>"mask cannot be scalar"),x(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let t=a;t<a+i;t++)l*=o[t];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=r.reshape(u),h=s.reshape([-1]),p=await zl(h),d=p.squeeze([1]),f=Ds(c,d,a);return t!==r&&r.dispose(),e!==s&&s.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};const Bl=Wt({equalStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","equalStrict"),r=Bt(e,"b","equalStrict");return x(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),Pl=Wt({greaterEqualStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","greaterEqualStrict"),r=Bt(e,"b","greaterEqualStrict");return x(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),Wl=Wt({greaterStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","greaterStrict"),r=Bt(e,"b","greaterStrict");return x(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),Vl=Wt({lessEqualStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","lessEqualStrict"),r=Bt(e,"b","lessEqualStrict");return x(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),Ul=Wt({lessStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","lessStrict"),r=Bt(e,"b","lessStrict");return x(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),Gl=Wt({notEqualStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","notEqualStrict"),r=Bt(e,"b","notEqualStrict");return x(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});const Hl=Wt({addStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","addStrict"),r=Bt(e,"b","addStrict");return x(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),ql=Wt({divStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","div"),r=Bt(e,"b","div");return x(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),jl=Wt({maximumStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","maximumStrict"),r=Bt(e,"b","maximumStrict");return x(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Kl=Wt({minimumStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","minimumStrict"),r=Bt(e,"b","minimumStrict");return x(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Xl=Wt({modStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","modStrict"),r=Bt(e,"b","modStrict");return x(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),Yl=Wt({mulStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","mul"),r=Bt(e,"b","mul");return x(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Jl=Wt({powStrict_:function(t,e){return Qa("strict variants of ops have been deprecated and will be removed in future"),x(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),Zl=Wt({squaredDifferenceStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","squaredDifferenceStrict"),r=Bt(e,"b","squaredDifferenceStrict");return x(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),Ql=Wt({subStrict_:function(t,e){Qa("strict variants of ops have been deprecated and will be removed in future");const n=Bt(t,"a","subStrict"),r=Bt(e,"b","subStrict");return x(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}});const tu=Wt({norm_:function(t,e="euclidean",n=null,r=!1){const s=function t(e,n,r=null){if(0===e.rank)return oi(e);if(1!==e.rank&&null===r)return t(de(e,[-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return Ne(oi(e),r);if(n===1/0)return mo(oi(e),r);if(n===-1/0)return So(oi(e),r);if("euclidean"===n||2===n)return Jt(Ne(yr(oi(e),Yt(2,"int32")),r));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return mo(Ne(oi(e),r[0]),r[1]-1);if(n===1/0)return mo(Ne(oi(e),r[1]),r[0]);if(n===-1/0)return So(Ne(oi(e),r[1]),r[0]);if("fro"===n||"euclidean"===n)return Jt(Ne(Zt(e),r));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=Bt(t,"x","norm"),e,n);let a=s.shape;if(r){const e=$(n,t.shape);a=ye(s.shape,e)}return s.reshape(a)}});const eu=Wt({movingAverage_:function(t,e,n,r,s=!0){const a=Bt(t,"v","movingAverage"),i=Bt(e,"x","movingAverage"),o=Bt(n,"decay","movingAverage");It(a,i),b(C(a.shape,i.shape),()=>"Shape mismatch in v and x");const l=Yt(1),u=Qt(l,o);let c=Ut(Qt(i,a),u);if(s){b(null!=r,()=>"When using zeroDebias: true, step is required.");const t=Bt(r,"step","movingAverage");c=jt(c,Qt(l,yr(o,t)))}return he(a,c)}});const nu=Wt({scatterND_:function(t,e,n){const r=Bt(t,"indices","scatterND","int32"),s=Bt(e,"updates","scatterND");Va(s,r,n);const a={indices:r,updates:s},i={shape:n};return Dt.runKernelFunc(t=>t.scatterND(r,s,n),a,null,"ScatterNd",i)}});const ru=Wt({sparseToDense_:function(t,e,n,r=0){const s=Bt(t,"sparseIndices","sparseToDense","int32"),a=Bt(e,"sparseValues","sparseToDense"),i=Bt(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},l={outputShape:n};return Dt.runKernelFunc(t=>t.sparseToDense(s,a,n,i),o,null,"SparseToDense",l)}});const su=Wt({gatherND_:function(t,e){const n=Bt(e,"indices","gatherND","int32"),r=Bt(t,"x","gatherND"),s={params:r,indices:n};return Dt.runKernelFunc(t=>t.gatherND(r,n),s,null,"GatherNd")}});const au=Wt({dropout_:function(t,e,n,r){const s=Bt(t,"x","dropout");if(b("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),b(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof mt?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(C(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=nl(a,0,1,"float32",r).add(i).floor().div(i);return s.mul(o)}});function iu(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function ou(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return rl(s,"float32")}const lu=async function(t,e,n=1){const r=Bt(t,"predictions","inTopK"),s=Bt(e,"targets","inTopK");b(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),b(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),x(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];b(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[l,u]=[i.length/a,a],c=D("bool",l);for(let t=0;t<l;t++){const e=t*u,r=i.subarray(e,e+u),s=[];for(let t=0;t<r.length;t++)s.push({value:r[t],index:t});s.sort((t,e)=>e.value-t.value),c[t]=0;for(let e=0;e<n;e++)if(s[e].index===o[t]){c[t]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),hs(c,s.shape,"bool")};function uu(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function cu(t,e){let n=e;const r=re(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)}function hu(t,e,n){if("linear"===e)return t;if("relu"===e)return il(t);if("elu"===e)return ji(t);if("relu6"===e)return ol(t);if("prelu"===e)return Lo(t,n);throw new Error(`Unknown fused activation ${e}.`)}const pu=(t,e)=>!(t>0)||"linear"===e;const du=Wt({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(l=l||"linear",!1===pu(Dt.state.gradientDepth,l)){let c=ln(t,e,n,r,s,a,i);return null!=o&&(c=he(c,o)),hu(c,l,u)}const c=Bt(t,"x","conv2d"),h=Bt(e,"filter","conv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),b(4===p.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+p.rank+"."),b(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&b(S(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),b(p.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`),b(ze(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),b("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const f=Te(p.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=Bt(o,"bias","fused conv2d"),[m]=kt(m,c),se(f.outShape,m.shape)),null!=u&&(g=Bt(u,"prelu weights","fused conv2d"));const y=(t,e)=>{const[s,i,o,u]=e,c=uu(t,o,l);b(Me(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[an(i.shape,c,s,n,r),sn(i,c,s.shape,n,r)];if(null!=u){const t=cu(u,c);h.push(t)}return h},x=t=>t.fusedConv2d({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),w={x:p,filter:h,bias:m,preluActivationWeights:g},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return ho((t,e,n)=>{let r=Dt.runKernelFunc(x,w,null,"FusedConv2D",v);return n([e,t,r]),d&&(r=r.as3D(r.shape[1],r.shape[2],r.shape[3])),{value:r,gradFunc:y}})(p,h)}return ho((t,e,n,r)=>{let s=Dt.runKernelFunc(x,w,null,"FusedConv2D",v);return r([e,t,s,n]),d&&(s=s.as3D(s.shape[1],s.shape[2],s.shape[3])),{value:s,gradFunc:y}})(p,h,m)}});const fu=Wt({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(!1===pu(Dt.state.gradientDepth,l)){let c=Vi(t,e,n,r,s,a,i);return null!=o&&(c=he(c,o)),hu(c,l,u)}const c=Bt(t,"x","depthwiseConv2d"),h=Bt(e,"filter","depthwiseConv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),b(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),b(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),b(p.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),b(ze(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&b(S(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`);const f=Te(p.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=Bt(o,"bias","fused conv2d"),[m]=kt(m,c),se(f.outShape,m.shape)),null!=u&&(g=Bt(u,"prelu weights","fused depthwiseConv2d"));const y=(t,e)=>{b(Me(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r,s,i]=e,o=uu(t,s,l),u=vn(r.shape,o,n,f),c=wn(r,o,n.shape,f);if(null!=i){return[u,c,cu(m,o)]}return[u,c]},x=t=>t.fusedDepthwiseConv2D({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),w={x:p,filter:h,bias:m,preluActivationWeights:g},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return ho((t,e,n)=>{let r=Dt.runKernelFunc(x,w,null,"FusedDepthwiseConv2D",v);return n([e,t,r]),d&&(r=r.as3D(r.shape[1],r.shape[2],r.shape[3])),{value:r,gradFunc:y}})(p,h)}return ho((t,e,n,r)=>{let s=Dt.runKernelFunc(x,w,null,"FusedDepthwiseConv2D",v);return r([e,t,s,n]),d&&(s=s.as3D(s.shape[1],s.shape[2],s.shape[3])),{value:s,gradFunc:y}})(p,h,m)}});const mu=Wt({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===pu(Dt.state.gradientDepth,a)){let o=Ue(t,e,n,r);return null!=s&&(o=he(o,s)),hu(o,a,i)}let o=Bt(t,"a","fused matMul"),l=Bt(e,"b","fused matMul");[o,l]=kt(o,l);const u=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],p=r?l.shape[l.rank-2]:l.shape[l.rank-1],d=o.shape.slice(0,-2),f=l.shape.slice(0,-2),m=N(d),g=N(f);b(o.rank>=2&&l.rank>=2&&o.rank===l.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${l.rank}.`),b(C(d,f),()=>`Error in fused matMul: outer dimensions (${d}) and (${f}) of Tensors with shapes ${o.shape} and `+l.shape+" must match."),b(u===c,()=>`Error in fused matMul: inner shapes (${u}) and (${c}) of Tensors with shapes ${o.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`);const y=o.shape.slice(0,-2).concat([h,p]),x=n?o.as3D(m,u,h):o.as3D(m,h,u),w=r?l.as3D(g,p,c):l.as3D(g,c,p);let v,S;null!=s&&(v=Bt(s,"bias","fused matMul"),[v]=kt(v,o),se(y,v.shape)),null!=i&&(S=Bt(i,"prelu weights","fused matMul"));const k=(t,e)=>{const[i,o,l,u]=e,c=uu(de(t,l.shape),l,a);let h,p;if(n||r?!n&&r?(h=Ue(c,o,!1,!1),p=Ue(c,i,!0,!1)):n&&!r?(h=Ue(o,c,!1,!0),p=Ue(i,c,!1,!1)):(h=Ue(o,c,!0,!0),p=Ue(c,i,!0,!0)):(h=Ue(c,o,!1,!0),p=Ue(i,c,!0,!1)),null!=s){return[h,p,cu(u,c)]}return[h,p]},I=t=>t.fusedBatchMatMul({a:x,b:w,transposeA:n,transposeB:r,bias:v,activation:a,preluActivationWeights:S}),E={a:x,b:w,bias:v,preluActivationWeights:S},A={transposeA:n,transposeB:r,activation:a};if(null==s){return ho((t,e,n)=>{const r=Dt.runKernelFunc(I,E,null,"_FusedMatMul",A);return n([t,e,r]),{value:de(r,y),gradFunc:k}})(x,w)}return ho((t,e,n,r)=>{const s=Dt.runKernelFunc(I,E,null,"_FusedMatMul",A);return r([t,e,s,n]),{value:de(s,y),gradFunc:k}})(x,w,v)}});var gu=Object.freeze({__proto__:null,conv2d:du,depthwiseConv2d:fu,matMul:mu});const yu=Wt({hammingWindow_:function(t){return ou(t,.54,.46)}});const bu=Wt({hannWindow_:function(t){return ou(t,.5,.5)}});const xu=Wt({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(Cs(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=ps([Cs(t,a,e-r),Zi([r],s)]);i.push(o),a+=n}return 0===i.length?Al([],[0,e]):de(ps(i),[i.length,e])}});const wu=Wt({stft_:function(t,e,n,r,s=bu){null==r&&(r=iu(e));const a=xu(t,e,n),i=Ut(a,s(e)),o=[];for(let t=0;t<a.shape[0];t++)o.push(pl(Cs(i,[t,0],[1,e]),r));return ps(o)}});const vu=Wt({cropAndResize_:function(t,e,n,r,s,a){const i=Bt(t,"image","cropAndResize"),o=Bt(e,"boxes","cropAndResize","float32"),l=Bt(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const u=o.shape[0];b(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),b(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),b(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),b(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),b(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),b("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s);const c={image:i,boxes:o,boxInd:l},h={method:s,extrapolationValue:a,cropSize:r};return Dt.runKernelFunc(t=>t.cropAndResize(i,o,l,r,s,a),c,null,"CropAndResize",h)}});const Nu=Wt({rotateWithOffset_:function(t,e,n=0,r=.5){const s=Bt(t,"image","rotateWithOffset","float32");b(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);const a={image:s},i={radians:e,fillValue:n,center:r};return Dt.runKernel("RotateWithOffset",a,i)}});function Cu(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),b(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),b(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),b(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),b(1===e.rank,()=>"scores must be a 1D tensor"),b(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),b(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Su=Wt({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Bt(t,"boxes","nonMaxSuppression"),i=Bt(e,"scores","nonMaxSuppression"),o=Cu(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return Dt.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,r,s),{boxes:a,scores:i},null,"NonMaxSuppressionV3",l)}});function ku(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||Iu)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function Iu(t,e){return t>e?1:t<e?-1:0}function Eu(t,e,n,r,s){return $u(t,e,n,r,s,0).selectedIndices}function Au(t,e,n,r,s,a){return $u(t,e,n,r,s,0,!1,a,!0)}function Tu(t,e,n,r,s,a){return $u(t,e,n,r,s,a,!0)}function $u(t,e,n,r,s,a,i=!1,o=!1,l=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>s&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(_u);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Ru(t,a,h[n]);if(i>=r){o=!0;break}if(e.score=e.score*Du(r,c,i),e.score<=s)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),p.push(e.score)):e.score>s&&ku(u,e,_u))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:rl(h,"int32")};return i&&(m.selectedScores=rl(p,"float32")),l&&(m.validOutputs=Yt(d,"int32")),m}function Ru(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Du(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function _u(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const Fu=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Bt(t,"boxes","nonMaxSuppressionAsync"),i=Bt(e,"scores","nonMaxSuppressionAsync"),o=Cu(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=Eu(l[0],l[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),u};const Ou=Wt({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Bt(t,"boxes","nonMaxSuppression"),o=Bt(e,"scores","nonMaxSuppression"),l=Cu(i,o,n,r,s,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Dt.runKernel("NonMaxSuppressionV5",u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Mu=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Bt(t,"boxes","nonMaxSuppressionAsync"),o=Bt(e,"scores","nonMaxSuppressionAsync"),l=Cu(i,o,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=Tu(u[0],u[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c};const zu=Wt({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Bt(t,"boxes","nonMaxSuppression"),o=Bt(e,"scores","nonMaxSuppression"),l=Cu(i,o,n,r,s,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Dt.runKernel("NonMaxSuppressionV4",u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Lu=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Bt(t,"boxes","nonMaxSuppressionAsync"),o=Bt(e,"scores","nonMaxSuppressionAsync"),l=Cu(i,o,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),f=Au(p,d,u,c,h,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),f};const Bu=Wt({resizeBilinear_:function(t,e,n=!1){const r=Bt(t,"images","resizeBilinear");b(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),b(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,l={images:s},u={alignCorners:n,size:e},c=Dt.runKernelFunc((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n)),l,null,"ResizeBilinear",u);return a?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Pu=Wt({resizeNearestNeighbor_:function(t,e,n=!1){const r=Bt(t,"images","resizeNearestNeighbor");b(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),b(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),b("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,l={images:s},u={alignCorners:n,size:e},c=Dt.runKernelFunc((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n)),l,null,"ResizeNearestNeighbor",u);return a?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Wu=Wt({bandPart_:function(t,e,n){b(e%1==0,()=>`bandPart(): numLower must be an integer, got ${e}.`),b(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=Bt(t,"a","bandPart");b(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=de(sl(0,a,1,"int32"),[-1,1]),l=sl(0,i,1,"int32"),u=Qt(o,l),c=Ze(Je(u,Yt(+e,"int32")),Ye(u,Yt(-n,"int32"))),h=pr([a,i],r.dtype);return de(Es(Fl(de(r,[-1,a,i])).map(t=>Qe(c,t,h))),s)}});const Vu=Wt({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,b(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)b(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=nn(t,t.shape[0],0).map(t=>kl(t,[0]));b(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],r=t;for(let e=0;e<t.length;++e)n.push(Dt.tidy(()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=Ut(Ne(Ut(n[r],t)),n[r]);t=Qt(t,e)}return jt(t,tu(t,"euclidean"))}));return e?Es(n,0):n}});function Uu(t,e=!1){return Dt.tidy(()=>{b(2===t.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],r=t.shape[1];let s=Yi(n),a=Ir(t);const i=Al([[1]],[1,1]);let o=Ir(i);const l=n>=r?r:n;for(let t=0;t<l;++t){const e=a,l=o,u=s;[o,a,s]=Dt.tidy(()=>{const e=Cs(a,[t,t],[n-t,1]),l=tu(e),u=Cs(a,[t,t],[1,1]),c=Qe(ar(u,0),Al([[-1]]),Al([[1]])),h=Qt(u,Ut(c,l)),p=jt(e,h);o=1===p.shape[0]?Ir(i):ps([i,Cs(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Kt(jt(Ue(c,h),l)),f=Cs(a,[t,0],[n-t,r]),m=Ut(d,o),g=yn(o);if(0===t)a=Qt(f,Ue(m,Ue(g,f)));else{const e=Qt(f,Ue(m,Ue(g,f)));a=ps([Cs(a,[0,0],[t,r]),e],0)}const y=yn(m),b=Cs(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=Qt(b,Ue(Ue(b,o),y));else{const e=Qt(b,Ue(Ue(b,o),y));s=ps([Cs(s,[0,0],[n,t]),e],1)}return[o,a,s]}),ri([e,l,u])}return!e&&n>r&&(s=Cs(s,[0,0],[n,r]),a=Cs(a,[0,0],[r,r])),[s,a]})}const Gu=Wt({qr_:function(t,e=!1){if(b(t.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank),2===t.rank)return Uu(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),r=Fl(de(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];return r.forEach(t=>{const[n,r]=Uu(t,e);s.push(n),a.push(r)}),[de(Es(s,0),t.shape),de(Es(a,0),t.shape)]}}});var Hu;(Hu=t.Reduction||(t.Reduction={}))[Hu.NONE=0]="NONE",Hu[Hu.MEAN=1]="MEAN",Hu[Hu.SUM=2]="SUM",Hu[Hu.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const qu=Wt({computeWeightedLoss_:function(e,n,r=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const s=Bt(e,"losses","computeWeightedLoss");let a=null;null!=n&&(a=Bt(n,"weights","computeWeightedLoss"));const i=null==a?s:Ut(s,a);if(r===t.Reduction.NONE)return i;if(r===t.Reduction.SUM)return Ne(i);if(r===t.Reduction.MEAN){if(null==a)return Co(i);{const t=s.size/a.size,e=jt(Ne(i),Ne(a));return t>1?jt(e,Yt(t)):e}}if(r===t.Reduction.SUM_BY_NONZERO_WEIGHTS){if(null==a)return jt(Ne(i),Yt(s.size));{const t=Ut(a,xs(s.shape)),e=Vt(Ne($o(t,Yt(0))),"float32");return jt(Ne(i),e)}}throw Error("Unknown reduction: "+r)}});const ju=Wt({absoluteDifference_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Bt(e,"labels","absoluteDifference"),i=Bt(n,"predictions","absoluteDifference");let o=null;null!=r&&(o=Bt(r,"weights","absoluteDifference")),x(a.shape,i.shape,"Error in absoluteDifference: ");const l=oi(Qt(a,i));return qu(l,o,s)}});const Ku=Wt({cosineDistance_:function(e,n,r,s,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Bt(e,"labels","cosineDistance"),o=Bt(n,"predictions","cosineDistance");let l=null;null!=s&&(l=Bt(s,"weights","cosineDistance")),x(i.shape,o.shape,"Error in cosineDistance: ");const u=Yt(1),c=Qt(u,Ne(Ut(i,o),r,!0));return qu(c,l,a)}});const Xu=Wt({hingeLoss_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let a=Bt(e,"labels","hingeLoss");const i=Bt(n,"predictions","hingeLoss");let o=null;null!=r&&(o=Bt(r,"weights","hingeLoss")),x(a.shape,i.shape,"Error in hingeLoss: ");const l=Yt(1);a=Qt(Ut(Yt(2),a),l);const u=il(Qt(l,Ut(a,i)));return qu(u,o,s)}});const Yu=Wt({huberLoss_:function(e,n,r,s=1,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Bt(e,"labels","huberLoss"),o=Bt(n,"predictions","huberLoss");let l=null;null!=r&&(l=Bt(r,"weights","huberLoss")),x(i.shape,o.shape,"Error in huberLoss: ");const u=Yt(s),c=oi(Qt(o,i)),h=ko(c,u),p=Qt(c,h),d=he(Ut(Yt(.5),Zt(h)),Ut(u,p));return qu(d,l,a)}});const Ju=Wt({logLoss_:function(e,n,r,s=1e-7,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Bt(e,"labels","logLoss"),o=Bt(n,"predictions","logLoss");let l=null;null!=r&&(l=Bt(r,"weights","logLoss")),x(i.shape,o.shape,"Error in logLoss: ");const u=Yt(1),c=Yt(s),h=Kt(Ut(i,gr(he(o,c)))),p=Ut(Qt(u,i),gr(he(Qt(u,o),c))),d=Qt(h,p);return qu(d,l,a)}});const Zu=Wt({meanSquaredError_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Bt(e,"labels","meanSquaredError"),i=Bt(n,"predictions","meanSquaredError");let o=null;null!=r&&(o=Bt(r,"weights","meanSquaredError")),x(a.shape,i.shape,"Error in meanSquaredError: ");const l=Sl(a,i);return qu(l,o,s)}});const Qu=Wt({sigmoidCrossEntropy_:function(e,n,r,s=0,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Bt(e,"multiClassLabels","sigmoidCrossEntropy");const o=Bt(n,"logits","sigmoidCrossEntropy");let l=null;if(null!=r&&(l=Bt(r,"weights","sigmoidCrossEntropy")),x(i.shape,o.shape,"Error in sigmoidCrossEntropy: "),s>0){const t=Yt(s),e=Yt(1),n=Yt(.5);i=he(Ut(i,Qt(e,t)),Ut(n,t))}const u=function(t,e){const n=Bt(t,"labels","sigmoidCrossEntropyWithLogits"),r=Bt(e,"logits","sigmoidCrossEntropyWithLogits");x(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=il(r),a=Ut(r,n),i=uo(In(Kt(oi(r))));return he(Qt(s,a),i)}(i,o);return qu(u,l,a)}});const tc=Wt({softmaxCrossEntropy_:function(e,n,r,s=0,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Bt(e,"onehotLabels","softmaxCrossEntropy");const o=Bt(n,"logits","softmaxCrossEntropy");let l=null;if(null!=r&&(l=Bt(r,"weights","softmaxCrossEntropy")),x(i.shape,o.shape,"Error in softmaxCrossEntropy: "),s>0){const t=Yt(s),e=Yt(1),n=Yt(i.shape[1]);i=he(Ut(i,Qt(e,t)),jt(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return ho((t,e,r)=>{const s=yo(e,[n],!0),a=Qt(Vt(e,"float32"),s);r([t,a]);const i=Kt(Ut(a,t));return{value:Ne(i,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=ye(t.shape,[n]);return[Ut(de(t,a),Qt(Vt(r,"float32"),In(s))),Ut(de(t,a),Qt(In(s),Vt(r,"float32")))]}}})(t,e)}(i,o);return qu(u,l,a)}}),ec={fft:Ji,ifft:Qi,rfft:pl,irfft:no},nc={hammingWindow:yu,hannWindow:bu,frame:xu,stft:wu},rc={resizeNearestNeighbor:Pu,resizeBilinear:Bu,rotateWithOffset:Nu,cropAndResize:vu,nonMaxSuppression:Su,nonMaxSuppressionAsync:Fu,nonMaxSuppressionWithScore:Ou,nonMaxSuppressionWithScoreAsync:Mu,nonMaxSuppressionPadded:zu,nonMaxSuppressionPaddedAsync:Lu},sc={bandPart:Wu,gramSchmidt:Vu,qr:Gu},ac={absoluteDifference:ju,computeWeightedLoss:qu,cosineDistance:Ku,hingeLoss:Xu,huberLoss:Yu,logLoss:Ju,meanSquaredError:Zu,sigmoidCrossEntropy:Qu,softmaxCrossEntropy:tc};var ic=Object.freeze({__proto__:null,image:rc,linalg:sc,losses:ac,spectral:ec,fused:gu,signal:nc,abs:oi,acos:li,acosh:ui,add:he,addN:ci,all:hi,any:pi,argMax:di,argMin:fi,asin:mi,asinh:gi,atan:yi,atan2:bi,atanh:xi,avgPool:wi,avgPool3d:vi,basicLSTMCell:Ci,batchToSpaceND:os,batchNorm:ki,batchNorm2d:Ii,batchNorm3d:Ei,batchNorm4d:Ai,broadcastTo:Ti,buffer:$i,cast:Vt,ceil:Ri,clipByValue:Di,clone:Ir,complex:hr,concat:ps,concat1d:_i,concat2d:Fi,concat3d:Oi,concat4d:Mi,conv1d:zi,conv2d:ln,conv2dTranspose:Li,conv3d:Bi,conv3dTranspose:Pi,cos:zr,cosh:Br,cumsum:bn,depthToSpace:Wi,depthwiseConv2d:Vi,diag:Ui,dilation2d:Gi,div:jt,divNoNan:Hi,dot:qi,elu:ji,equal:Xn,erf:Ki,exp:In,expandDims:Is,expm1:Xi,eye:Yi,fft:Ji,fill:Zi,floor:or,floorDiv:qt,gather:Ds,greater:ar,greaterEqual:Ye,ifft:Qi,imag:to,irfft:no,isFinite:ro,isInf:so,isNaN:ao,leakyRelu:io,less:Zn,lessEqual:Je,linspace:oo,localResponseNormalization:lo,log:gr,log1p:uo,logSigmoid:fo,logSoftmax:go,logSumExp:yo,logicalAnd:Ze,logicalNot:Rr,logicalOr:bo,logicalXor:xo,matMul:Ue,max:mo,maxPool:wo,maxPool3d:vo,maxPoolWithArgmax:No,maximum:_s,mean:Co,min:So,minimum:ko,mod:Io,moments:Eo,mul:Ut,multiRNNCell:Ao,multinomial:To,neg:Kt,notEqual:$o,oneHot:Da,ones:xs,onesLike:Ro,outerProduct:Do,pad:Wr,pad1d:_o,pad2d:Fo,pad3d:Oo,pad4d:Mo,pool:zo,pow:yr,prelu:Lo,print:Bo,prod:Po,rand:Wo,randomGamma:tl,randomNormal:el,randomUniform:nl,range:sl,real:eo,reciprocal:al,relu:il,relu6:ol,reshape:de,reverse:Er,reverse1d:ll,reverse2d:ul,reverse3d:cl,reverse4d:hl,rfft:pl,round:dl,rsqrt:Dn,scalar:Yt,selu:fl,separableConv2d:ml,setdiff1dAsync:gl,sigmoid:as,sign:yl,sin:dn,sinh:mn,slice:Cs,slice1d:bl,slice2d:xl,slice3d:wl,slice4d:vl,softmax:Nl,softplus:Cl,spaceToBatchND:He,split:nn,sqrt:Jt,square:Zt,squaredDifference:Sl,squeeze:kl,stack:Es,step:Gt,stridedSlice:Il,sub:Qt,sum:Ne,tan:El,tanh:Ni,tensor:hs,tensor1d:rl,tensor2d:Al,tensor3d:Oa,tensor4d:Tl,tensor5d:$l,tensor6d:Rl,tile:_n,topk:Dl,truncatedNormal:_l,unsortedSegmentSum:On,unstack:Fl,variable:Ol,where:Qe,whereAsync:zl,zeros:pr,zerosLike:oe,op:Wt,booleanMaskAsync:Ll,equalStrict:Bl,greaterEqualStrict:Pl,greaterStrict:Wl,lessEqualStrict:Vl,lessStrict:Ul,notEqualStrict:Gl,addStrict:Hl,divStrict:ql,maximumStrict:jl,minimumStrict:Kl,modStrict:Xl,mulStrict:Yl,powStrict:Jl,squaredDifferenceStrict:Zl,subStrict:Ql,transpose:yn,norm:tu,movingAverage:eu,scatterND:nu,sparseToDense:ru,gatherND:su,dropout:au,enclosingPowerOfTwo:iu,cosineWindow:ou,inTopKAsync:lu});class oc extends Ha{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:s[t.name]}));this.applyGradients(t)}else this.applyGradients(s);return ri(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return co(t,e)}dispose(){null!=this.iterations_&&ri(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Yt(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(oc,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class lc extends oc{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Dt.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Dt.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:ni(()=>oe(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:ni(()=>oe(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;ni(()=>{const t=a.mul(this.rho).add(s.square().mul(1-this.rho)),e=i.add(this.epsilon).sqrt().div(a.add(this.epsilon).sqrt()).mul(s),n=i.mul(this.rho).add(e.square().mul(1-this.rho));a.assign(t),i.assign(n);const o=e.mul(-this.learningRate).add(r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ri(this.accumulatedGrads.map(t=>t.variable)),ri(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}lc.className="Adadelta",ja(lc);class uc extends oc{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Dt.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:ni(()=>Zi(r.shape,this.initialAccumulatorValue).variable(t))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;ni(()=>{const t=a.add(s.square());a.assign(t);const e=s.div(t.add(Dt.backend.epsilon()).sqrt()).mul(-this.learningRate).add(r);r.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ri(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}uc.className="Adagrad",ja(uc);class cc extends oc{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ni(()=>{this.accBeta1=Yt(e).variable(),this.accBeta2=Yt(n).variable()}),null==r&&(this.epsilon=Dt.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);ni(()=>{const n=Qt(1,this.accBeta1),r=Qt(1,this.accBeta2);e.forEach((e,s)=>{const a=Dt.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:ni(()=>oe(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:e+"/v",variable:ni(()=>oe(a).variable(!1))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=o.mul(this.beta1).add(i.mul(1-this.beta1)),c=l.mul(this.beta2).add(i.square().mul(1-this.beta2)),h=u.div(n),p=c.div(r);o.assign(u),l.assign(c);const d=h.div(p.sqrt().add(this.epsilon)).mul(-this.learningRate).add(a);a.assign(d)}),this.accBeta1.assign(this.accBeta1.mul(this.beta1)),this.accBeta2.assign(this.accBeta2.mul(this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ri(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&ri(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),ni(()=>{this.accBeta1.assign(yr(this.beta1,this.iterations_+1)),this.accBeta2.assign(yr(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}cc.className="Adam",ja(cc);class hc extends oc{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ni(()=>{this.iteration=Yt(0).variable(),this.accBeta1=Yt(e).variable()}),null==r&&(this.epsilon=Dt.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);ni(()=>{const n=Qt(1,this.accBeta1),r=jt(-this.learningRate,this.iteration.mul(this.decay).add(1));e.forEach((e,s)=>{const a=Dt.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:oe(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:e+"/v",variable:oe(a).variable(!1)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=o.mul(this.beta1).add(i.mul(1-this.beta1)),c=l.mul(this.beta2),h=i.abs(),p=c.maximum(h);o.assign(u),l.assign(p);const d=r.div(n).mul(u.div(p.add(this.epsilon))).add(a);a.assign(d)}),this.iteration.assign(this.iteration.add(1)),this.accBeta1.assign(this.accBeta1.mul(this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ri(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&ri(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}hc.className="Adamax",ja(hc);class pc extends oc{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=Dt.registeredVariables[e];ni(()=>{const t=this.c.mul(r).add(s);s.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=si(Yt(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}pc.className="SGD",ja(pc);class dc extends pc{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Yt(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Dt.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:ni(()=>oe(r).variable(t))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&ni(()=>{let t;const e=this.m.mul(s).add(a);t=this.useNesterov?this.c.mul(a.add(e.mul(this.m))).add(r):this.c.mul(e).add(r),s.assign(e),r.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ri(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}dc.className="Momentum",ja(dc);class fc extends oc{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Dt.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Dt.registeredVariables[e];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:ni(()=>oe(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:ni(()=>oe(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:ni(()=>oe(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;ni(()=>{const t=a.mul(this.decay).add(s.square().mul(1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,o=e.mul(this.decay).add(s.mul(1-this.decay)),l=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.sub(o.square().add(this.epsilon)).sqrt()));a.assign(t),e.assign(o),i.assign(l);const u=r.sub(l);r.assign(u)}else{const t=a.mul(this.decay).add(s.square().mul(1-this.decay)),e=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.add(this.epsilon).sqrt()));a.assign(t),i.assign(e);const n=r.sub(e);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ri(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&ri(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&ri(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}fc.className="RMSProp",ja(fc);class mc{static sgd(t){return new pc(t)}static momentum(t,e,n=!1){return new dc(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new fc(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new cc(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new lc(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new hc(t,e,n,r,s)}static adagrad(t,e=.1){return new uc(t,e)}}const gc={sgd:mc.sgd,momentum:mc.momentum,adadelta:mc.adadelta,adagrad:mc.adagrad,rmsprop:mc.rmsprop,adamax:mc.adamax,adam:mc.adam},yc="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function bc(){return new Promise(t=>yc(()=>t()))}function xc(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function wc(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function vc(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Nc(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function Cc(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Sc(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}function kc(...t){n().getBool("IS_TEST")||console.warn(...t)}function Ic(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Ec(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function Ac(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Tc(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function $c(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Rc(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Dc(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function _c(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Fc(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=pr(t.shape),r=t.toFloat(),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!M(t.dtype,e))return Dt.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=r.cast(e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=Yt(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function Oc(t,e){return Dt.makeTensorFromDataId(t.dataId,e,t.dtype)}function Mc(t,e,n){const r=(e-t)/(n-1),s=Y(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return rl(s,"float32")}var zc=Object.freeze({__proto__:null,segment_util:Rs,castTensor:Fc,reshapeTensor:Oc,linspaceImpl:Mc,upcastType:Ct,axesAreInnerMostDims:fe,combineLocations:me,computeOutAndReduceShapes:ge,expandShapeToKeepDim:ye,assertAxesAreInnerMostDims:be,getAxesPermutation:xe,getUndoAxesPermutation:we,getInnerMostAxes:ve,getBroadcastDims:ne,getReductionAxes:re,assertAndGetBroadcastShape:se,assertParamsConsistent:us,computeOutShape:cs,computeDilation2DInfo:Ie,computePool2DInfo:Ee,computePool3DInfo:Ae,computeConv2DInfo:Te,computeConv3DInfo:$e,computeDefaultPad:Re,tupleValuesAreOne:Me,eitherStridesOrDilationsAreOne:ze,convertConv2DDataFormat:Le,getFusedDyActivation:uu,getFusedBiasGradient:cu,applyActivation:hu,shouldFuse:pu,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Ts,getImageCenter:xc,getReshaped:wc,getPermuted:vc,getReshapedPermuted:Nc,getSliceBeginCoords:Cc,getSliceSize:Sc,prepareAndValidate:Ba,validateUpdateShape:Wa,validateInput:Va,calculateShapes:Ua,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:_r,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:kc,log:function(...t){n().getBool("IS_TEST")||console.log(...t)},mergeRealAndImagArrays:Ic,splitRealAndImagArrays:Ec,complexWithEvenIndex:Ac,complexWithOddIndex:Tc,getComplexWithIndex:$c,assignToTypedArray:Rc,exponents:Dc,exponent:_c,prepareSplitSize:en});function Lc(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map(e=>{const a=[...s];a[n]=e;const i=t.slice(r,a);return r[n]+=e,i})}function Bc(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=$i(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function Pc(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],l=D(n,i*r),u=D("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort((t,e)=>e.value-t.value);const i=e*r,c=l.subarray(i,i+r),h=u.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[hs(l,c,n),hs(u,c,"int32")]}var Wc=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:Eu,nonMaxSuppressionV4Impl:Au,nonMaxSuppressionV5Impl:Tu,split:Lc,tile:Bc,topkImpl:Pc,whereImpl:Ml});class Vc{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class Uc{time(t){return Gc("time")}read(t){return Gc("read")}readSync(t){return Gc("readSync")}numDataIds(){return Gc("numDataIds")}disposeData(t){return Gc("disposeData")}write(t,e,n){return Gc("write")}move(t,e,n,r){return Gc("move")}memory(){return Gc("memory")}floatPrecision(){return Gc("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return Gc("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return Gc("fusedBatchMatMul")}slice(t,e,n){return Gc("slice")}stridedSlice(t,e,n,r){return Gc("stridedSlice")}unstack(t,e){return Gc("unstack")}reverse(t,e){return Gc("reverse")}concat(t,e){return Gc("concat")}neg(t){return Gc("neg")}add(t,e){return Gc("add")}addN(t){return Gc("addN")}subtract(t,e){return Gc("subtract")}multiply(t,e){return Gc("multiply")}realDivide(t,e){return Gc("realDivide")}floorDiv(t,e){return Gc("floorDiv")}sum(t,e){return Gc("sum")}prod(t,e){return Gc("prod")}unsortedSegmentSum(t,e,n){return Gc("unsortedSegmentSum")}argMin(t,e){return Gc("argMin")}argMax(t,e){return Gc("argMax")}equal(t,e){return Gc("equal")}notEqual(t,e){return Gc("notEqual")}less(t,e){return Gc("less")}lessEqual(t,e){return Gc("lessEqual")}greater(t,e){return Gc("greater")}greaterEqual(t,e){return Gc("greaterEqual")}logicalNot(t){return Gc("logicalNot")}logicalAnd(t,e){return Gc("logicalAnd")}logicalOr(t,e){return Gc("logicalOr")}where(t){return Gc("where")}select(t,e,n){return Gc("select")}topk(t,e,n){return Gc("topk")}min(t,e){return Gc("min")}minimum(t,e){return Gc("minimum")}mod(t,e){return Gc("mod")}max(t,e){return Gc("max")}maximum(t,e){return Gc("maximum")}all(t,e){return Gc("all")}any(t,e){return Gc("any")}squaredDifference(t,e){return Gc("squaredDifference")}ceil(t){return Gc("ceil")}floor(t){return Gc("floor")}round(t){return Gc("round")}sign(t){return Gc("sign")}isNaN(t){return Gc("isNaN")}isInf(t){return Gc("isInf")}isFinite(t){return Gc("isFinite")}pow(t,e){return Gc("pow")}exp(t){return Gc("exp")}expm1(t){return Gc("expm1")}softmax(t,e){return Gc("softmax")}log(t){return Gc("log")}log1p(t){return Gc("log1p")}sqrt(t){return Gc("sqrt")}rsqrt(t){return Gc("rsqrt")}square(t){return Gc("square")}reciprocal(t){return Gc("reciprocal")}relu(t){return Gc("relu")}relu6(t){return Gc("relu6")}prelu(t,e){return Gc("prelu")}elu(t){return Gc("elu")}eluDer(t,e){return Gc("eluDer")}selu(t){return Gc("selu")}int(t){return Gc("int")}clip(t,e,n){return Gc("clip")}abs(t){return Gc("abs")}complexAbs(t){return Gc("complexAbs")}sigmoid(t){return Gc("sigmoid")}softplus(t){return Gc("softplus")}sin(t){return Gc("sin")}cos(t){return Gc("cos")}tan(t){return Gc("tan")}asin(t){return Gc("asin")}acos(t){return Gc("acos")}atan(t){return Gc("atan")}atan2(t,e){return Gc("atan2")}sinh(t){return Gc("sinh")}cosh(t){return Gc("cosh")}tanh(t){return Gc("tanh")}asinh(t){return Gc("asinh")}acosh(t){return Gc("acosh")}atanh(t){return Gc("atanh")}erf(t){return Gc("erf")}step(t,e){return Gc("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return Gc("fusedConv2d")}conv2d(t,e,n){return Gc("conv2d")}conv2dDerInput(t,e,n){return Gc("conv2dDerInput")}conv2dDerFilter(t,e,n){return Gc("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return Gc("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return Gc("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return Gc("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return Gc("depthwiseConv2DDerFilter")}conv3d(t,e,n){return Gc("conv3d")}conv3dDerInput(t,e,n){return Gc("conv3dDerInput")}conv3dDerFilter(t,e,n){return Gc("conv3dDerFilter")}maxPool(t,e){return Gc("maxPool")}maxPoolBackprop(t,e,n,r){return Gc("maxPoolBackprop")}avgPool(t,e){return Gc("avgPool")}avgPoolBackprop(t,e,n){return Gc("avgPoolBackprop")}avgPool3d(t,e){return Gc("avgPool3d")}avgPool3dBackprop(t,e,n){return Gc("avgPool3dBackprop")}maxPool3d(t,e){return Gc("maxPool3d")}maxPool3dBackprop(t,e,n,r){return Gc("maxPool3dBackprop")}reshape(t,e){return Gc("reshape")}cast(t,e){return Gc("cast")}tile(t,e){return Gc("tile")}pad(t,e,n){return Gc("pad")}transpose(t,e){return Gc("transpose")}gather(t,e,n){return Gc("gather")}gatherND(t,e){return Gc("gatherND")}scatterND(t,e,n){return Gc("scatterND")}batchToSpaceND(t,e,n){return Gc("batchToSpaceND")}spaceToBatchND(t,e,n){return Gc("spaceToBatchND")}resizeBilinear(t,e,n,r){return Gc("resizeBilinear")}resizeBilinearBackprop(t,e,n){return Gc("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return Gc("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return Gc("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,a){return Gc("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return Gc("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return Gc("LRNGrad")}multinomial(t,e,n,r){return Gc("multinomial")}oneHot(t,e,n,r){return Gc("oneHot")}cumsum(t,e,n,r){return Gc("cumsum")}nonMaxSuppression(t,e,n,r,s){return Gc("nonMaxSuppression")}fft(t){return Gc("fft")}ifft(t){return Gc("ifft")}complex(t,e){return Gc("complex")}real(t){return Gc("real")}imag(t){return Gc("imag")}cropAndResize(t,e,n,r,s,a){return Gc("cropAndResize")}depthToSpace(t,e,n){return Gc("depthToSpace")}split(t,e,n){return Gc("split")}sparseToDense(t,e,n,r){return Gc("sparseToDense")}diag(t){return Gc("diag")}fill(t,e,n){return Gc("fill")}onesLike(t){return Gc("onesLike")}zerosLike(t){return Gc("zerosLike")}linspace(t,e,n){return Gc("linspace")}dispose(){return Gc("dispose")}}function Gc(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}let Hc;function qc(){return null==Hc&&(Hc=ii().epsilon()),Hc}mt.prototype.abs=function(){return this.throwIfDisposed(),oi(this)},mt.prototype.acos=function(){return this.throwIfDisposed(),li(this)},mt.prototype.acosh=function(){return this.throwIfDisposed(),ui(this)},mt.prototype.addStrict=function(t){return this.throwIfDisposed(),Hl(this,t)},mt.prototype.add=function(t){return this.throwIfDisposed(),he(this,t)},mt.prototype.all=function(t,e){return this.throwIfDisposed(),hi(this,t,e)},mt.prototype.any=function(t,e){return this.throwIfDisposed(),pi(this,t,e)},mt.prototype.argMax=function(t){return this.throwIfDisposed(),di(this,t)},mt.prototype.argMin=function(t){return this.throwIfDisposed(),fi(this,t)},mt.prototype.asScalar=function(){return this.throwIfDisposed(),b(1===this.size,()=>"The array must have only 1 element."),de(this,[])},mt.prototype.asType=function(t){return this.throwIfDisposed(),Vt(this,t)},mt.prototype.as1D=function(){return this.throwIfDisposed(),de(this,[this.size])},mt.prototype.as2D=function(t,e){return this.throwIfDisposed(),de(this,[t,e])},mt.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),de(this,[t,e,n])},mt.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),de(this,[t,e,n,r])},mt.prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),de(this,[t,e,n,r,s])},mt.prototype.asin=function(){return this.throwIfDisposed(),mi(this)},mt.prototype.asinh=function(){return this.throwIfDisposed(),gi(this)},mt.prototype.atan=function(){return this.throwIfDisposed(),yi(this)},mt.prototype.atan2=function(t){return this.throwIfDisposed(),bi(this,t)},mt.prototype.atanh=function(){return this.throwIfDisposed(),xi(this)},mt.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),wi(this,t,e,n,r)},mt.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),os(this,t,e)},mt.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),ki(this,t,e,n,r,s)},mt.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Ti(this,t)},mt.prototype.cast=function(t){return this.throwIfDisposed(),Vt(this,t)},mt.prototype.ceil=function(){return this.throwIfDisposed(),Ri(this)},mt.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),Di(this,t,e)},mt.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof mt&&(t=[t]),ps([this,...t],e)},mt.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),zi(this,t,e,n,r,s,a)},mt.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),Li(this,t,e,n,r,s)},mt.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),ln(this,t,e,n,r,s,a)},mt.prototype.cos=function(){return this.throwIfDisposed(),zr(this)},mt.prototype.cosh=function(){return this.throwIfDisposed(),Br(this)},mt.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),bn(this,t,e,n)},mt.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Wi(this,t,e)},mt.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return Qa("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Vi(this,t,e,n,r,s,a)},mt.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Vi(this,t,e,n,r,s,a)},mt.prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),Gi(this,t,e,n,r,s)},mt.prototype.divNoNan=function(t){return this.throwIfDisposed(),Hi(this,t)},mt.prototype.divStrict=function(t){return this.throwIfDisposed(),ql(this,t)},mt.prototype.div=function(t){return this.throwIfDisposed(),jt(this,t)},mt.prototype.dot=function(t){return this.throwIfDisposed(),qi(this,t)},mt.prototype.elu=function(){return this.throwIfDisposed(),ji(this)},mt.prototype.equalStrict=function(t){return this.throwIfDisposed(),Bl(this,t)},mt.prototype.equal=function(t){return this.throwIfDisposed(),Xn(this,t)},mt.prototype.erf=function(){return this.throwIfDisposed(),Ki(this)},mt.prototype.exp=function(){return this.throwIfDisposed(),In(this)},mt.prototype.expandDims=function(t){return this.throwIfDisposed(),Is(this,t)},mt.prototype.expm1=function(){return this.throwIfDisposed(),Xi(this)},mt.prototype.fft=function(){return this.throwIfDisposed(),Ji(this)},mt.prototype.flatten=function(){return this.throwIfDisposed(),de(this,[this.size])},mt.prototype.floor=function(){return this.throwIfDisposed(),or(this)},mt.prototype.floorDiv=function(t){return this.throwIfDisposed(),qt(this,t)},mt.prototype.gather=function(t,e){return this.throwIfDisposed(),Ds(this,t,e)},mt.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),Pl(this,t)},mt.prototype.greaterEqual=function(t){return this.throwIfDisposed(),Ye(this,t)},mt.prototype.greaterStrict=function(t){return this.throwIfDisposed(),Wl(this,t)},mt.prototype.greater=function(t){return this.throwIfDisposed(),ar(this,t)},mt.prototype.ifft=function(){return this.throwIfDisposed(),Qi(this)},mt.prototype.irfft=function(){return this.throwIfDisposed(),no(this)},mt.prototype.isFinite=function(){return this.throwIfDisposed(),ro(this)},mt.prototype.isInf=function(){return this.throwIfDisposed(),so(this)},mt.prototype.isNaN=function(){return this.throwIfDisposed(),ao(this)},mt.prototype.leakyRelu=function(t){return this.throwIfDisposed(),io(this,t)},mt.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),Vl(this,t)},mt.prototype.lessEqual=function(t){return this.throwIfDisposed(),Je(this,t)},mt.prototype.lessStrict=function(t){return this.throwIfDisposed(),Ul(this,t)},mt.prototype.less=function(t){return this.throwIfDisposed(),Zn(this,t)},mt.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),lo(this,t,e,n,r)},mt.prototype.logSigmoid=function(){return this.throwIfDisposed(),fo(this)},mt.prototype.logSoftmax=function(t){return this.throwIfDisposed(),go(this,t)},mt.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),yo(this,t,e)},mt.prototype.log=function(){return this.throwIfDisposed(),gr(this)},mt.prototype.log1p=function(){return this.throwIfDisposed(),uo(this)},mt.prototype.logicalAnd=function(t){return this.throwIfDisposed(),Ze(this,t)},mt.prototype.logicalNot=function(){return this.throwIfDisposed(),Rr(this)},mt.prototype.logicalOr=function(t){return this.throwIfDisposed(),bo(this,t)},mt.prototype.logicalXor=function(t){return this.throwIfDisposed(),xo(this,t)},mt.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Ue(this,t,e,n)},mt.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),wo(this,t,e,n,r)},mt.prototype.max=function(t,e){return this.throwIfDisposed(),mo(this,t,e)},mt.prototype.maximumStrict=function(t){return this.throwIfDisposed(),jl(this,t)},mt.prototype.maximum=function(t){return this.throwIfDisposed(),_s(this,t)},mt.prototype.mean=function(t,e){return this.throwIfDisposed(),Co(this,t,e)},mt.prototype.min=function(t,e){return this.throwIfDisposed(),So(this,t,e)},mt.prototype.minimumStrict=function(t){return this.throwIfDisposed(),Kl(this,t)},mt.prototype.minimum=function(t){return this.throwIfDisposed(),ko(this,t)},mt.prototype.modStrict=function(t){return this.throwIfDisposed(),Xl(this,t)},mt.prototype.mod=function(t){return this.throwIfDisposed(),Io(this,t)},mt.prototype.mulStrict=function(t){return this.throwIfDisposed(),Yl(this,t)},mt.prototype.mul=function(t){return this.throwIfDisposed(),Ut(this,t)},mt.prototype.neg=function(){return this.throwIfDisposed(),Kt(this)},mt.prototype.norm=function(t,e,n){return this.throwIfDisposed(),tu(this,t,e,n)},mt.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),Gl(this,t)},mt.prototype.notEqual=function(t){return this.throwIfDisposed(),$o(this,t)},mt.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Da(this,t,e,n)},mt.prototype.onesLike=function(){return this.throwIfDisposed(),Ro(this)},mt.prototype.pad=function(t,e){return this.throwIfDisposed(),Wr(this,t,e)},mt.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),zo(this,t,e,n,r,s)},mt.prototype.powStrict=function(t){return this.throwIfDisposed(),Jl(this,t)},mt.prototype.pow=function(t){return this.throwIfDisposed(),yr(this,t)},mt.prototype.prelu=function(t){return this.throwIfDisposed(),Lo(this,t)},mt.prototype.prod=function(t,e){return this.throwIfDisposed(),Po(this,t,e)},mt.prototype.reciprocal=function(){return this.throwIfDisposed(),al(this)},mt.prototype.relu=function(){return this.throwIfDisposed(),il(this)},mt.prototype.relu6=function(){return this.throwIfDisposed(),ol(this)},mt.prototype.reshapeAs=function(t){return this.throwIfDisposed(),de(this,t.shape)},mt.prototype.reshape=function(t){return this.throwIfDisposed(),de(this,t)},mt.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),Bu(this,t,e)},mt.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),Pu(this,t,e)},mt.prototype.reverse=function(t){return this.throwIfDisposed(),Er(this,t)},mt.prototype.rfft=function(){return this.throwIfDisposed(),pl(this)},mt.prototype.round=function(){return this.throwIfDisposed(),dl(this)},mt.prototype.rsqrt=function(){return this.throwIfDisposed(),Dn(this)},mt.prototype.selu=function(){return this.throwIfDisposed(),fl(this)},mt.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),ml(this,t,e,n,r,s,a)},mt.prototype.sigmoid=function(){return this.throwIfDisposed(),as(this)},mt.prototype.sign=function(){return this.throwIfDisposed(),yl(this)},mt.prototype.sin=function(){return this.throwIfDisposed(),dn(this)},mt.prototype.sinh=function(){return this.throwIfDisposed(),mn(this)},mt.prototype.slice=function(t,e){return this.throwIfDisposed(),Cs(this,t,e)},mt.prototype.softmax=function(t){return this.throwIfDisposed(),Nl(this,t)},mt.prototype.softplus=function(){return this.throwIfDisposed(),Cl(this)},mt.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),He(this,t,e)},mt.prototype.split=function(t,e){return this.throwIfDisposed(),nn(this,t,e)},mt.prototype.sqrt=function(){return this.throwIfDisposed(),Jt(this)},mt.prototype.square=function(){return this.throwIfDisposed(),Zt(this)},mt.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Sl(this,t)},mt.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),Zl(this,t)},mt.prototype.squeeze=function(t){return this.throwIfDisposed(),kl(this,t)},mt.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof mt?[this,t]:[this,...t];return Es(n,e)},mt.prototype.step=function(t){return this.throwIfDisposed(),Gt(this,t)},mt.prototype.stridedSlice=function(t,e,n,r,s,a,i,o){return this.throwIfDisposed(),Il(this,t,e,n,r,s,a,i,o)},mt.prototype.subStrict=function(t){return this.throwIfDisposed(),Ql(this,t)},mt.prototype.sub=function(t){return this.throwIfDisposed(),Qt(this,t)},mt.prototype.sum=function(t,e){return this.throwIfDisposed(),Ne(this,t,e)},mt.prototype.tan=function(){return this.throwIfDisposed(),El(this)},mt.prototype.tanh=function(){return this.throwIfDisposed(),Ni(this)},mt.prototype.tile=function(t){return this.throwIfDisposed(),_n(this,t)},mt.prototype.toBool=function(){return this.throwIfDisposed(),Vt(this,"bool")},mt.prototype.toFloat=function(){return this.throwIfDisposed(),Vt(this,"float32")},mt.prototype.toInt=function(){return this.throwIfDisposed(),Vt(this,"int32")},mt.prototype.topk=function(t,e){return this.throwIfDisposed(),Dl(this,t,e)},mt.prototype.transpose=function(t){return this.throwIfDisposed(),yn(this,t)},mt.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),On(this,t,e)},mt.prototype.unstack=function(t){return this.throwIfDisposed(),Fl(this,t)},mt.prototype.where=function(t,e){return this.throwIfDisposed(),Qe(t,this,e)},mt.prototype.zerosLike=function(){return this.throwIfDisposed(),oe(this)},ft=ic;class jc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,jc.prototype)}}class Kc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Kc.prototype)}}class Xc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Xc.prototype)}}class Yc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Yc.prototype)}}class Jc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Jc.prototype)}}function Zc(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Qc(t,e){if(!t)throw new Jc(e)}function th(t,e){let n=0;for(const r of t)r===e&&n++;return n}function eh(t){return 1===t.length?t[0]:t}function nh(t){return Array.isArray(t)?t:[t]}function rh(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function sh(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let ah={};function ih(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function oh(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in ah)a=ah[s];else if(a=e[s],null==a)throw new Xc(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new Xc(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in ah?[o,l]=ah.className:i in e&&([o,l]=e[i]),null==o)throw new Xc(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const t={};for(const e of Object.keys(ah))t[e]=ah[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},ah);for(const t of Object.keys(n))ah[t]=n[t];!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>t(e));else{const n=Object.keys(e);for(const r of n){const n=e[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?t(n):e[r]=n.value)}}}(a.config);const r=l(o,a.config,n,s);return ah=Object.assign({},e),r}{const t=Object.assign({},ah);for(const t of Object.keys(n))ah[t]=n[t];const e=new o(a.config);return ah=Object.assign({},t),e}}}function lh(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function uh(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function ch(t){if(null==t)throw new Xc("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function hh(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new Xc(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function ph(t,e,n=0,r=1/0){return Qc(n>=0),Qc(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every(t=>typeof t===e)}function dh(t,e){Array.isArray(t)?(b(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>dh(t,`element ${n+1} of ${e}`))):b(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>t(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}(t)+".")}function fh(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function mh(t,e){return ni(()=>Jt(Ne(Ut(t,t),e,!0)))}class gh extends Ha{getConfig(){return{}}}class yh extends gh{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ni(()=>{const e=mh(t,this.axis),n=Di(e,0,this.maxValue);return Ut(t,jt(n,he(qc(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}yh.className="MaxNorm",ja(yh);class bh extends gh{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ni(()=>jt(t,he(qc(),mh(t,this.axis))))}getConfig(){return{axis:this.axis}}}bh.className="UnitNorm",ja(bh);class xh extends gh{apply(t){return il(t)}}xh.className="NonNeg",ja(xh);class wh extends gh{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ni(()=>{const e=mh(t,this.axis),n=he(Ut(this.rate,Di(e,this.minValue,this.maxValue)),Ut(1-this.rate,e));return Ut(t,jt(n,he(qc(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}wh.className="MinMaxNorm",ja(wh);const vh={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Nh(t){return ih(t)}function Ch(t,e={}){return oh(t,qa.getMap().classNameMap,e,"constraint")}function Sh(t){if(null==t)return null;if("string"==typeof t){return Ch({className:t in vh?vh[t]:t,config:{}})}return t instanceof gh?t:Ch(t)}var kh=Object.freeze({__proto__:null,maxNorm:function(t){return new yh(t)},unitNorm:function(t){return new bh(t)},nonNeg:function(){return new xh},minMaxNorm:function(t){return new wh(t)}});const Ih=["channelsFirst","channelsLast"],Eh=["valid","same","causal"],Ah=["max","avg"],Th=["sum","mul","concat","ave"],$h=new Map;function Rh(t){hh(Ih,"DataFormat",t)}function Dh(t){hh(Eh,"PaddingMode",t)}function _h(t){hh(Ah,"PoolMode",t)}const Fh=[];function Oh(t,e){Fh.push(t);try{const t=e();return Fh.pop(),t}catch(t){throw Fh.pop(),t}}function Mh(t){if(!Bh(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===Fh.length?"":Fh.join("/")+"/")+t}function zh(t){if(!Bh(t))throw new Error("Not a valid tensor name: '"+t+"'");$h.has(t)||$h.set(t,0);const e=$h.get(t);if($h.set(t,$h.get(t)+1),e>0){const n=`${t}_${e}`;return $h.set(n,1),n}return t}const Lh=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Bh(t){return!!t.match(Lh)}function Ph(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function Wh(t){return rl(t=Array.isArray(t)?new Float32Array(t):t)}function Vh(t){return So(Wh(t)).dataSync()[0]}function Uh(t){return mo(Wh(t)).dataSync()[0]}function Gh(t,e){if(e<t)throw new Xc(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Hh(t,e){return t.asType(e)}function qh(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function jh(t,e,n){return ni(()=>{switch(t.rank){case 1:return bl(t,e,n);case 2:return xl(t,[e,0],[n,t.shape[1]]);case 3:return wl(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return vl(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return Cs(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return Cs(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new Xc("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function Kh(t,e,n){return ni(()=>{switch(t.rank){case 1:return bl(t,e,n);case 2:return xl(t,[0,e],[t.shape[0],n]);case 3:return wl(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return vl(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new Xc("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function Xh(t,e,n,r){return ni(()=>{switch(t.rank){case 1:return bl(t,e,n);case 2:switch(r){case 1:return jh(t,e,n);case 2:return Kh(t,e,n);default:throw new Xc("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return jh(t,e,n);case 2:return wl(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return Kh(t,e,n);default:throw new Xc("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return jh(t,e,n);case 2:return vl(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return vl(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return Kh(t,e,n);default:throw new Xc("The axis is not within the rank of the tensor "+r)}default:throw new Xc("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function Yh(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),ps(t,e)}function Jh(t,e){switch(t.rank){case 1:return _i([t,e]);case 2:return Fi([t,e],0);case 3:return Oi([t,e],0);case 4:return Mi([t,e],0);default:throw new Xc("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function Zh(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new Xc(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return _n(t,e)}function Qh(t,e=0,n=1,r,s){return el(t,e,n,r,s)}function tp(t,e,n,r){if(t.rank<2||e.rank<2)throw new Yc(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new Yc(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){return mu({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?rp(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(c).reshape([l,-1]);const h=[...s,...u];return mu({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?rp(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function ep(t,e,n){return ni(()=>(e=Array.isArray(e)?rl(e,"int32"):e.toInt(),Ds(t,e,n)))}function np(t){return Ut(t,t)}function rp(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new Xc("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new Xc("Unsupported input rank by biasAdd: "+e.rank)}function sp(t,e,n){return ni(()=>(null==n&&(n="channelsLast"),Rh(n),t.add(rp(t.rank,e,n))))}function ap(t,e,n,r){return ni(()=>au(t,e,n,r))}function ip(t,e,n=!1){return n?t():e()}const op=["fanIn","fanOut","fanAvg"],lp=["normal","uniform","truncatedNormal"];class up extends Ha{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class cp extends up{apply(t,e){return pr(t,e)}}cp.className="Zeros",ja(cp);class hp extends up{apply(t,e){return xs(t,e)}}hp.className="Ones",ja(hp);class pp extends up{constructor(t){if(super(),"object"!=typeof t)throw new Xc("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new Xc("config must have value set but got "+t);this.value=t.value}apply(t,e){return ni(()=>Ut(Yt(this.value),xs(t,e)))}getConfig(){return{value:this.value}}}pp.className="Constant",ja(pp);class dp extends up{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return nl(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}dp.className="RandomUniform",ja(dp);class fp extends up{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Yc(`randomNormal does not support dType ${e}.`);return Qh(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}fp.className="RandomNormal",ja(fp);class mp extends up{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Yc(`truncatedNormal does not support dType ${e}.`);return _l(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}mp.className="TruncatedNormal",ja(mp);class gp extends up{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return ni(()=>{if(2!==t.length||t[0]!==t[1])throw new Xc("Identity matrix initializer can only be used for 2D square matrices.");return Ut(this.gain,Yi(t[0]))})}getConfig(){return{gain:this.gain}}}gp.className="Identity",ja(gp);class yp extends up{constructor(t){if(super(),t.scale<0)throw new Xc("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,hh(op,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){hh(lp,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(Rh(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=Ph(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=Ph(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=Ph(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Yc(`${this.getClassName()} does not support dType ${e}.`);return _l(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return nl(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}yp.className="VarianceScaling",ja(yp);class bp extends yp{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return yp.className}}bp.className="GlorotUniform",ja(bp);class xp extends yp{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return yp.className}}xp.className="GlorotNormal",ja(xp);class wp extends yp{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return yp.className}}wp.className="HeNormal",ja(wp);class vp extends yp{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return yp.className}}vp.className="HeUniform",ja(vp);class Np extends yp{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return yp.className}}Np.className="LeCunNormal",ja(Np);class Cp extends yp{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return yp.className}}Cp.className="LeCunNormal",ja(Cp);class Sp extends up{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new Yc("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return ni(()=>{if(2!==t.length)throw new Yc("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=Qh(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=sc.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),Ut(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}Sp.className="Orthogonal",ja(Sp);const kp={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Ip(t,e={}){return oh(t,qa.getMap().classNameMap,e,"initializer")}function Ep(t){return ih(t)}function Ap(t){if("string"==typeof t){const e=t in kp?kp[t]:t;if("GlorotNormal"===e)return new xp;if("GlorotUniform"===e)return new bp;if("HeNormal"===e)return new wp;if("HeUniform"===e)return new vp;if("LeCunNormal"===e)return new Np;if("LeCunUniform"===e)return new Cp;{const t={};return t.className=e,t.config={},Ip(t)}}return t instanceof up?t:Ip(t)}var Tp=Object.freeze({__proto__:null,zeros:function(){return new cp},ones:function(){return new hp},constant:function(t){return new pp(t)},randomUniform:function(t){return new dp(t)},randomNormal:function(t){return new fp(t)},truncatedNormal:function(t){return new mp(t)},identity:function(t){return new gp(t)},varianceScaling:function(t){return new yp(t)},glorotUniform:function(t){return new bp(t)},glorotNormal:function(t){return new xp(t)},heNormal:function(t){return new wp(t)},heUniform:function(t){return new vp(t)},leCunNormal:function(t){return new Np(t)},leCunUniform:function(t){return new Cp(t)},orthogonal:function(t){return new Sp(t)}});let $p=0;function Rp(){return $p++}const Dp={};function _p(t=""){return t in Dp||(Dp[t]=0),Dp[t]+=1,t+Dp[t].toString()}function Fp(t){return Array.isArray(t)&&Array.isArray(t[0])}function Op(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function Mp(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new Xc("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function zp(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new Xc("Expected exactly 1 Shape; got "+t.length)}return t}function Lp(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}class Bp{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Rp(),n=null==n?"Variable":n,this.originalName=Mh(n),this.name=zh(this.originalName),this.trainable_=r,this.constraint=s,this.val=Ol(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function Pp(t){return t.map(t=>t.read())}function Wp(t){t.forEach(t=>{t[0].write(t[1])})}class Vp{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Up{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=Rp(),null!=a&&(this.originalName=Mh(a),this.name=zh(this.originalName)),this.rank=e.length}}let Gp=0;class Hp{constructor(t,e){this.callArgs=e,this.id=Gp++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let qp=0;class jp extends Ha{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=qp++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=rh(t)+"_"+_p(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new Kc(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new Xc(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return eh(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return eh(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new jc("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new jc("Layer "+this.name+" is not connected, no input to return.");return eh(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new jc("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new jc("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return eh(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=nh(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=nh(this.inputSpec);if(t.length!==e.length)throw new Xc(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new Xc(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new Xc(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new Xc(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Xc(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new Xc(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new Xc(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=nh(t);let r=!0;for(const t of n)if(!(t instanceof Up)){r=!1;break}let s=!0;for(const t of n)if(t instanceof Up){s=!1;break}if(r===s)throw new Xc("Arguments to apply() must be all SymbolicTensors or all Tensors");return Oh(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of nh(t))e.push(n.shape);this.build(eh(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=nh(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=eh(a),null!=this.activityRegularizer)throw new Yc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=nh(t);const e=[];for(const n of t)e.push(n.shape);return eh(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new Up(a,n,this,nh(t),e,this.name,r)):new Up(a,r,this,nh(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new Yc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new jc(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new jc(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Kc(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Lp(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Pp(t?this.trainableWeights:this.weights)}setWeights(t){ni(()=>{const e=this.weights;if(e.length!==t.length)throw new Xc(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=Pp(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!C(a.shape,o.shape))throw new Xc(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}Wp(n)})}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new Xc(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=Ap("zeros"));const o=r.apply(e,n),l=new Bp(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=nh(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=nh(t);e=nh(e),n=nh(n),r=nh(r),s=Op(s),a=Op(a);const l=[],u=[],c=[];for(const t of o)l.push(t.sourceLayer),u.push(t.nodeIndex),c.push(t.tensorIndex);new Hp({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}class Kp extends jp{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:_p("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new Xc("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new Xc("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new Xc("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new Up(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Hp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new Xc("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Xp(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new Xc("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new Kp({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}async function Yp(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];ri(r)}}function Jp(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var Zp;Kp.className="InputLayer",ja(Kp),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(Zp||(Zp={}));class Qp{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class td{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class ed extends Qp{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=ni(()=>he(this.totals[t],Ut(r,n)));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:ni(()=>{const n=Ut(jt(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),si(e[t])}))}}class nd extends Qp{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class rd extends Qp{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");V(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=Z();return(...s)=>{const a=Z();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await Yp(n),r.push(this.yield(t,e,n))),r.push(bc()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Yp(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Yp(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(bc()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Yp(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Yp(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(bc()):V(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Yp(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Yp(t),await this.trainEnd(t))}}function sd(t,e){if(null==t&&(t={}),t instanceof Qp)return[t];if(Array.isArray(t)&&t[0]instanceof Qp)return t;return nh(t).map(t=>new rd(t,e))}class ad{constructor(){}static registerCallbackConstructor(t,e){b(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),ad.checkForDuplicate(e),null==ad.constructors[t]&&(ad.constructors[t]=[]),ad.constructors[t].push(e)}static checkForDuplicate(t){for(const e in ad.constructors){ad.constructors[+e].forEach(e=>{if(e===t)throw new Xc("Duplicate callback constructor.")})}}static clear(){ad.constructors={}}static createCallbacks(t){const e=[];for(const n in ad.constructors){const r=+n;t>=r&&e.push(...ad.constructors[r])}return e.map(t=>new t)}}function id(t,e,n,r,s,a,i,o,l){const u=new nd,c=[new ed,...ad.createCallbacks(e)];null!=t&&c.push(...t),c.push(u);const h=new td(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:l}),{callbackList:h,history:u}}function od(t,e={},n=!1){return oh(t,qa.getMap().classNameMap,e,"layer",n)}function ld(t,e){return ni(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=Ne(np(t),e,!0),r=Zi(n.shape,qc()),s=Jt(_s(n,r));return jt(t,s)})}function ud(t,e){return ni(()=>Co(np(Qt(e,t)),-1))}function cd(t,e){return ni(()=>Co(oi(Qt(e,t)),-1))}function hd(t,e){return ni(()=>{const n=Qt(t,e),r=Di(oi(t),qc(),Number.MAX_VALUE),s=oi(jt(n,r));return Ut(100,Co(s,-1))})}function pd(t,e,n=!1){return ni(()=>{if(n)e=Nl(e);else{const t=Ne(e,e.shape.length-1,!0);e=jt(e,t)}return e=Di(e,qc(),1-qc()),Kt(Ne(Ut(t.toFloat(),gr(e)),e.shape.length-1))})}function dd(t,e,n=!1){return ni(()=>{const r=or(function(t){const e=[Ph(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=Di(e,qc(),1-qc())).shape;return pd(Da(r,s[s.length-1]).reshape(s),e,n)})}function fd(t,e){return ni(()=>{let n;return n=Di(e,qc(),1-qc()),n=gr(jt(n,Qt(1,n))),Co(function(t,e){if(!C(t.shape,e.shape))throw new Xc(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return ni(()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())})}(t,n),-1)})}function md(t,e){return ni(()=>{const n=ld(t,-1),r=ld(e,-1),s=Ut(n,r);return Kt(Ne(s,-1))})}ad.constructors={};const gd={meanSquaredError:ud,meanAbsoluteError:cd,meanAbsolutePercentageError:hd,meanSquaredLogarithmicError:function(t,e){return ni(()=>{const n=Di(e,qc(),Number.MAX_VALUE),r=gr(he(1,n)),s=Di(t,qc(),Number.MAX_VALUE),a=gr(he(1,s));return Co(np(Qt(r,a)),-1)})},squaredHinge:function(t,e){return ni(()=>{const n=_s(0,Qt(1,Ut(t,e)));return Co(np(n),-1)})},hinge:function(t,e){return ni(()=>{const n=_s(0,Qt(1,Ut(t,e)));return Co(n,-1)})},categoricalHinge:function(t,e){return ni(()=>{const n=Ne(Ut(t,e),-1),r=mo(Ut(Qt(1,t),e),-1);return _s(0,he(1,Qt(r,n)))})},logcosh:function(t,e){return ni(()=>{const n=Math.log(2),r=Qt(e,t),s=Qt(he(r,Cl(Ut(-2,r))),n);return Co(s,-1)})},categoricalCrossentropy:pd,sparseCategoricalCrossentropy:dd,binaryCrossentropy:fd,kullbackLeiblerDivergence:function(t,e){return ni(()=>{const n=Di(t,qc(),1),r=Di(e,qc(),1);return Ne(Ut(t,gr(jt(n,r))),-1)})},poisson:function(t,e){return ni(()=>{const n=gr(he(qc(),e));return Co(Qt(e,Ut(t,n)),-1)})},cosineProximity:md};function yd(t){if("string"==typeof t){if(t in gd)return gd[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Xc(e)}return t}function bd(t,e){return ni(()=>{const n=Ut(.5,Ro(e)),r=Hh(ar(e,n),t.dtype);return Co(Xn(t,r),-1)})}function xd(t,e){return ni(()=>Hh(Xn(di(t,-1),di(e,-1)),"float32"))}function wd(t,e){return ni(()=>Ze(t.equal(1),e.equal(1)).sum().cast("float32"))}function vd(t,e){return ni(()=>{const n=wd(t,e),r=function(t,e){return ni(()=>Ze(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),s=n.add(r);return Qe(ar(s,0),n.div(s),0).cast("float32")})}function Nd(t,e){return ni(()=>{const n=wd(t,e),r=function(t,e){return ni(()=>Ze(t.equal(1),e.equal(0)).sum().cast("float32"))}(t,e),s=n.add(r);return Qe(ar(s,0),n.div(s),0).cast("float32")})}function Cd(t,e){return fd(t,e)}function Sd(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Xn(t,e).asType("float32")}const kd=pd,Id=dd,Ed={binaryAccuracy:bd,categoricalAccuracy:xd,precision:vd,categoricalCrossentropy:kd,sparseCategoricalCrossentropy:Id,mse:ud,MSE:ud,mae:cd,MAE:cd,mape:hd,MAPE:hd,cosine:md};function Ad(t){if("string"==typeof t&&t in Ed)return Ed[t];if("string"!=typeof t&&null!=t)return t;throw new Xc("Unknown metric "+t)}function Td(t){if(Qc(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(gd))if(gd[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Ed))if(Ed[n]===t){e=n;break}return void 0!==e?e:t.name}}function $d(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const n=Object.keys(e);for(const r of n){if("string"!=typeof r)return!1;if(!t(e[r]))return!1}return!0}if(Array.isArray(e)){for(const n of e)if(!t(n))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Rd(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),Dd(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?_d(o[t],n,r):Fd(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const l=function(t){let e;e=null!=t.collectedTrainableWeights?Lp(t.collectedTrainableWeights):Lp(t.trainableWeights);return e}(t),u=Lp(t.nonTrainableWeights);r("Total params: "+(l+u)),r("Trainable params: "+l),r("Non-trainable params: "+u),r("_".repeat(e))}function Dd(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function _d(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}Dd([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function Fd(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),l=0===a.length?"":a[0];Dd([`${i} (${o})`,s,t.countParams().toString(),l],e,r);for(let t=1;t<a.length;++t)Dd(["","","",a[t]],e,r)}function Od(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function Md(t,e){if(null===t)return null;if("string"==typeof t)return sh(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];Od(e,s,r)?n.push(r):n.push(Md(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=sh(n);e[t]=Md(r,t)}}return e}}class zd{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof zd)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new Xc(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Vt(e,t.dtype)}catch(n){throw new Xc(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Up){if(null==this.id2Value[t.id])throw new Xc("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new Xc("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof Up){if(null==this.id2Value[t.id])throw new Xc("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new Xc("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&ri(this.id2Mask)}}const Ld={},Bd={};function Pd(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map(t=>t.name),l=[],u=e.names();for(const t of o)-1!==u.indexOf(t)?l.push(e.getValue(t)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,p;if(null==Ld[c]){const t=function(t,e){b(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===t.length){const s=Vd(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=Vd(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach(e=>r[t].add(e))}}return{sorted:n,recipientCounts:Wd(r)}}(i,e);h=t.sorted,p=t.recipientCounts,Ld[c]=h,Bd[c]=p}h=Ld[c],p={},s||Object.assign(p,Bd[c]);const d=new zd(e);for(let t=0;t<h.length;++t){if(null!=r){const t=ei().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof Kp)continue;const u=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=d.getValue(t),r=d.getMask(t);u.push(n),c.push(r),null!=r&&(m=!0),s||(p[t.name]--,0!==p[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=nh(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=Ud(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){d.hasKey(x[t])||d.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}s||ri(f)}return d.disposeMasks(),a?l:l[0]}function Wd(t){const e={};for(const n in t)e[n]=t[n].size;return e}function Vd(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function Ud(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class Gd extends jp{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=_p(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],uh(this.inputs).length!==this.inputs.length)throw new Xc("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));uh(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;Qc(0===n,"input layer has >1 nodes"),Qc(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof Kp))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=t.sourceLayer,s=t.nodeIndex,l=t.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new Kc(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(Gd.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let t=0;t<c;t++){const r=u.inputTensors[t],s=u.inboundLayers[t],a=u.nodeIndices[t],i=u.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const t of this.outputs)o(t,l,u);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const p={};for(const t in r){const e=r[t];e in p||(p[e]=[]),p[e].push(s[t])}let d=Object.keys(p).map(t=>parseInt(t,10)).sort(lh);this.layers=[];for(const t of d){const e=p[t];e.sort((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof Gd&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map(t=>parseInt(t,10)).sort(lh);const f=this.inputs.slice(),m=[];for(const t of d)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Kc("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const t of g){const e=g.filter(e=>e===t).length;if(1!==e)throw new Kc(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Hp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new Xc("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new Xc("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const r in t){let a=r;if(null==n[r]){const t=r.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])s.push([n[a],t[r]]);else if(e)throw new Xc("Provided weight data has no target variable: "+r);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new Xc(`${t.length} of ${r} weights are not set: `+t)}Wp(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.1.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=function t(e,n){if(null==e)return null;if("string"==typeof e)return rh(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const r=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];Od(n,a,s)?r.push(s):r.push(t(s,n))}return r}{const n={};for(const r of Object.keys(e)){const s=e[r],a=rh(r);n[a]="name"!==r&&"className"!==r||"string"!=typeof s?t(s,r):s}return n}}(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return ni(()=>{t=nh(t);const n=new zd;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return Pd(this.outputs,n,e)})}computeMask(t,e){return ni(()=>{let n;return t=nh(t),n=null==e?Zc(null,t.length):nh(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=Op(t);if(e.length!==this.inputLayers.length)throw new Xc(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(lh);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=Op(e.computeOutputShape(eh(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${a}_${t}`]=s[t]}}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];Qc(e in n),s.push(n[e])}return eh(s)}runInternalGraph(t,e){null==e&&(e=Zc(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(lh);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=nh(e.call(t,u)),l=nh(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(t=>t[0]),i=a.map(t=>t[1]),null==u.mask&&(u.mask=i),o=nh(e.call(r,u)),l=nh(e.computeMask(r,i));if(e.activityRegularizer)throw new Yc("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=l[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){Qc(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof Gd?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=Gd.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new Xc(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new Xc("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new Xc("No such layer: "+t)}calculateLosses(){return ni(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=Gd.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=Gd.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+r.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let l=e[Gd.nodeKey(s,a)];null==l&&(l=0),t.push([s.name,l,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=Gd.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=Gd.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=l)return void i(t,e);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&t.apply(eh(n),r)}function l(t){const n=t.name,a=od(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new Xc("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const u=e.name,c=e.layers;for(const t of c)l(t);for(;!ch(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],p=[],d=e.inputLayers;for(const t of d){const e=t[0],n=t[1],r=t[2];Qc(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];Qc(e in s);const a=s[e].inboundNodes[n].outputTensors;p.push(a[r])}return new t({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Xc("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){ni(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function Hd(t,e){return function(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}(t,e,"classWeight")}async function qd(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=ni(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await e.data());ri(e);const s=[];return r.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])}),rl(s,"float32")}return null}function jd(t,e){return Ut(t,e)}function Kd(t,e){let n,r;const s=e;n=s.xs,r=s.ys,b(null!=n&&null!=r,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=Xd("input",t.inputNames,n),i=Xd("output",t.outputNames,r),o=a[0].shape[0];b(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),b(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let e=0;e<a.length;e++)b(a[e].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let e=0;e<i.length;e++)b(i[e].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function Xd(t,e,n){if(n instanceof mt)return[n];if(Array.isArray(n))return b(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const r=[];for(const s of e){if(null==n[s])throw new Xc(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function Yd(t,e,n){const r=null!=n.batchesPerEpoch;if(b(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),b(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),b(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),b(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),b(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(Jd(n.validationData))b(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new Yc("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map(t=>"val_"+t)):l.slice();const c=sd(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=id(c,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,u);p.setModel(t),t.history=d,await p.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(r||(m=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=Kd(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=Hd(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await qd(s[t],null,e[t]))}const u=r.concat(s).concat(i),d=o(u);ri(u);for(let t=0;t<l.length;++t){const e=l[t],n=d[t];a[e]=n,si(n)}await p.onBatchEnd(h,a),Jp(a),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=Jd(n.validationData)?nh(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):nh(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)u["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,t.stopTraining_)break}return await p.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function Jd(t){return"function"==typeof t.iterator}function Zd(t){b(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function Qd(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>jh(t,e,n-e)):jh(t,e,n-e)}function tf(t,e){return ni(()=>null==t?null:Array.isArray(t)?t.map(t=>tf(t,e)):ep(t,"int32"===e.dtype?e:e.toInt()))}function ef(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function nf(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,l,u,c;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;Zd(h);const p=!1,d=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,p,h);s=d[0],a=d[1],c=d[2];let m,g=!1;if(null!=r.validationData&&r.validationData.length>0){if(g=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Yc("validationData including sample weights is not supported yet."):new Xc("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");i=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);l=n[0],u=n[1],m=l.concat(u)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){g=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];l=Qd(s,t,e),s=Qd(s,0,t),u=Qd(a,t,e),a=Qd(a,0,t),m=l.concat(u)}else null!=r.validationSteps&&(g=!0);const y=s.concat(a).concat(c);t.checkTrainableWeightsConsistency();const b=t.makeTrainFunction(),x=t.getDedupedMetricsNames();let w,v;g?(t.makeTestFunction(),w=t.testFunction,v=x.slice().concat(x.map(t=>"val_"+t))):(w=null,m=[],v=x.slice());const N=sd(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,i,o,l,u,c,h,p,d,m){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let g=!1;if(null!=l&&null!=u&&(g=!0),null!=m&&(g=!0,null==d))throw new Xc("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=t.checkNumSamples(n,s,d,"steps_per_epoch");let b;null!=y&&(b=Gh(0,y)),null==i&&(i=1);const{callbackList:x,history:w}=id(o,i,a,p,y,d,s,g,h);x.setModel(t),t.history=w,await x.onTrainBegin(),t.stopTraining_=!1;for(let i=p;i<a;++i){await x.onEpochBegin(i);const a={};if(null!=d)throw new Yc("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new Yc("batch shuffling is not implemneted yet");c&&f(b);const i=rl(b),o=ef(y,s);for(let c=0;c<o.length;++c){const h={};if(await x.onBatchBegin(c,h),ni(()=>{const p=o[c][0],d=o[c][1],f=jh(i,p,d-p);h.batch=c,h.size=d-p;const m=tf(n,f),y=e(m);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,si(n)}if(c===o.length-1&&g){const e=t.testLoop(l,u,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];si(s),a["val_"+n]=s}}}),await x.onBatchEnd(c,h),Jp(h),t.stopTraining_)break}i.dispose()}if(await x.onEpochEnd(i,a),t.stopTraining_)break}return await x.onTrainEnd(),await t.history.syncData(),t.history}(t,b,y,x,h,r.epochs,r.verbose,N,w,m,r.shuffle,v,r.initialEpoch,null,null)}finally{t.isTraining=!1,sf(s,e),sf(a,n),sf(l,i),sf(u,o),null!=c&&ri(c)}}function rf(t){const e=[];t instanceof mt&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(qh(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function sf(t,e){if(null==t)return;const n=[];if(e instanceof mt)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof mt)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&r.push(t)});else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach(t=>{t.isDisposed||t.dispose()})}function af(t){return Array.isArray(t)}function of(t){return!function(t){return t instanceof mt}(t)&&!af(t)}function lf(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(af(t)&&t.length>0)e=!0;else if(of(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new Xc(`Error when checking model ${s} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(of(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new Xc(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(af(t)){if((t=t).length!==e.length)throw new Xc(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new Xc(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=rf(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new Xc(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l>=0&&o!==l)throw new Xc(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function uf(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new Xc(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new Xc(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new Xc(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l!==o)throw new Xc(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class cf extends Gd{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new Xc("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Rd(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>gc.adagrad(.01),Adadelta:()=>gc.adadelta(1,.95,qc()),Adam:()=>gc.adam(.001,.9,.999,qc()),Adamax:()=>gc.adamax(.002,.9,.999,qc(),0),RMSProp:()=>gc.rmsprop(.001,.9,0,qc()),SGD:()=>gc.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new Xc("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof oc))throw new Xc("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new Xc(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map(t=>yd(t))}else{const n=yd(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new Xc(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(yd(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Oh("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};Oh("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===fd?-1!==["accuracy","acc"].indexOf(i)?r=bd:-1!==["crossentropy","ce"].indexOf(i)&&(r=Cd):this.lossFunctions[t]===dd?-1!==["accuracy","acc"].indexOf(i)?r=Sd:-1!==["crossentropy","ce"].indexOf(i)&&(r=Id):-1!==["accuracy","acc"].indexOf(i)?r=xd:-1!==["crossentropy","ce"].indexOf(i)&&(r=kd),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=Ad(i);a=t,n=""+Td(i)}let e;Oh(n,()=>{e=a}),s(t,n,e)}})(r[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;Zd(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return eh(this.testLoop(i,a,r,n.verbose,n.steps))}finally{sf(s[0],t),sf(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new Yc("Verbose mode is not implemented yet.");b(!r||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const i="function"==typeof e.next?e:await e.iterator();let o=0,l=0;for(;!r||l<n.batches;){const e=await i.next();if(a=ni(()=>{if(e.value){const{xs:n,ys:r}=Kd(t,e.value),i=n.concat(r),u=ni(()=>s(i));if(ri(i),0===l)for(let t=0;t<u.length;++t)a.push(Yt(0));const c=i[0].shape[0];for(let t=0;t<u.length;++t){const e=u[t],n=a[t];a[t]=ni(()=>he(a[t],Ut(c,e))),l>0&&ri(n)}ri(u),o+=c,++l}return a}),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=jt(a[t],o),ri(e)}return eh(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new Xc(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new Xc("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new Xc("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new zd;if(t instanceof mt&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new Xc(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new Xc("No value is provided for the model's input "+e.name);a.add(e,n)}const i=Pd(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=Zc(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(t=>t.name);for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,r)=>{null==e&&n.push(t[r])}),new Xc("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return ni(()=>{const r=this.checkNumSamples(t);if(n)throw new Yc("Verbose predictLoop() is not implemented yet.");const s=ef(r,e),a=this.outputs.map(t=>[]);for(let e=0;e<s.length;++e){ni(()=>{const n=s[e][0],r=s[e][1],a=Qd(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new zd(i);return Pd(this.outputs,o)}).forEach((t,e)=>a[e].push(t))}return eh(a.map(t=>ps(t,0)))})}predict(t,e={}){const n=rf(t);uf(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return Zd(r),this.predictLoop(n,r)}finally{sf(n,t)}}predictOnBatch(t){uf(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new Kc("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===dd?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=uh(t.map(t=>t.shape[0]));r.sort();const s=uh(e.map(t=>t.shape[0]));if(s.sort(),r.length>1)throw new Xc("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(s.length>1)throw new Xc("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(r.length>0&&s.length>0&&!C(r,s))throw new Xc(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=lf(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=lf(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[ud,fd,pd];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===pd&&1===a.shape[a.shape.length-1])throw new Xc(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new Xc(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new Xc(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const t=Hd(r,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await qd(o[e],null,t[e]))}return[i,o,l]}testLoop(t,e,n,r=0,s){return ni(()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new Yc("Verbose mode is not implemented yet.");if(null!=s)throw new Yc("steps mode in testLoop() is not implemented yet");{const r=ef(a,n),s=rl(Gh(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],l=jh(s,a,o-a),u=tf(e,l),c=t(u);if(0===n)for(let t=0;t<c.length;++t)i.push(Yt(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=he(i[t],Ut(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=jt(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(th(t,r)>1){s+="_"+th(t.slice(0,n),r)}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new zd(t),o=Pd(this.outputs,i,{training:!0});let l;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=jd(n,s[t]));const a=Co(n);e.push(a),l=0===t?n:he(l,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=Co(e(r[s],o[s]))}si(n),a.push(n)}return l=Co(l),this.calculateLosses().forEach(t=>{l=he(l,t)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>ni(()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new zd(a),o=Pd(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=Co(r(s[t],o[t]));n=0===t?a:he(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=Co(n(s[r],o[r]));e.push(a)}return e})}async fit(t,e,n={}){return nf(this,t,e,n)}async fitDataset(t,e){return Yd(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return ri(a),eh(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=ei().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-ei().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=rh(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>rh(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=rh(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[rh(Td(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>rh(Td(t)));{const t={};for(const e in this.metrics)t[e]=rh(Td(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=od(Md(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=sh(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>sh(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=sh(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map(t=>sh(t));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=sh(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=Ys(t);if(0===e.length)throw new Xc(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Xc(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Xc("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Ps(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.1.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await Ps(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=Hs([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;$d(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){$d(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}async function hf(t,e){if(null==e&&(e={}),"string"==typeof t){const n=Js(t,e);if(0===n.length)n.push(Aa(t,e));else if(n.length>1)throw new Xc(`Found more than one (${n.length}) load handlers for URL '${t}'`);t=n[0]}return async function(t,e,n){null==n&&(n={});if(null==t.load)throw new Xc("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const r=await t.load();let s=r.modelTopology;null!=s.model_config&&(s=s.model_config);const a=null==n.strict||n.strict,i=null!=r.weightData&&null!=r.weightSpecs&&a,o=od(Md(s),e,i),l=r.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata);if(null!=r.weightData){if(null==r.weightSpecs)throw new Xc("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=Ws(t,e),r={},s=[];return e.forEach(t=>{"optimizer"===t.group?s.push({name:t.name,tensor:n[t.name]}):r[t.name]=n[t.name]}),{modelWeights:r,optimizerWeights:s}}(r.weightData,r.weightSpecs);o.loadWeights(t,a),null!=o.optimizer&&e.length>0&&await o.optimizer.setWeights(e),ri(t),ri(e.map(t=>t.tensor))}return o}(t,void 0,e)}cf.className="Model",ja(cf);class pf extends cf{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:_p("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new Xc("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof pf||t instanceof cf;let n;if(e){if(n=t,1!==n.outputs.length)throw new Xc("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Xc("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new Xc("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=Xp({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new Xc(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new Xc("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];{const e=n.inboundNodes[r];if(0===e.inboundLayers.length)return e.inputTensors;{const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=t(e.inputTensors[r],e.inboundLayers[r],e.nodeIndices[r]);for(const t of s)-1===n.indexOf(t)&&n.push(t)}return n}}}(this.outputs[0])}this.inboundNodes=[],new Hp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Zc(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(zp(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new cf({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new Kc("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new Kc("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new Kc("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new Kc("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new Xc("Legacy serialization format not supported yet.");s=e}else b(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof pf))throw new Yc("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of s){const e=od(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new Xc("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new Xc("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}function df(t){return Xp(t)}pf.className="Sequential",ja(pf);class ff extends Ha{getConfig(){return{}}}class mf extends ff{apply(t,e=1){return function(t,e=1){if(1!==e)throw new Yc(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return ji(t)}(t,e)}}mf.className="elu",ja(mf);class gf extends ff{apply(t){return fl(t)}}gf.className="selu",ja(gf);class yf extends ff{apply(t){return il(t)}}yf.className="relu",ja(yf);class bf extends ff{apply(t){return ni(()=>ko(6,il(t)))}}bf.className="relu6",ja(bf);class xf extends ff{apply(t){return t}}xf.className="linear",ja(xf);class wf extends ff{apply(t){return as(t)}}wf.className="sigmoid",ja(wf);class vf extends ff{apply(t){return function(t){return ni(()=>{const e=he(.5,Ut(.2,t));return Di(e,0,1)})}(t)}}vf.className="hardSigmoid",ja(vf);class Nf extends ff{apply(t){return Cl(t)}}Nf.className="softplus",ja(Nf);class Cf extends ff{apply(t){return function(t){return ni(()=>jt(t,oi(t).add(1)))}(t)}}Cf.className="softsign",ja(Cf);class Sf extends ff{apply(t){return Ni(t)}}Sf.className="tanh",ja(Sf);class kf extends ff{apply(t,e=-1){return Nl(t,e)}}kf.className="softmax",ja(kf);class If extends ff{apply(t,e=-1){return go(t,e)}}function Ef(t){return t.getClassName()}function Af(t,e={}){return oh(t,qa.getMap().classNameMap,e,"activation")}function Tf(t){if(null==t){const t={className:"linear",config:{}};return Af(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},Af(e)}return t instanceof ff?t:Af(t)}function $f(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}If.className="logSoftmax",ja(If);class Rf extends Ha{}class Df extends Rf{constructor(t){super(),$f(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return ni(()=>{let e=pr([1]);return this.hasL1&&(e=he(e,Ne(Ut(this.l1,oi(t))))),this.hasL2&&(e=he(e,Ne(Ut(this.l2,np(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}Df.className="L1L2",ja(Df);const _f={l1l2:"L1L2"};function Ff(t){return ih(t)}function Of(t,e={}){return oh(t,qa.getMap().classNameMap,e,"regularizer")}function Mf(t){if(null==t)return null;if("string"==typeof t){return Of({className:t in _f?_f[t]:t,config:{}})}return t instanceof Rf?t:Of(t)}class zf extends jp{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=Mp(t);let n=il(t);return null!=this.maxValue&&(n=Di(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}zf.className="ReLU",ja(zf);class Lf extends jp{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Mp(t);return io(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Lf.className="LeakyReLU",ja(Lf);class Bf extends jp{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Ap(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Mf(t.alphaRegularizer),this.alphaConstraint=Sh(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new Xc("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=zp(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new Vp({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=Mp(t),Lo(t,this.alpha.read())}getConfig(){const t={alphaInitializer:Ep(this.alphaInitializer),alphaRegularizer:Ff(this.alphaRegularizer),alphaConstraint:Nh(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Bf.className="PReLU",ja(Bf);class Pf extends jp{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new Yc(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Mp(t);return ji(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Pf.className="ELU",ja(Pf);class Wf extends jp{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=Mp(t);return n.mul(Hh(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}Wf.className="ThresholdedReLU",ja(Wf);class Vf extends jp{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new kf).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=Mp(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Uf(t,e,n){if("number"==typeof t)return Zc(t,e);if(t.length!==e)throw new Xc(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new Xc(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var r}function Gf(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function Hf(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+Uh([n-e,0]);else{if("same"!==r)throw new Xc(`Unsupport padding mode: ${r}.`);t*=e}return t}function qf(t,e){return ni(()=>(Rh(e),"channelsFirst"===e?yn(t,[0,2,3,1]):t))}function jf(t,e){return ni(()=>(Rh(e),"channelsFirst"===e?yn(t,[0,2,3,4,1]):t))}function Kf(t,e,n,r=[1,1],s="valid",a,i,o=null){return ni(()=>{if(null==a&&(a="channelsLast"),Rh(a),3!==t.rank&&4!==t.rank)throw new Xc(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new Xc(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let l=qf(t,a);if("causal"===s)throw new Yc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=du({x:l,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=yn(l,[0,3,1,2])),l})}Vf.className="Softmax",ja(Vf);class Xf extends jp{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Xf.verifyArgs(e),this.rank=t,dh(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Yc(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Uf(e.kernelSize,t,"kernelSize"),this.strides=Uf(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Dh(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rh(this.dataFormat),this.activation=Tf(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Ap(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Sh(e.biasConstraint),this.biasRegularizer=Mf(e.biasRegularizer),this.activityRegularizer=Mf(e.activityRegularizer),this.dilationRate=Uf(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Xc("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Xc("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Xc("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(Qc("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!ph(t.kernelSize,"number",1,3))throw new Xc(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Ef(this.activation),useBias:this.useBias,biasInitializer:Ep(this.biasInitializer),biasRegularizer:Ff(this.biasRegularizer),activityRegularizer:Ff(this.activityRegularizer),biasConstraint:Nh(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Yf extends Xf{constructor(t,e){super(t,e),this.kernel=null,Yf.verifyArgs(e),this.filters=e.filters,dh(this.filters,"filters"),this.kernelInitializer=Ap(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Sh(e.kernelConstraint),this.kernelRegularizer=Mf(e.kernelRegularizer)}build(t){t=zp(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Xc("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return ni(()=>{let e;t=Mp(t);const n=null==this.bias?null:this.bias.read(),r=fh(this.activation.getClassName());if(null!=r&&2===this.rank)e=Kf(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=function(t,e,n,r=1,s="valid",a,i=1){return ni(()=>{if(null==a&&(a="channelsLast"),Rh(a),3!==t.shape.length)throw new Xc("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new Xc("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new Xc("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=yn(t,[0,2,1])),"causal"===s)throw new Yc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=zi(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=sp(o,n)),o})}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=Kf(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Yc("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,r=[1,1,1],s="valid",a,i){return ni(()=>{if(null==a&&(a="channelsLast"),Rh(a),4!==t.rank&&5!==t.rank)throw new Xc("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new Xc("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=jf(t,a);if("causal"===s)throw new Yc("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Bi(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=sp(o,n)),"channelsFirst"===a&&(o=yn(o,[0,4,1,2,3])),o})}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=zp(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=Gf(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:Ep(this.kernelInitializer),kernelRegularizer:Ff(this.kernelRegularizer),kernelConstraint:Nh(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new Xc("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class Jf extends Yf{constructor(t){super(2,t),Jf.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!ph(t.kernelSize,"number",1,2))throw new Xc(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}Jf.className="Conv2D",ja(Jf);class Zf extends Yf{constructor(t){super(3,t),Zf.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new Xc(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}Zf.className="Conv3D",ja(Zf);class Qf extends Jf{constructor(t){if(super(t),this.inputSpec=[new Vp({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Xc("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=zp(t)).length)throw new Xc("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Xc("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Vp({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return ni(()=>{let e=Mp(t);if(4!==e.shape.length)throw new Xc("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,Hf(i,c,l,this.padding),Hf(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=yn(e,[0,2,3,1]));let d=Li(e,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=yn(d,[0,3,1,2])),null!=this.bias&&(d=sp(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d})}computeOutputShape(t){const e=(t=zp(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[n]=this.filters,e[r]=Hf(e[r],o,a,this.padding),e[s]=Hf(e[s],l,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}Qf.className="Conv2DTranspose",ja(Qf);class tm extends Yf{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new Xc("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new Xc("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new Xc(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Ap(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Mf(e.depthwiseRegularizer),this.depthwiseConstraint=Sh(e.depthwiseConstraint),this.pointwiseInitializer=Ap(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Mf(e.pointwiseRegularizer),this.pointwiseConstraint=Sh(e.pointwiseConstraint)}build(t){if((t=zp(t)).length<this.rank+2)throw new Xc(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new Xc("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new Vp({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return ni(()=>{let e;if(t=Mp(t),1===this.rank)throw new Yc("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=yn(t,[0,2,3,1])),e=ml(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=sp(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=yn(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=Ep(this.depthwiseInitializer),t.pointwiseInitializer=Ep(this.pointwiseInitializer),t.depthwiseRegularizer=Ff(this.depthwiseRegularizer),t.pointwiseRegularizer=Ff(this.pointwiseRegularizer),t.depthwiseConstraint=Nh(this.depthwiseConstraint),t.pointwiseConstraint=Nh(this.pointwiseConstraint),t}}tm.className="SeparableConv";class em extends tm{constructor(t){super(2,t)}}em.className="SeparableConv2D",ja(em);class nm extends Yf{constructor(t){super(1,t),nm.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!ph(t.kernelSize,"number",1,1))throw new Xc(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}nm.className="Conv1D",ja(nm);class rm extends jp{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return ni(()=>{if(t=Mp(t),"channelsLast"===this.dataFormat){const e=Xh(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Xh(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Xh(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Xh(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}rm.className="Cropping2D",ja(rm);class sm extends jp{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return ni(()=>{let e=Mp(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=yn(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return yn(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}sm.className="UpSampling2D",ja(sm);class am extends Xf{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Ap(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Sh(t.depthwiseConstraint),this.depthwiseRegularizer=Mf(t.depthwiseRegularizer)}build(t){if((t=zp(t)).length<4)throw new Xc(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new Xc(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ni(()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return ni(()=>{null==s&&(s="channelsLast"),Rh(s);let i=qf(t,s);if(4!==t.rank)throw new Xc("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new Xc("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=Vi(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=yn(i,[0,3,1,2])),i})}(t=Mp(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=sp(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=zp(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Gf(e,this.kernelSize[0],this.padding,this.strides[0]),a=Gf(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=Ep(this.depthwiseInitializer),t.depthwiseRegularizer=Ff(this.depthwiseRegularizer),t.depthwiseConstraint=Nh(this.depthwiseRegularizer),t}}am.className="DepthwiseConv2D",ja(am);class im extends jp{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return ni(()=>{this.invokeCallHook(t,e);const n=Mp(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return ip(()=>ap(n,this.rate,r,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}im.className="Dropout",ja(im);class om extends im{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}om.className="SpatialDropout1D",ja(om);class lm extends jp{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,dh(this.units,"units"),this.activation=Tf(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Ap(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Ap(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Sh(t.kernelConstraint),this.biasConstraint=Sh(t.biasConstraint),this.kernelRegularizer=Mf(t.kernelRegularizer),this.biasRegularizer=Mf(t.biasRegularizer),this.activityRegularizer=Mf(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=zp(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=zp(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return ni(()=>{this.invokeCallHook(t,e);const n=Mp(t),r=fh(this.activation.getClassName());let s;return null!=r?s=tp(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=tp(n,this.kernel.read()),null!=this.bias&&(s=sp(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const t={units:this.units,activation:Ef(this.activation),useBias:this.useBias,kernelInitializer:Ep(this.kernelInitializer),biasInitializer:Ep(this.biasInitializer),kernelRegularizer:Ff(this.kernelRegularizer),biasRegularizer:Ff(this.biasRegularizer),activityRegularizer:Ff(this.activityRegularizer),kernelConstraint:Nh(this.kernelConstraint),biasConstraint:Nh(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}lm.className="Dense",ja(lm);class um extends jp{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=zp(t);for(const e of t.slice(1))if(null==e)throw new Xc(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],Ph(t,1)]}call(t,e){return ni(()=>{this.invokeCallHook(t,e);let n=Mp(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new Xc(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],Ph(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}um.className="Flatten",ja(um);class cm extends jp{constructor(t){super(t),this.supportsMasking=!0,this.activation=Tf(t.activation)}call(t,e){return ni(()=>{this.invokeCallHook(t,e);const n=Mp(t);return this.activation.apply(n)})}getConfig(){const t={activation:Ef(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}cm.className="Activation",ja(cm);class hm extends jp{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return ni(()=>{return t=Mp(t),e=t,n=this.n,ni(()=>{if(2!==e.shape.length)throw new Xc(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return Zh(qh(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}hm.className="RepeatVector",ja(hm);class pm extends jp{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new Xc("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=Ph(t);if(null!==a){if(0===s||i%s!=0)throw new Xc(n);r[a]=i/s}else if(i!==s)throw new Xc(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return ni(()=>{this.invokeCallHook(t,e);const n=Mp(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}pm.className="Reshape",ja(pm);class dm extends jp{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=Gh(1,t.dims.length+1);if(!C(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Vp({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=zp(t)).slice();return this.dims.forEach((n,r)=>{e[r+1]=t[n]}),e}call(t,e){return yn(Mp(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}dm.className="Permute",ja(dm);class fm extends jp{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=Mp(t);return pi($o(n,this.maskValue),-1)}call(t,e){return ni(()=>{this.invokeCallHook(t,e);const n=Mp(t),r=pi($o(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}fm.className="Masking",ja(fm);class mm extends jp{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(nh(t.inputLength))}this.inputDim=t.inputDim,dh(this.inputDim,"inputDim"),this.outputDim=t.outputDim,dh(this.outputDim,"outputDim"),this.embeddingsInitializer=Ap(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Mf(t.embeddingsRegularizer),this.activityRegularizer=Mf(t.activityRegularizer),this.embeddingsConstraint=Sh(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return ni(()=>this.maskZero?(t=Mp(t),$o(t,oe(t))):null)}computeOutputShape(t){if(t=zp(t),null==this.inputLength)return[...t,this.outputDim];const e=nh(this.inputLength);if(e.length!==t.length-1)throw new Xc(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new Xc(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return ni(()=>{this.invokeCallHook(t,e);let n=Mp(t);return"int32"!==n.dtype&&(n=Hh(n,"int32")),ep(this.embeddings.read(),n.as1D()).reshape(zp(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Ep(this.embeddingsInitializer),embeddingsRegularizer:Ff(this.embeddingsRegularizer),activityRegularizer:Ff(this.activityRegularizer),embeddingsConstraint:Nh(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}mm.className="Embedding",ja(mm);class gm extends jp{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Yc}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new Xc("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[zp(t)]),(t=t).length<2)throw new Xc(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=uh(e),e.length>1)throw new Xc(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map(t=>t.length);-1===t.indexOf(null)&&1===uh(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return ni(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const r=Uh(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=qh(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(Ph(t.slice(1))));i=yn(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=Gh(1,t).concat([0]);e.push(yn(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=yn(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(Gh(0,s-1));r=yn(r,t)}return r}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=uh(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return ni(()=>{if(null==e)return null;if(!Array.isArray(e))throw new Xc("`mask` should be an Array");if(!Array.isArray(t))throw new Xc("`inputs` should be an Array");if(e.length!==t.length)throw new Xc(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:Is(t,0)))[0];for(let t=1;t<e.length-1;++t)n=Ze(n,e[t]);return n})}}class ym extends gm{constructor(t){super(t)}mergeFunction(t){return ni(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=he(e,t[n]);return e})}}ym.className="Add",ja(ym);class bm extends gm{constructor(t){super(t)}mergeFunction(t){return ni(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Ut(e,t[n]);return e})}}bm.className="Multiply",ja(bm);class xm extends gm{constructor(t){super(t)}mergeFunction(t){return ni(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=he(e,t[n]);return Ut(1/t.length,e)})}}xm.className="Average",ja(xm);class wm extends gm{constructor(t){super(t)}mergeFunction(t){return ni(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=_s(e,t[n]);return e})}}wm.className="Maximum",ja(wm);class vm extends gm{constructor(t){super(t)}mergeFunction(t){return ni(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=ko(e,t[n]);return e})}}vm.className="Minimum",ja(vm);class Nm extends gm{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new Xc("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(C(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new Xc("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return ni(()=>Yh(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new Xc("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new Xc("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new Xc("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new Xc(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return ni(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(Ro(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(Is(e[n],-1)):r.push(e[n]);const s=ps(r,this.axis);return hi(s,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Cm(t,e){for(;t<0;)t+=e;return t}Nm.className="Concatenate",ja(Nm);class Sm extends gm{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){b(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new Yc("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new Xc(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new Xc(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>Cm(e,t[n].shape.length)):[Cm(this.axes,n.shape.length),Cm(this.axes,r.shape.length)],this.normalize&&(n=ld(n,e[0]),r=ld(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new Yc("batchDot is not implemented for tensors of 4D or higher rank yet");if(b(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),b(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new Yc("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return ni(()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Cm(this.axes,t.length),Cm(this.axes,e.length)],n}computeOutputShape(t){b(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new Yc("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}Sm.className="Dot",ja(Sm);class km extends jp{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return ni(()=>{this.invokeCallHook(t,e);const n=Mp(t);return ip(()=>Qh(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}km.className="GaussianNoise",ja(km);class Im extends jp{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return ni(()=>{this.invokeCallHook(t,e);const n=Mp(t);if(this.rate>0&&this.rate<1){return ip(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(Qh(n.shape,1,t))},()=>n,e.training||!1)}return n})}}Im.className="GaussianDropout",ja(Im);class Em extends jp{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||Mp(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return ni(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return ip(()=>{const e=Mp(t),r=-1.7580993408473766;let s=Ye(nl(n),this.rate);s=Hh(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>Mp(t),e.training||!1)}return t})}}function Am(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=Ii(t,e,n,r,s,a);else if(3===t.rank)i=Ei(t,e,n,r,s,a);else{if(4!==t.rank)throw new Yc(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=Ai(t,e,n,r,s,a)}return i}function Tm(t,e,n,r,s=.001){return C(r.slice().sort(),Gh(0,t.rank-1))?function(t,e,n,r,s=.001){return ni(()=>{const a=Eo(t,r),i=a.mean,o=a.variance;return[Am(t,i,o,n,e,s),i,o]})}(t,e,n,r,s):function(t,e,n,r,s=.001){return ni(()=>{const a=Eo(t,r),i=a.mean,o=a.variance,l=[];for(const e of Gh(0,t.rank))-1!==r.indexOf(e)?l.push(1):l.push(t.shape[e]);const u=i.reshape(l),c=o.reshape(l),h=null==e?null:e.reshape(l),p=null==n?null:n.reshape(l);return[Am(t,u,c,p,h,s),i,o]})}(t,e,n,r,s)}Em.className="AlphaDropout",ja(Em);class $m extends jp{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Ap(t.betaInitializer||"zeros"),this.gammaInitializer=Ap(t.gammaInitializer||"ones"),this.movingMeanInitializer=Ap(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Ap(t.movingVarianceInitializer||"ones"),this.betaConstraint=Sh(t.betaConstraint),this.gammaConstraint=Sh(t.gammaConstraint),this.betaRegularizer=Mf(t.betaRegularizer),this.gammaRegularizer=Mf(t.gammaRegularizer)}build(t){t=zp(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new Xc(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new Vp({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return ni(()=>{const n=null!=e.training&&e.training,r=Mp(t),s=r.shape,a=s.length,i=Gh(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=Zc(1,a);l[o]=s[o];const u=i.slice();u.sort();const c=!C(u,Gh(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(l),e=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,s=this.scale?this.gamma.read().reshape(l):null;return Am(r,t,e,n,s,this.epsilon)}return Am(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=Tm(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{ni(()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))})};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Ep(this.betaInitializer),gammaInitializer:Ep(this.gammaInitializer),movingMeanInitializer:Ep(this.movingMeanInitializer),movingVarianceInitializer:Ep(this.movingVarianceInitializer),betaRegularizer:Ff(this.betaRegularizer),gammaRegularizer:Ff(this.gammaRegularizer),betaConstraint:Nh(this.betaConstraint),gammaConstraint:Nh(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}$m.className="BatchNormalization",ja($m);class Rm extends jp{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Ap(t.betaInitializer||"zeros"),this.gammaInitializer=Ap(t.gammaInitializer||"ones"),this.betaRegularizer=Mf(t.betaRegularizer),this.gammaRegularizer=Mf(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=zp(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==uh(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=Mp(t),r=n.shape,s=r.length;return ni(()=>{let{mean:t,variance:e}=Eo(n,this.axis,!0);const a=Zc(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(u.push(r[t]),c.push(1)):(u.push(1),c.push(r[t]));return t=t.tile(u),e=e.tile(u),o=o.tile(c),l=l.tile(c),Am(n,t,e,l,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Ep(this.betaInitializer),gammaInitializer:Ep(this.gammaInitializer),betaRegularizer:Ff(this.betaRegularizer),gammaRegularizer:Ff(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}Rm.className="LayerNormalization",ja(Rm);class Dm extends jp{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new Xc(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new Xc(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new Xc(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new Vp({ndim:4})]}computeOutputShape(t){let e,n;return t=zp(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return ni(()=>{return e=Mp(t),n=this.padding,r=this.dataFormat,ni(()=>{if(4!==e.rank)throw new Xc("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Xc("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new Xc(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Wr(e,t)});var e,n,r})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function _m(t,e,n,r,s,a){return ni(()=>{let i;Rh(s),_h(a),Dh(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=qf(t,s);const o="same"===r?"same":"valid";return i="max"===a?wo(t,e,n,o):wi(t,e,n,o),"channelsFirst"===s&&(i=yn(i,[0,3,1,2])),i})}function Fm(t,e,n,r,s,a){return ni(()=>{let i;Rh(s),_h(a),Dh(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=jf(t,s);const o="same"===r?"same":"valid";return i="max"===a?vo(t,e,n,o):vi(t,e,n,o),"channelsFirst"===s&&(i=yn(i,[0,4,1,2,3])),i})}Dm.className="ZeroPadding2D",ja(Dm);class Om extends jp{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new Xc("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(dh(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new Xc("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}dh(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Dh(this.padding),this.inputSpec=[new Vp({ndim:3})]}computeOutputShape(t){const e=Gf((t=zp(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return ni(()=>{this.invokeCallHook(t,e),t=qh(Mp(t),2);const n=this.poolingFunction(Mp(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return kl(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class Mm extends Om{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Rh(s),Dh(r),_m(t,e,n,r,s,"max")}}Mm.className="MaxPooling1D",ja(Mm);class zm extends Om{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Rh(s),Dh(r),_m(t,e,n,r,s,"avg")}}zm.className="AveragePooling1D",ja(zm);class Lm extends jp{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new Xc("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];dh(this.poolSize,"poolSize"),dh(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rh(this.dataFormat),Dh(this.padding),this.inputSpec=[new Vp({ndim:4})]}computeOutputShape(t){t=zp(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Gf(e,this.poolSize[0],this.padding,this.strides[0]),n=Gf(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return ni(()=>(this.invokeCallHook(t,e),this.poolingFunction(Mp(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Bm extends Lm{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Rh(s),Dh(r),_m(t,e,n,r,s,"max")}}Bm.className="MaxPooling2D",ja(Bm);class Pm extends Lm{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Rh(s),Dh(r),_m(t,e,n,r,s,"avg")}}Pm.className="AveragePooling2D",ja(Pm);class Wm extends jp{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new Xc("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];dh(this.poolSize,"poolSize"),dh(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rh(this.dataFormat),Dh(this.padding),this.inputSpec=[new Vp({ndim:5})]}computeOutputShape(t){t=zp(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Gf(e,this.poolSize[0],this.padding,this.strides[0]),n=Gf(n,this.poolSize[1],this.padding,this.strides[1]),r=Gf(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return ni(()=>(this.invokeCallHook(t,e),this.poolingFunction(Mp(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Vm extends Wm{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Rh(s),Dh(r),Fm(t,e,n,r,s,"max")}}Vm.className="MaxPooling3D",ja(Vm);class Um extends Wm{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Rh(s),Dh(r),Fm(t,e,n,r,s,"avg")}}Um.className="AveragePooling3D",ja(Um);class Gm extends jp{constructor(t){super(t),this.inputSpec=[new Vp({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Yc}}class Hm extends Gm{constructor(t){super(t||{})}call(t,e){return ni(()=>{const e=Mp(t);return Co(e,1)})}}Hm.className="GlobalAveragePooling1D",ja(Hm);class qm extends Gm{constructor(t){super(t||{})}call(t,e){return ni(()=>{const e=Mp(t);return mo(e,1)})}}qm.className="GlobalMaxPooling1D",ja(qm);class jm extends jp{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rh(this.dataFormat),this.inputSpec=[new Vp({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Yc}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Km extends jm{call(t,e){return ni(()=>{const e=Mp(t);return"channelsLast"===this.dataFormat?Co(e,[1,2]):Co(e,[2,3])})}}Km.className="GlobalAveragePooling2D",ja(Km);class Xm extends jm{call(t,e){return ni(()=>{const e=Mp(t);return"channelsLast"===this.dataFormat?mo(e,[1,2]):mo(e,[2,3])})}}function Ym(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new Xc("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function Jm(t,e,n,r=!1,s,a,i=!1,o=!1){return ni(()=>{const l=e.shape.length;if(l<3)throw new Xc(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Gh(2,l));if(e=yn(e,u),null!=a)throw new Yc("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===l-1&&(s=Is(s,-1)),s=yn(s,u)),r&&(e=Er(e,0),null!=s&&(s=Er(s,0)));const c=[];let h,p=n;const d=e.shape[0],f=Fl(e);let m,g;null!=s&&(m=Fl(s));for(let e=0;e<d;++e){const n=f[e],r=ni(()=>t(n,p));if(null==s)h=r[0],p=r[1];else{const t=ni(()=>{const t=m[e],n=Ro(t).sub(t);return{output:r[0].mul(t).add(p[0].mul(n)),newStates:p.map((e,s)=>r[1][s].mul(t).add(e.mul(n)))}});h=t.output,p=t.newStates}o&&c.push(h)}if(o){g=Es(c,1)}return[h,g,p]})}Xm.className="GlobalMaxPooling2D",ja(Xm);class Zm extends jp{constructor(t){let e;if(super(t),null==t.cell)throw new Xc("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new ig({cells:t.cell}):t.cell,null==e.stateSize)throw new Xc("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new Vp({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return Gh(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Fp(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return ni(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new Yc("Constants support is not implemented in RNN yet.");Fp(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t[t.length-1];this.inputSpec[0]=new Vp({shape:[e,null,n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!C(this.stateSpec.map(t=>t.shape[t.shape.length-1]),s))throw new Xc(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=s.map(t=>new Vp({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){ni(()=>{if(!this.stateful)throw new jc("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Xc("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>pr([n,t])):this.states_=[pr([n,this.cell.stateSize])];else if(null==t)ri(this.states_),null!=this.keptStates&&(ri(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>pr([n,t])):this.states_[0]=pr([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Xc(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):ri(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!C(r.shape,a))throw new Xc(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map(t=>si(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Ym(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new Vp({shape:t.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof Up){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return ni(()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=Mp(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new Xc(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Jm((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(t){return ni(()=>{let e=pr(t.shape);return e=Ne(e,[1,2]),e=qh(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?Zh(e,[1,t]):e):this.cell.stateSize>1?[Zh(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const e=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:e};const n=super.getConfig();return Object.assign(t,n),t}static fromConfig(t,e,n={}){const r=od(e.cell,n);return new t(Object.assign(e,{cell:r}))}}Zm.className="RNN",ja(Zm);class Qm extends jp{}class tg extends Qm{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,dh(this.units,"units"),this.activation=Tf(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Ap(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ap(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ap(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Mf(t.kernelRegularizer),this.recurrentRegularizer=Mf(t.recurrentRegularizer),this.biasRegularizer=Mf(t.biasRegularizer),this.kernelConstraint=Sh(t.kernelConstraint),this.recurrentConstraint=Sh(t.recurrentConstraint),this.biasConstraint=Sh(t.biasConstraint),this.dropout=Vh([1,Uh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Vh([1,Uh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=zp(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ni(()=>{if(2!==(t=t).length)throw new Xc(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=og(()=>Ro(t),this.dropout,r)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=og(()=>Ro(n),this.recurrentDropout,r));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=tp(null!=a?Ut(t,a):t,this.kernel.read()),null!=this.bias&&(s=sp(s,this.bias.read())),null!=i&&(n=Ut(n,i));let o=he(s,tp(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t={units:this.units,activation:Ef(this.activation),useBias:this.useBias,kernelInitializer:Ep(this.kernelInitializer),recurrentInitializer:Ep(this.recurrentInitializer),biasInitializer:Ep(this.biasInitializer),kernelRegularizer:Ff(this.kernelRegularizer),recurrentRegularizer:Ff(this.recurrentRegularizer),biasRegularizer:Ff(this.biasRegularizer),activityRegularizer:Ff(this.activityRegularizer),kernelConstraint:Nh(this.kernelConstraint),recurrentConstraint:Nh(this.recurrentConstraint),biasConstraint:Nh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return Object.assign(t,e),t}}tg.className="SimpleRNNCell",ja(tg);class eg extends Zm{constructor(t){t.cell=new tg(t),super(t)}call(t,e){return ni(()=>{null!=this.cell.dropoutMask&&(ri(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ri(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}getConfig(){const t={units:this.units,activation:Ef(this.activation),useBias:this.useBias,kernelInitializer:Ep(this.kernelInitializer),recurrentInitializer:Ep(this.recurrentInitializer),biasInitializer:Ep(this.biasInitializer),kernelRegularizer:Ff(this.kernelRegularizer),recurrentRegularizer:Ff(this.recurrentRegularizer),biasRegularizer:Ff(this.biasRegularizer),activityRegularizer:Ff(this.activityRegularizer),kernelConstraint:Nh(this.kernelConstraint),recurrentConstraint:Nh(this.recurrentConstraint),biasConstraint:Nh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return new t(e)}}eg.className="SimpleRNN",ja(eg);class ng extends Qm{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new Xc("GRUCell does not support reset_after parameter set to true.");this.units=t.units,dh(this.units,"units"),this.activation=Tf(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Tf(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Ap(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ap(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ap(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Mf(t.kernelRegularizer),this.recurrentRegularizer=Mf(t.recurrentRegularizer),this.biasRegularizer=Mf(t.biasRegularizer),this.kernelConstraint=Sh(t.kernelConstraint),this.recurrentConstraint=Sh(t.recurrentConstraint),this.biasConstraint=Sh(t.biasConstraint),this.dropout=Vh([1,Uh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Vh([1,Uh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=zp(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ni(()=>{if(2!==(t=t).length)throw new Xc("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=og(()=>Ro(t),this.dropout,n,3)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=og(()=>Ro(r),this.recurrentDropout,n,3));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(t=Ut(t,s[0]));let u=tp(t,this.kernel.read());this.useBias&&(u=sp(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Ut(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=nn(c,[2*this.units,this.units],c.rank-1),d=tp(r,h),[f,m,g]=nn(u,3,u.rank-1),[y,b]=nn(d,2,d.rank-1);i=this.recurrentActivation.apply(he(f,y)),o=this.recurrentActivation.apply(he(m,b));const x=tp(Ut(o,r),p);l=this.activation.apply(he(g,x));const w=he(Ut(i,r),Ut(he(1,Kt(i)),l));return[w,w]})}getConfig(){const t={units:this.units,activation:Ef(this.activation),recurrentActivation:Ef(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ep(this.kernelInitializer),recurrentInitializer:Ep(this.recurrentInitializer),biasInitializer:Ep(this.biasInitializer),kernelRegularizer:Ff(this.kernelRegularizer),recurrentRegularizer:Ff(this.recurrentRegularizer),biasRegularizer:Ff(this.biasRegularizer),activityRegularizer:Ff(this.activityRegularizer),kernelConstraint:Nh(this.kernelConstraint),recurrentConstraint:Nh(this.recurrentConstraint),biasConstraint:Nh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return Object.assign(t,e),t}}ng.className="GRUCell",ja(ng);class rg extends Zm{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new ng(t),super(t)}call(t,e){return ni(()=>{null!=this.cell.dropoutMask&&(ri(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ri(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Ef(this.activation),recurrentActivation:Ef(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ep(this.kernelInitializer),recurrentInitializer:Ep(this.recurrentInitializer),biasInitializer:Ep(this.biasInitializer),kernelRegularizer:Ff(this.kernelRegularizer),recurrentRegularizer:Ff(this.recurrentRegularizer),biasRegularizer:Ff(this.biasRegularizer),activityRegularizer:Ff(this.activityRegularizer),kernelConstraint:Nh(this.kernelConstraint),recurrentConstraint:Nh(this.recurrentConstraint),biasConstraint:Nh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}rg.className="GRU",ja(rg);class sg extends Qm{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,dh(this.units,"units"),this.activation=Tf(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Tf(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Ap(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ap(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ap(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Mf(t.kernelRegularizer),this.recurrentRegularizer=Mf(t.recurrentRegularizer),this.biasRegularizer=Mf(t.biasRegularizer),this.kernelConstraint=Sh(t.kernelConstraint),this.recurrentConstraint=Sh(t.recurrentConstraint),this.biasConstraint=Sh(t.biasConstraint),this.dropout=Vh([1,Uh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Vh([1,Uh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=zp(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends up{apply(e,r){const s=t.apply([n]),a=(new hp).apply([n]),i=t.apply([2*n]);return Jh(Jh(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return ni(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new Xc("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=og(()=>Ro(t),this.dropout,n,4)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=og(()=>Ro(r),this.recurrentDropout,n,4));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(t=Ut(t,a[0]));let h=tp(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Ut(r,i[0])),h=he(h,tp(r,this.recurrentKernel.read())),this.useBias&&(h=sp(h,this.bias.read()));const[p,d,f,m]=nn(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=he(Ut(l,s),Ut(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Ut(c,this.activation.apply(u));return[g,g,u]})}getConfig(){const t={units:this.units,activation:Ef(this.activation),recurrentActivation:Ef(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ep(this.kernelInitializer),recurrentInitializer:Ep(this.recurrentInitializer),biasInitializer:Ep(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ff(this.kernelRegularizer),recurrentRegularizer:Ff(this.recurrentRegularizer),biasRegularizer:Ff(this.biasRegularizer),activityRegularizer:Ff(this.activityRegularizer),kernelConstraint:Nh(this.kernelConstraint),recurrentConstraint:Nh(this.recurrentConstraint),biasConstraint:Nh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}sg.className="LSTMCell",ja(sg);class ag extends Zm{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new sg(t),super(t)}call(t,e){return ni(()=>{null!=this.cell.dropoutMask&&(ri(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ri(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get unitForgetBias(){return this.cell.unitForgetBias}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Ef(this.activation),recurrentActivation:Ef(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Ep(this.kernelInitializer),recurrentInitializer:Ep(this.recurrentInitializer),biasInitializer:Ep(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ff(this.kernelRegularizer),recurrentRegularizer:Ff(this.recurrentRegularizer),biasRegularizer:Ff(this.biasRegularizer),activityRegularizer:Ff(this.activityRegularizer),kernelConstraint:Nh(this.kernelConstraint),recurrentConstraint:Nh(this.recurrentConstraint),biasConstraint:Nh(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}ag.className="LSTM",ja(ag);class ig extends Qm{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return ni(()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;Fp(t)&&(t=t[0]),t=t,this.cells.forEach((n,r)=>{Oh("RNNCell_"+r,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=[];for(const e of this.cells)t.push({className:e.getClassName(),config:e.getConfig()});const e={cells:t},n=super.getConfig();return Object.assign(e,n),e}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(od(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return Pp(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}Wp(e)}}function og(t,e,n=null,r=1){function s(){return ap(t(),e)}if(r>1){const e=[];for(let a=0;a<r;a++)e.push(ip(s,t,n));return e.map(t=>si(t.clone()))}return si(ip(s,t,n).clone())}ig.className="StackedRNNCells",ja(ig);class lg extends jp{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=od(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class ug extends lg{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=zp(t)).length<3)throw new Xc("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=zp(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return ni(()=>Jm((t,n)=>[Mp(this.layer.call(t,e)),[]],t=Mp(t),[],!1,null,null,!1,!0)[1])}}ug.className="TimeDistributed",ja(ug);class cg extends lg{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=od(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=od(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,hh(Th,"BidirectionalMergeMode",s),t.weights)throw new Yc("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):eh(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Ym(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new Xc("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map(t=>new Vp({shape:t.shape}));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new Yc("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Up;for(const t of a)if(t instanceof Up!==o)throw new Xc("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return ni(()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Er(s,1)),"concat"===this.mergeMode?i=Yh([r,s]):"sum"===this.mergeMode?i=he(r,s):"ave"===this.mergeMode?i=Ut(.5,he(r,s)):"mul"===this.mergeMode?i=Ut(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){Oh(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),Oh(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=od(e.layer);if(delete e.layer,null!=e.numConstants)throw new Yc("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}function hg(t){return new zm(t)}function pg(t){return new Pm(t)}function dg(t){return new Um(t)}function fg(t){return new qm(t)}function mg(t){return new Xm(t)}function gg(t){return new Mm(t)}function yg(t){return new Bm(t)}cg.className="Bidirectional",ja(cg);const bg=fg,xg=mg,wg=gg,vg=yg;var Ng=Object.freeze({__proto__:null,inputLayer:function(t){return new Kp(t)},elu:function(t){return new Pf(t)},reLU:function(t){return new zf(t)},leakyReLU:function(t){return new Lf(t)},prelu:function(t){return new Bf(t)},softmax:function(t){return new Vf(t)},thresholdedReLU:function(t){return new Wf(t)},conv1d:function(t){return new nm(t)},conv2d:function(t){return new Jf(t)},conv2dTranspose:function(t){return new Qf(t)},conv3d:function(t){return new Zf(t)},separableConv2d:function(t){return new em(t)},cropping2D:function(t){return new rm(t)},upSampling2d:function(t){return new sm(t)},depthwiseConv2d:function(t){return new am(t)},activation:function(t){return new cm(t)},dense:function(t){return new lm(t)},dropout:function(t){return new im(t)},spatialDropout1d:function(t){return new om(t)},flatten:function(t){return new um(t)},repeatVector:function(t){return new hm(t)},reshape:function(t){return new pm(t)},permute:function(t){return new dm(t)},embedding:function(t){return new mm(t)},add:function(t){return new ym(t)},average:function(t){return new xm(t)},concatenate:function(t){return new Nm(t)},maximum:function(t){return new wm(t)},minimum:function(t){return new vm(t)},multiply:function(t){return new bm(t)},dot:function(t){return new Sm(t)},batchNormalization:function(t){return new $m(t)},layerNormalization:function(t){return new Rm(t)},zeroPadding2d:function(t){return new Dm(t)},averagePooling1d:hg,avgPool1d:function(t){return hg(t)},avgPooling1d:function(t){return hg(t)},averagePooling2d:pg,avgPool2d:function(t){return pg(t)},avgPooling2d:function(t){return pg(t)},averagePooling3d:dg,avgPool3d:function(t){return dg(t)},avgPooling3d:function(t){return dg(t)},globalAveragePooling1d:function(t){return new Hm(t)},globalAveragePooling2d:function(t){return new Km(t)},globalMaxPooling1d:fg,globalMaxPooling2d:mg,maxPooling1d:gg,maxPooling2d:yg,maxPooling3d:function(t){return new Vm(t)},gru:function(t){return new rg(t)},gruCell:function(t){return new ng(t)},lstm:function(t){return new ag(t)},lstmCell:function(t){return new sg(t)},simpleRNN:function(t){return new eg(t)},simpleRNNCell:function(t){return new tg(t)},rnn:function(t){return new Zm(t)},stackedRNNCells:function(t){return new ig(t)},bidirectional:function(t){return new cg(t)},timeDistributed:function(t){return new ug(t)},globalMaxPool1d:bg,globalMaxPool2d:xg,maxPool1d:wg,maxPool2d:vg,Layer:jp,RNN:Zm,RNNCell:Qm,input:df,gaussianNoise:function(t){return new km(t)},gaussianDropout:function(t){return new Im(t)},alphaDropout:function(t){return new Em(t)},masking:function(t){return new fm(t)}});var Cg=Object.freeze({__proto__:null,binaryAccuracy:function(t,e){return bd(t,e)},binaryCrossentropy:function(t,e){return Cd(t,e)},sparseCategoricalAccuracy:function(t,e){return Sd(t,e)},categoricalAccuracy:function(t,e){return xd(t,e)},categoricalCrossentropy:function(t,e){return kd(t,e)},precision:function(t,e){return vd(t,e)},recall:function(t,e){return Nd(t,e)},cosineProximity:function(t,e){return md(t,e)},meanAbsoluteError:function(t,e){return cd(t,e)},meanAbsolutePercentageError:function(t,e){return hd(t,e)},MAPE:function(t,e){return hd(t,e)},mape:function(t,e){return hd(t,e)},meanSquaredError:function(t,e){return ud(t,e)},MSE:function(t,e){return ud(t,e)},mse:function(t,e){return ud(t,e)}}),Sg=Object.freeze({__proto__:null,modelFromJSON:async function(t,e){"modelTopology"in t||(t={modelTopology:t});let n=(t=t).modelTopology;null!=n.model_config&&(n=n.model_config);const r=od(Md(n),e);if(null!=t.weightsManifest){const e=await Na(t.weightsManifest,t.pathPrefix,r.weights.map(t=>t.originalName)),n={};for(const t of r.weights)n[t.originalName]=e[t.originalName];r.loadWeights(n),ri(e)}return r}});var kg=Object.freeze({__proto__:null,l1l2:function(t){return new Df(t)},l1:function(t){return $f(e=t),new Df({l1:null!=e?e.l1:null,l2:0});var e},l2:function(t){return $f(e=t),new Df({l2:null!=e?e.l2:null,l1:0});var e}});class Ig extends Qp{constructor(){super(...arguments),this.model=null}setModel(t){if(!(t instanceof cf))throw new Error("model must be a LayersModel, not some other Container");this.model=t}}function Eg(t,e){return t<e}function Ag(t,e){return t>e}class Tg extends Ig{constructor(t){if(super(),null==t&&(t={}),t.restoreBestWeights)throw new Yc("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=t.monitor||"val_loss",this.minDelta=Math.abs(t.minDelta||0),this.patience=t.patience||0,this.verbose=t.verbose||0,this.mode=t.mode||"auto",this.baseline=t.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=Eg:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=Ag:this.monitorFunc=Eg,this.monitorFunc===Eg&&(this.minDelta*=-1)}async onTrainBegin(t){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===Eg?1/0:-1/0}async onEpochEnd(t,e){await Yp(e);const n=this.getMonitorValue(e);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=t,this.model.stopTraining=!0)))}async onTrainEnd(t){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(t){null==t&&(t={});const e=t[this.monitor];return null==e&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: `+Object.keys(t)),e}}const $g={earlyStopping:function(t){return new Tg(t)}};var Rg,Dg;!function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(Rg||(Rg={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(Dg||(Dg={}));const _g={};function Fg(t){return _g[t]}function Og(t,e,n,r){const s=e.inputParams[t];if(s&&void 0!==s.inputIndexStart){const t=s.inputIndexStart,a=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?t+1:s.inputIndexEnd;if("tensor"===s.type)return Mg(e.inputNames[s.inputIndexStart],n,r);if("tensors"===s.type){return e.inputNames.slice(t,a).map(t=>Mg(t,n,r))}const i=Mg(e.inputNames.slice(t)[0],n,r),o=i.dataSync();return"number"===s.type?o[0]:K(i.shape,o)}const a=e.attrParams[t];return a&&a.value}function Mg(t,e,n){const[r,s]=Bg(t),a=n.currentContextIds.find(t=>!!e[Lg(r,t)]);return void 0!==a?e[Lg(r,a)][s]:void 0}function zg(t,e){const[n,r]=Bg(t);return[Lg(n,e&&e.currentContextId),r]}function Lg(t,e){return e?`${t}-${e}`:t}function Bg(t){const e=t.split(":");return 1===e.length?[t,0]:[e[0],Number(e[e.length-1])]}function Pg(t,e,n){let r=Og("pad",t,e,n);if("explicit"===r){r=Og("explicitPaddings",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=r[2*t],s[t][1]=r[2*t+1];return s}return r}var Wg=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Vg=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Ug=Object.freeze({__proto__:null,json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var Gg=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var Hg=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var qg=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var jg=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]});var Kg=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var Xg=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var Yg=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Jg=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Zg=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var Qg=Object.freeze({__proto__:null,json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var ty=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var ey=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var ny=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class ry{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[Wg,Vg,Ug,Gg,Hg,qg,jg,Yg,Xg,Kg,Jg,Zg,Qg,ty,ey,ny].map(t=>t.json));this.opMappers=t.reduce((t,e)=>(t[e.tfOpName]=e,t),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=n.reduce((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")&&r.push(t[e.name]),"Const"===e.op&&s.push(t[e.name]),t),{});let i=[];const o=[];let l={},u={};null!=e&&(l=this.mapSignatureEntries(e.inputs),u=this.mapSignatureEntries(e.outputs));const c=Object.keys(a);c.forEach(t=>{const e=a[t];e.inputNames.forEach(t=>{const[n]=zg(t);e.inputs.push(a[n]),a[n].children.push(e)})}),0===Object.keys(u).length?c.forEach(t=>{const e=a[t];0===e.children.length&&o.push(e)}):Object.keys(u).forEach(t=>{const[e]=zg(t),n=a[e];null!=n&&(n.signatureKey=u[t],o.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(t=>{const[e]=zg(t),n=a[e];n&&(n.signatureKey=l[t],i.push(n))}):i=r;let h={};return null!=t.library&&null!=t.library.function&&(h=t.library.function.reduce((t,e)=>(t[e.signature.name]=this.mapFunction(e),t),{})),{nodes:a,inputs:i,outputs:o,weights:s,placeholders:r,signature:e,functions:h}}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=Fg(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(t=>t.startsWith("^")?t.substr(1):t),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((e,n)=>{const r=n.type;let s=void 0;switch(n.type){case"string":s=ay(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ay(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=my(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=my(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=oy(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=oy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=fy(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=fy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=iy(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=iy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=yy(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=yy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=dy(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=dy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=gy(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=gy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=cy(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=cy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=hy(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=hy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=uy(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=uy(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e},{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t),{}));const s=[],a=[];t.signature.inputArg.forEach(t=>{const[e]=zg(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ly(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n}),Object.keys(r).forEach(t=>{const e=r[t];e.inputNames.forEach(t=>{const[n]=zg(t);e.inputs.push(r[n]),r[n].children.push(e)})});const i=t.ret;t.signature.outputArg.forEach(t=>{const[e,n]=zg(i[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,a.push(s))});const o=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t),{}),outputs:t.signature.outputArg.reduce((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function sy(t,e){const r=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=n().global;if(void 0!==e.atob)return e.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?r:r.toLowerCase()}function ay(t,e,n,r=!1){const s=t[e];return null!=s?sy(s.s,r):n}function iy(t,e,n){const r=t[e];return r?r.b:n}function oy(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function ly(t){switch("string"==typeof t&&(t=Rg[t]),t){case Rg.DT_FLOAT:return"float32";case Rg.DT_INT32:case Rg.DT_INT64:case Rg.DT_INT8:case Rg.DT_UINT8:return"int32";case Rg.DT_BOOL:return"bool";case Rg.DT_DOUBLE:return"float32";case Rg.DT_STRING:return"string";default:return null}}function uy(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function cy(t,e,n){const r=t[e];return r&&r.type?ly(r.type):n}function hy(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map(t=>ly(t)):n}function py(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function dy(t,e,n){const r=t[e];return r&&r.shape?py(r.shape):n}function fy(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(t=>"number"==typeof t?t:parseInt(t,10)):n}function my(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map(t=>sy(t,r)):n}function gy(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map(t=>py(t)):n}function yy(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class by{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return Mg(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return Mg(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return oy(this.node.rawAttrs,t,e);if(null!=n.s)return ay(this.node.rawAttrs,t,e);if(null!=n.b)return iy(this.node.rawAttrs,t,e);if(null!=n.shape)return dy(this.node.rawAttrs,t,e);if(null!=n.type)return cy(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return fy(this.node.rawAttrs,t,e);if(null!=n.list.s)return my(this.node.rawAttrs,t,e);if(null!=n.list.shape)return gy(this.node.rawAttrs,t,e);if(null!=n.list.b)return yy(this.node.rawAttrs,t,e);if(null!=n.list.type)return hy(this.node.rawAttrs,t,e)}return e}}function xy(t,e,n=""){b(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),()=>n+` Shapes ${t} and ${e} must match`)}class wy{constructor(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Yt(0),si(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(){this.tensors.forEach(t=>t.tensor.dispose()),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),xy(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,si(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return hs([],[0].concat(this.elementShape));const n=this.readMany(t);return xy(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Es(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return hs([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return xy(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),ps(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,Fl(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];ni(()=>{e=e.reshape([1,n,s]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,t[n],s];a[n]=Cs(e,i,o).reshape(this.elementShape)}return a});const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}}class vy{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach(t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);xy(e,t.shape,"TensorList shape mismatch: "),si(t)}),this.idTensor=Yt(0),this.maxNumElements=r,si(this.idTensor)}get id(){return this.idTensor.id}copy(){return new vy([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(){this.tensors.forEach(t=>t.dispose()),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return xy(t,this.elementShape,"TensorList shape mismatch: "),ni(()=>{const e=this.tensors.map(e=>e.reshape(t));return Es(e,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return xy(n.shape,t,"TensorList shape mismatch: "),n.reshape(t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(xy(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");si(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+t);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return xy(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);xy(this.elementShape,e.shape,"TensorList shape mismatch: "),si(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return xy(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?hs([],[0].concat(this.elementShape)):ni(()=>{const e=t.map(t=>this.tensors[t].reshape(n));return Es(e,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return xy(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?hs([],[0].concat(this.elementShape)):ni(()=>{const t=this.tensors.map(t=>t.reshape(e));return ps(t,0)})}}const Ny=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=Og("thenBranch",t,e,n),s=Og("elseBranch",t,e,n),a=Og("cond",t,e,n),i=Og("args",t,e,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Og("body",t,e,n),s=Og("cond",t,e,n),a=Og("args",t,e,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map(t=>t.id);let l=await i[0].data();i.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()});let u=a;for(;l[0];){const t=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const e=u.map(t=>t.id);t.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()});const a=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})}return u}case"LoopCond":return[Og("pred",t,e,n).clone()];case"Switch":{const r=Og("pred",t,e,n),s=Og("data",t,e,n);return(await r.data())[0]?[void 0,s.clone()]:[s.clone(),void 0]}case"Merge":{const r=t.inputNames.find(t=>void 0!==Mg(t,e,n));return r?[Mg(r,e,n).clone()]:void 0}case"Enter":{const r=Og("frameName",t,e,n),s=Og("tensor",t,e,n);return n.enterFrame(r),[s.clone()]}case"Exit":{const r=Og("tensor",t,e,n);return n.exitFrame(),[r.clone()]}case"NextIteration":{const r=Og("tensor",t,e,n);return n.nextIteration(),[r.clone()]}case"TensorArrayV3":{const r=Og("size",t,e,n),s=Og("dtype",t,e,n),a=Og("elementShape",t,e,n),i=Og("dynamicSize",t,e,n),o=Og("clearAfterRead",t,e,n),l=Og("identicalElementShapes",t,e,n),u=Og("name",t,e,n),c=new wy(u,s,r,a,l,i,o);return n.addTensorArray(c),[c.idTensor,Yt(1)]}case"TensorArrayWriteV3":{const r=Og("tensorArrayId",t,e,n),s=Og("index",t,e,n),a=Og("tensor",t,e,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=Og("tensorArrayId",t,e,n),s=Og("index",t,e,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Og("tensorArrayId",t,e,n),s=Og("indices",t,e,n),a=Og("dtype",t,e,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Og("tensorArrayId",t,e,n),s=Og("indices",t,e,n),a=Og("tensor",t,e,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=Og("tensorArrayId",t,e,n),s=n.getTensorArray(r.id),a=Og("dtype",t,e,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Og("tensorArrayId",t,e,n),s=Og("tensor",t,e,n),a=Og("lengths",t,e,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=Og("tensorArrayId",t,e,n);return[Yt(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Og("tensorArrayId",t,e,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Og("tensorListId",t,e,n),s=Og("index",t,e,n),a=Og("tensor",t,e,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=Og("tensorListId",t,e,n),s=Og("index",t,e,n),a=Og("elementShape",t,e,n),i=Og("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Og("indices",t,e,n),s=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new vy([],n,t.dtype,r),i=Fl(t,0);return e.forEach((t,e)=>{a.setItem(t,i[e])}),a}(Og("tensor",t,e,n),r,Og("elementShape",t,e,n),Og("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":{const r=function(t,e,n){return new vy([],t,e,n)}(Og("elementShape",t,e,n),Og("elementDType",t,e,n),Og("numElements",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListGather":{const r=Og("tensorListId",t,e,n),s=Og("indices",t,e,n),a=Og("elementShape",t,e,n),i=Og("elementDType",t,e,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=Og("tensorListId",t,e,n),s=Og("elementShape",t,e,n),a=Og("elementDType",t,e,n),i=Og("numElements",t,e,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+t.shape);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);xy(t.shape.slice(1),e,"TensorList shape mismatch: ");const s=t.unstack();return new vy(s,e,r)}(Og("tensor",t,e,n),Og("elementShape",t,e,n),Og("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=Og("tensorListId",t,e,n),s=n.getTensorList(r.id),a=Og("dtype",t,e,n),i=Og("elementShape",t,e,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=Og("tensorListId",t,e,n),s=Og("tensor",t,e,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Og("tensorListId",t,e,n),s=Og("elementShape",t,e,n),a=Og("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Og("tensor",t,e,n),s=Og("elementShape",t,e,n),a=function(t,e,n){let r=0;const s=e.map(t=>(r+=t,r));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const a=0===r?0:t.size/r,i=ni(()=>{const i=[];t=t.reshape([1,r,a]);for(let r=0;r<e.length;++r){const o=[0,0===r?0:s[r-1],0],l=[1,e[r],a];i[r]=Cs(t,o,l).reshape(n)}return t.dispose(),i}),o=new vy([],n,t.dtype,e.length);for(let t=0;t<i.length;t++)o.setItem(t,i[t]);return o}(r,Og("lengths",t,e,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function Cy(t,e,n){const r=((t,e,n)=>{switch(t.category){case"arithmetic":return ni(()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[he(Og("a",t,e,n),Og("b",t,e,n))];case"AddN":return[ci(Og("tensors",t,e,n))];case"FloorMod":case"Mod":return[Io(Og("a",t,e,n),Og("b",t,e,n))];case"Mul":return[Ut(Og("a",t,e,n),Og("b",t,e,n))];case"RealDiv":case"Div":return[jt(Og("a",t,e,n),Og("b",t,e,n))];case"DivNoNan":return[Hi(Og("a",t,e,n),Og("b",t,e,n))];case"FloorDiv":return[qt(Og("a",t,e,n),Og("b",t,e,n))];case"Sub":return[Qt(Og("a",t,e,n),Og("b",t,e,n))];case"Minimum":return[ko(Og("a",t,e,n),Og("b",t,e,n))];case"Maximum":return[_s(Og("a",t,e,n),Og("b",t,e,n))];case"Pow":return[yr(Og("a",t,e,n),Og("b",t,e,n))];case"SquaredDifference":return[Sl(Og("a",t,e,n),Og("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"basic_math":return ni(()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[oi(Og("x",t,e,n))];case"Acos":return[li(Og("x",t,e,n))];case"Acosh":return[ui(Og("x",t,e,n))];case"Asin":return[mi(Og("x",t,e,n))];case"Asinh":return[gi(Og("x",t,e,n))];case"Atan":return[yi(Og("x",t,e,n))];case"Atan2":return[bi(Og("x",t,e,n),Og("y",t,e,n))];case"Atanh":return[xi(Og("x",t,e,n))];case"Ceil":return[Ri(Og("x",t,e,n))];case"Complex":return[hr(Og("real",t,e,n),Og("imag",t,e,n))];case"Cos":return[zr(Og("x",t,e,n))];case"Cosh":return[Br(Og("x",t,e,n))];case"Elu":return[ji(Og("x",t,e,n))];case"Erf":return[Ki(Og("x",t,e,n))];case"Exp":return[In(Og("x",t,e,n))];case"Expm1":return[Xi(Og("x",t,e,n))];case"Floor":return[or(Og("x",t,e,n))];case"Log":return[gr(Og("x",t,e,n))];case"Log1p":return[uo(Og("x",t,e,n))];case"Imag":return[to(Og("x",t,e,n))];case"Neg":return[Kt(Og("x",t,e,n))];case"Reciprocal":return[al(Og("x",t,e,n))];case"Real":return[eo(Og("x",t,e,n))];case"Relu":return[il(Og("x",t,e,n))];case"Round":return[dl(Og("x",t,e,n))];case"Selu":return[fl(Og("x",t,e,n))];case"Sigmoid":return[as(Og("x",t,e,n))];case"Sin":return[dn(Og("x",t,e,n))];case"Sign":return[yl(Og("x",t,e,n))];case"Sinh":return[mn(Og("x",t,e,n))];case"Softplus":return[Cl(Og("x",t,e,n))];case"Sqrt":return[Jt(Og("x",t,e,n))];case"Square":return[Zt(Og("x",t,e,n))];case"Tanh":return[Ni(Og("x",t,e,n))];case"Tan":return[El(Og("x",t,e,n))];case"Relu6":case"ClipByValue":return[Di(Og("x",t,e,n),Og("clipValueMin",t,e,n),Og("clipValueMax",t,e,n))];case"Rsqrt":return[Dn(Mg(t.inputNames[0],e,n))];case"Prod":return[Po(Og("x",t,e,n),Og("axes",t,e,n))];case"LeakyRelu":return[io(Og("x",t,e,n),Og("alpha",t,e,n))];case"Prelu":return[Lo(Og("x",t,e,n),Og("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"control":return Ny(t,e,n);case"convolution":return ni(()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=Og("stride",t,e,n),s=Og("pad",t,e,n),a=Og("dataFormat",t,e,n).toUpperCase(),i=Og("dilation",t,e,n);return[zi(Og("x",t,e,n),Og("filter",t,e,n),r,s,a,i)]}case"Conv2D":{const r=Og("strides",t,e,n),s=Pg(t,e,n),a=Og("dataFormat",t,e,n).toUpperCase(),i=Og("dilations",t,e,n);return[ln(Og("x",t,e,n),Og("filter",t,e,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":case"FusedDepthwiseConv2dNative":{const[r,s]=Og("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,l=Og("numArgs",t,e,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=Og("strides",t,e,n),c=Pg(t,e,n),h=Og("dataFormat",t,e,n).toUpperCase(),p=Og("dilations",t,e,n),[d,f]=Og("args",t,e,n);return[("_FusedConv2D"===t.op?du:fu)({x:Og("x",t,e,n),filter:Og("filter",t,e,n),strides:[u[1],u[2]],pad:c,dataFormat:h,dilations:[p[1],p[2]],bias:d,activation:s,preluActivationWeights:f})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Og("outputShape",t,e,n),s=Og("strides",t,e,n),a=Pg(t,e,n);return[Li(Og("x",t,e,n),Og("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Og("strides",t,e,n),s=Pg(t,e,n),a=Og("dilations",t,e,n),i=Og("dataFormat",t,e,n).toUpperCase();return[Vi(Og("input",t,e,n),Og("filter",t,e,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=Og("strides",t,e,n),s=Og("pad",t,e,n),a=Og("dataFormat",t,e,n).toUpperCase(),i=Og("dilations",t,e,n);return[Bi(Og("x",t,e,n),Og("filter",t,e,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=Og("strides",t,e,n),s=Og("pad",t,e,n),a=Og("kernelSize",t,e,n);return[wi(Og("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=Og("strides",t,e,n),s=Og("pad",t,e,n),a=Og("kernelSize",t,e,n);return[wo(Og("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=Og("strides",t,e,n),s=Og("pad",t,e,n),a=Og("kernelSize",t,e,n),i=Og("includeBatchInIndex",t,e,n),{result:o,indexes:l}=No(Og("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,l]}case"AvgPool3D":{const r=Og("strides",t,e,n),s=Og("pad",t,e,n),a=Og("kernelSize",t,e,n);return[vi(Og("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=Og("strides",t,e,n),s=Og("pad",t,e,n),a=Og("kernelSize",t,e,n);return[vo(Og("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=Og("strides",t,e,n),s=Og("pad",t,e,n),a=Og("dilations",t,e,n),i=r[1],o=r[2],l=a[1],u=a[2];return[Gi(Og("x",t,e,n),Og("filter",t,e,n),[i,o],s,[l,u],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"creation":return ni(()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=Og("shape",t,e,n),s=Og("dtype",t,e,n);return[Zi(r,Og("value",t,e,n),s)]}case"LinSpace":return[oo(Og("start",t,e,n),Og("stop",t,e,n),Og("num",t,e,n))];case"Multinomial":{const r=Og("logits",t,e,n),s=Og("numSamples",t,e,n),a=Og("seed",t,e,n);return[To(r,s,a)]}case"OneHot":{const r=Og("indices",t,e,n),s=Og("depth",t,e,n),a=Og("onValue",t,e,n),i=Og("offValue",t,e,n);return[Da(r,s,a,i)]}case"Ones":return[xs(Og("shape",t,e,n),Og("dtype",t,e,n))];case"OnesLike":return[Ro(Og("x",t,e,n))];case"RandomUniform":return[nl(Og("shape",t,e,n),Og("minval",t,e,n),Og("maxval",t,e,n),Og("dtype",t,e,n))];case"Range":return[sl(Og("start",t,e,n),Og("stop",t,e,n),Og("step",t,e,n),Og("dtype",t,e,n))];case"TruncatedNormal":{const r=Og("shape",t,e,n),s=Og("mean",t,e,n),a=Og("stdDev",t,e,n),i=Og("seed",t,e,n);return[_l(r,s,a,Og("dtype",t,e,n),i)]}case"Zeros":return[pr(Og("shape",t,e,n),Og("dtype",t,e,n))];case"ZerosLike":return[oe(Og("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":case"NonMaxSuppressionV4":case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const r=Og("boxes",t,e,n),s=Og("scores",t,e,n),a=Og("maxOutputSize",t,e,n),i=Og("iouThreshold",t,e,n),o=Og("scoreThreshold",t,e,n);if("NonMaxSuppressionV5"===t.op){const l=Og("softNmsSigma",t,e,n),u=await rc.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,l);return[u.selectedIndices,u.selectedScores]}if("NonMaxSuppressionV4"===t.op){const l=Og("padToMaxOutputSize",t,e,n),u=await rc.nonMaxSuppressionPaddedAsync(r,s,a,i,o,l);return[u.selectedIndices,u.validOutputs]}return[await rc.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=Og("condition",t,e,n).asType("bool"),s=[await zl(r)];return r.dispose(),s}case"ListDiff":return gl(Og("x",t,e,n),Og("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return ni(()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=Og("x",t,e,n),s=Og("k",t,e,n),a=Og("sorted",t,e,n),i=Dl(r,s,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"image":return ni(()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=Og("images",t,e,n),s=Og("size",t,e,n),a=Og("alignCorners",t,e,n);return[rc.resizeBilinear(r,[s[0],s[1]],a)]}case"ResizeNearestNeighbor":{const r=Og("images",t,e,n),s=Og("size",t,e,n),a=Og("alignCorners",t,e,n);return[rc.resizeNearestNeighbor(r,[s[0],s[1]],a)]}case"CropAndResize":{const r=Og("image",t,e,n),s=Og("boxes",t,e,n),a=Og("boxInd",t,e,n),i=Og("cropSize",t,e,n),o=Og("method",t,e,n),l=Og("extrapolationValue",t,e,n);return[rc.cropAndResize(r,s,a,i,o,l)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"graph":return ni(()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=Og("default",t,e,n);return[Mg(t.name,e,n)||r];case"Placeholder":return[Mg(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Og("x",t,e,n).clone()];case"IdentityN":return Og("x",t,e,n).map(t=>t.clone());case"Snapshot":return[Og("x",t,e,n).clone()];case"Shape":return[rl(Og("x",t,e,n).shape,"int32")];case"ShapeN":return Og("x",t,e,n).map(t=>rl(t.shape));case"Size":return[Yt(Og("x",t,e,n).size,"int32")];case"Rank":return[Yt(Og("x",t,e,n).rank,"int32")];case"NoOp":return[Yt(1)];case"Print":const s=Og("x",t,e,n),a=Og("data",t,e,n),i=Og("message",t,e,n),o=Og("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"logical":return ni(()=>((t,e,n)=>{switch(t.op){case"Equal":return[Xn(Og("a",t,e,n),Og("b",t,e,n))];case"NotEqual":return[$o(Og("a",t,e,n),Og("b",t,e,n))];case"Greater":return[ar(Og("a",t,e,n),Og("b",t,e,n))];case"GreaterEqual":return[Ye(Og("a",t,e,n),Og("b",t,e,n))];case"Less":return[Zn(Og("a",t,e,n),Og("b",t,e,n))];case"LessEqual":return[Je(Og("a",t,e,n),Og("b",t,e,n))];case"LogicalAnd":return[Ze(Og("a",t,e,n),Og("b",t,e,n))];case"LogicalNot":return[Rr(Og("a",t,e,n))];case"LogicalOr":return[bo(Og("a",t,e,n),Og("b",t,e,n))];case"Select":case"SelectV2":return[Qe(Og("condition",t,e,n),Og("a",t,e,n),Og("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"matrices":return ni(()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Ue(Og("a",t,e,n),Og("b",t,e,n),Og("transposeA",t,e,n),Og("transposeB",t,e,n))];case"Transpose":return[yn(Og("x",t,e,n),Og("perm",t,e,n))];case"_FusedMatMul":const[r,s]=Og("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o=Og("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,u]=Og("args",t,e,n);return[mu({a:Og("a",t,e,n),b:Og("b",t,e,n),transposeA:Og("transposeA",t,e,n),transposeB:Og("transposeB",t,e,n),bias:l,activation:s,preluActivationWeights:u})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"normalization":return ni(()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[ki(Og("x",t,e,n),Og("mean",t,e,n),Og("variance",t,e,n),Og("offset",t,e,n),Og("scale",t,e,n),Og("epsilon",t,e,n))];case"LRN":return[lo(Og("x",t,e,n),Og("radius",t,e,n),Og("bias",t,e,n),Og("alpha",t,e,n),Og("beta",t,e,n))];case"Softmax":return[Nl(Og("x",t,e,n))];case"LogSoftmax":return[go(Og("x",t,e,n))];case"SparseToDense":return[ru(Og("sparseIndices",t,e,n),Og("outputShape",t,e,n),Og("sparseValues",t,e,n),Og("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"reduction":return ni(()=>((t,e,n)=>{switch(t.op){case"Max":{const r=Og("axis",t,e,n),s=Og("keepDims",t,e,n);return[mo(Og("x",t,e,n),r,s)]}case"Mean":{const r=Og("axis",t,e,n),s=Og("keepDims",t,e,n);return[Co(Og("x",t,e,n),r,s)]}case"Min":{const r=Og("axis",t,e,n),s=Og("keepDims",t,e,n);return[So(Og("x",t,e,n),r,s)]}case"Sum":{const r=Og("axis",t,e,n),s=Og("keepDims",t,e,n);return[Ne(Og("x",t,e,n),r,s)]}case"All":{const r=Og("axis",t,e,n),s=Og("keepDims",t,e,n);return[hi(Og("x",t,e,n),r,s)]}case"Any":{const r=Og("axis",t,e,n),s=Og("keepDims",t,e,n);return[pi(Og("x",t,e,n),r,s)]}case"ArgMax":{const r=Og("axis",t,e,n);return[di(Og("x",t,e,n),r)]}case"ArgMin":{const r=Og("axis",t,e,n);return[fi(Og("x",t,e,n),r)]}case"Prod":{const r=Og("axis",t,e,n),s=Og("keepDims",t,e,n);return[Po(Og("x",t,e,n),r,s)]}case"Cumsum":{const r=Og("axis",t,e,n),s=Og("exclusive",t,e,n),a=Og("reverse",t,e,n);return[bn(Og("x",t,e,n),r,s,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"slice_join":return ni(()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=Og("n",t,e,n),s=Og("axis",t,e,n);let a=Og("tensors",t,e,n);return a=a.slice(0,r),[ps(a,s)]}case"GatherV2":case"Gather":{const r=Og("axis",t,e,n),s=Og("x",t,e,n),a=Og("indices",t,e,n);return[Ds(s,a.asType("int32"),r)]}case"ReverseV2":case"Reverse":{const r=Og("axis",t,e,n),s=Og("x",t,e,n);return[Er(s,r)]}case"Slice":{const r=Og("begin",t,e,n),s=Og("size",t,e,n);return[Cs(Og("x",t,e,n),r,s)]}case"StridedSlice":{const r=Og("begin",t,e,n),s=Og("end",t,e,n),a=Og("strides",t,e,n),i=Og("beginMask",t,e,n),o=Og("endMask",t,e,n),l=Og("ellipsisMask",t,e,n),u=Og("newAxisMask",t,e,n),c=Og("shrinkAxisMask",t,e,n),h=Og("x",t,e,n);return[Il(h,r,s,a,i,o,l,u,c)]}case"Pack":return ni(()=>{const r=Og("axis",t,e,n),s=Og("tensors",t,e,n),a=s[0].shape,i=s[0].squeeze().shape,o=s.map(t=>{const e=C(t.shape,a);if(!e&&!C(t.squeeze().shape,i))throw new Error("the input tensors shape does not match");return e?t:t.reshape(a)});return[Es(o,r)]});case"Unpack":return ni(()=>{const r=Og("axis",t,e,n),s=Og("tensor",t,e,n);return Fl(s,r)});case"Tile":{const r=Og("reps",t,e,n);return[_n(Og("x",t,e,n),r)]}case"Split":case"SplitV":{const r=Og("axis",t,e,n),s=Og("numOrSizeSplits",t,e,n),a=Og("x",t,e,n);return nn(a,s,r)}case"ScatterNd":{const r=Og("indices",t,e,n),s=Og("values",t,e,n),a=Og("shape",t,e,n);return[nu(r,s,a)]}case"GatherNd":{const r=Og("x",t,e,n),s=Og("indices",t,e,n);return[su(r,s)]}case"SparseToDense":{const r=Og("sparseIndices",t,e,n),s=Og("outputShape",t,e,n),a=Og("sparseValues",t,e,n),i=Og("defaultValue",t,e,n);return[ru(r,a,s,a.dtype===i.dtype?i:i.asType(a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"spectral":return ni(()=>((t,e,n)=>{switch(t.op){case"FFT":return[Ji(Og("x",t,e,n))];case"IFFT":return[Qi(Og("x",t,e,n))];case"RFFT":return[pl(Og("x",t,e,n))];case"IRFFT":return[no(Og("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"transformation":return ni(()=>((t,e,n)=>{switch(t.op){case"Cast":return[Vt(Og("x",t,e,n),Og("dtype",t,e,n))];case"ExpandDims":{const r=Og("axis",t,e,n);return[Is(Og("x",t,e,n),r)]}case"Squeeze":{const r=Og("axis",t,e,n);return[kl(Og("x",t,e,n),r)]}case"Reshape":return[de(Og("x",t,e,n),Og("shape",t,e,n))];case"PadV2":case"Pad":return[Wr(Og("x",t,e,n),Og("padding",t,e,n),Og("constantValue",t,e,n))];case"SpaceToBatchND":{const r=Og("blockShape",t,e,n),s=Og("paddings",t,e,n);return[He(Og("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=Og("blockShape",t,e,n),s=Og("crops",t,e,n);return[os(Og("x",t,e,n),r,s)]}case"DepthToSpace":{const r=Og("blockSize",t,e,n),s=Og("dataFormat",t,e,n).toUpperCase();return[Wi(Og("x",t,e,n),r,s)]}case"BroadcastTo":return[Ti(Og("x",t,e,n),Og("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"custom":const r=Fg(t.op);if(r&&r.customExecutor)return r.customExecutor(new by(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return r instanceof Promise?r.then(t=>[].concat(t)):[].concat(r)}class Sy{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose();for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose()}}function ky(t,e,n){const r=new Set,s=[];let a=null,i=null;const o=new Set,l=Object.keys(t).map(t=>Bg(t)[0]),u=[...e];for(;u.length>0;){const t=u.pop();(Ay(t)||Ty(t))&&null==a&&(a=t,i=a.children.map(t=>t.name).filter(t=>r.has(t))),r.add(t.name),null==n[t.name]&&(-1===l.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach(t=>{o.has(t.name)||(o.add(t.name),u.push(t))}):s.push(t.name)))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:s,dynamicNode:a,syncInputs:i}}const Iy=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Ey=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function Ay(t){return Iy.indexOf(t.op)>=0}function Ty(t){return Ey.indexOf(t.op)>=0}class $y{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new $y(t.functions[e],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),r=e.map(t=>t.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=ky(t,e,this.weightMap),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map(t=>t.name),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[];Object.keys(s).map(t=>Bg(t)[0]).map(e=>t.nodes[e]).forEach(t=>{r.has(t.name)&&a.push(t)}),t.weights.forEach(t=>{r.has(t.name)&&a.push(t)});const i=new Set,o=[];for(;a.length>0;){const t=a.pop();i.add(t.name),e[t.name]||o.push(t),t.children.forEach(t=>{!i.has(t.name)&&r.has(t.name)&&t.inputs.every(t=>i.has(t.name))&&a.push(t)})}return o}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map(t=>this.graph.nodes[Bg(t)[0]]),s=e.map(t=>this.graph.nodes[Bg(t)[0]]),a=this.getCompilationKey(r,s);let i=this.compiledMap.get(a);null==i&&(i=this.compile(t,s),this.compiledMap.set(a,i));const o={},l={};return ni(()=>{const n=new Sy(this.weightMap,o,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,s]=Bg(e),a=[];a[s]=t[e],r[n]=a});const s=this.getFrozenTensorIds(r),a={};for(let t=0;t<i.length;t++){const o=i[t];if(!r[o.name]){const t=Cy(o,r,n);if(t instanceof Promise)throw new Error(`The execution of the op '${o.op}' returned a promise. Please use model.executeAsync() instead.`);r[o.name]=t,this.checkTensorForDisposal(o.name,o,r,n,s,e,a)}}return null==this.parent&&n.dispose(),e.map(t=>Mg(t,r,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)}),e.inputs.forEach(t=>{if("control"!==t.category){const e=function(t,e,n){return e[Lg(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach(t=>{if(t&&!s.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,r={},s={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const a=new Sy(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(t,a,e,n),o=e.map(t=>Mg(t,i,a)),l=new Set(o.map(t=>t.id)),u=new Set(Object.keys(t).map(e=>t[e].id));return Object.keys(i).forEach(t=>{i[t].forEach(t=>{!t||t.isDisposed||l.has(t.id)||u.has(t.id)||-1!==this.weightIds.indexOf(t.id)||t.dispose()})}),null==this.parent&&a.dispose(),o}async executeFunctionAsync(t,e,n){const r=t.reduce((t,e,n)=>(t[this.inputs[n].name]=e,t),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),a=s.map(t=>this.graph.nodes[Bg(t)[0]]),i=n.map(t=>this.graph.nodes[Bg(t)[0]]),{usedNodes:o,missingInputs:l,dynamicNode:u,syncInputs:c}=ky(t,i,this.weightMap),h=[...a,...this.graph.weights].map(t=>({node:t,contexts:e.currentContext})),p=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=Bg(e),s=[];s[r]=t[e],p[n]=s});const d={},f=this.getFrozenTensorIds(p),m={};for(;h.length>0;){const t=this.processStack(a,h,e,p,m,f,n,d,o);await Promise.all(t)}null!=u||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const g=i.filter(t=>!Ay(t)&&!Mg(t.name,p,e)).map(t=>t.name);if(g.length>0){let t="";throw null!=u&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${c}]`),new Error(`Cannot compute the outputs [${g}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${t}`)}return p}processStack(t,e,n,r,s,a,i,o,l){const u=[];for(;e.length>0;){const c=e.pop();n.currentContext=c.contexts;let h="";if("Enter"===c.node.op&&Og("isConstant",c.node,r,n)&&([h]=zg(c.node.name,n)),-1===t.indexOf(c.node)){const t=Cy(c.node,r,n);h||([h]=zg(c.node.name,n));const p=n.currentContext;t instanceof Promise?u.push(t.then(t=>(r[h]=t,n.currentContext=p,this.checkTensorForDisposal(h,c.node,r,n,a,i,o),this.processChildNodes(c.node,e,n,r,s,l),t))):(r[h]=t,this.checkTensorForDisposal(h,c.node,r,n,a,i,o),this.processChildNodes(c.node,e,n,r,s,l))}else this.processChildNodes(c.node,e,n,r,s,l)}return u}processChildNodes(t,e,n,r,s,a){t.children.forEach(t=>{const[i]=zg(t.name,n);!s[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!Mg(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!Mg(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const n=t[e],[r]=Bg(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value;b(t.length===n.shape.length&&n.shape.every((e,n)=>-1===t[n]||t[n]===e),()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&b(n.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=Bg(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[e]=Bg(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)})}}class Ry{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=Aa(t,this.loadOptions);else{const e=Js(t,this.loadOptions);if(0===e.length)e.push(Aa(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=Ws(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new $y(ry.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),!0}async save(t,e){if("string"==typeof t){const e=Ys(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof mt||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,n,r)=>(e[n]=t[r],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,n)=>(e[n]=[t[n]],e),{})}dispose(){this.executor.dispose()}}function Dy(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(My(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const a in t){const i=Dy(t[a],e,n,r);s[a]=i}return r.delete(t),s}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,s.value),s.value}function _y(t,e=Fy){return function t(e,n,r=new Set){const s=e[0];if(r.has(s))throw new Error("Circular references are not supported.");const a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(My(s)){const a=Array.isArray(s)?[]:{};r.add(s);for(const i in s){const s=e.map(t=>t[i]),o=t(s,n,r);a[i]=o}return r.delete(s),a}throw new Error("Can't recurse into non-iterable type: "+s)}return a.value}(t,e)}function Fy(t){return null===t?null:My(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function Oy(t,e){const n=new Map;Dy(t,e,n);for(const t of Array.from(n.keys())){const e=n.get(t);if(e instanceof Promise){const r=await e;n.set(t,r)}}return Dy(t,e,n)}function My(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof mt))}function zy(t){return function(t,e){return Dy(t,e)}(t,Ly)}function Ly(t){return t instanceof mt?{value:t.clone(),recurse:!1}:My(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class By{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class Py extends By{constructor(){super(Py.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function Wy(t){return new Gy(t)}function Vy(t){return new Hy(t)}Py.INITIAL_CAPACITY=32;class Uy{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new Zy(this,t)}filter(t){return new Yy(this,t)}map(t){return new Jy(this,t)}mapAsync(t){return new Qy(this,t)}serialMapAsync(t){return new Qy(this,t).serial()}flatmap(t){return new eb(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t,e=!0){return new Xy(this,t,e)}columnMajorBatch(t,e=!0,n=Fy){return this.rowMajorBatch(t,e).map(t=>_y(t,n))}concatenate(t,e){return new nb(Wy([this,t]),e)}take(t){return t<0||null==t?this:new Ky(this,t)}skip(t){return t<0||null==t?this:new jy(this,t)}prefetch(t){return new ab(this,t)}shuffle(t,e){return new ib(this,t,e)}serial(){return new qy(this)}}class Gy extends Uy{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:zy(t),done:!1}}}class Hy extends Uy{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class qy extends Uy{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class jy extends Uy{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;ri(t.value)}return this.upstream.next()}}class Ky extends Uy{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Xy extends Uy{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class Yy extends Uy{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;ri(t.value)}}}class Jy extends Uy{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=At(t.value),n=this.transform(t.value),r=At(n);for(const t of e)Et(t,r)||t.dispose();return{value:n,done:!1}}}class Zy extends Uy{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class Qy extends Uy{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=At(t.value),n=await this.transform(t.value),r=At(n);for(const t of e)Et(t,r)||t.dispose();return{value:n,done:!1}}}class tb extends Uy{constructor(){super(),this.outputQueue=new Py,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class eb extends tb{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=At(t.value),n=this.transform(t.value),r=At(n);this.outputQueue.pushAll(n);for(const t of e)Et(t,r)||t.dispose();return!0}}class nb extends Uy{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var rb;!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(rb||(rb={}));class sb extends Uy{constructor(t,e=rb.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(t){await t;let e=0,n=0;const r=await Oy(this.iterators,(function(t){if(t instanceof Uy){return{value:t.next().then(t=>(e++,t.done&&n++,t.value)),recurse:!1}}return{value:null,recurse:!0}}));if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case rb.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case rb.SHORTEST:return{value:null,done:!0};case rb.LONGEST:}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class ab extends Uy{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new By(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class ib extends ab{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=Yo(n||Z().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class ob{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return b(t>0,()=>"batchSize needs to be positive, but it is\n      "+t),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),lb(async()=>(await n.iterator()).columnMajorBatch(t,e,ub),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,lb(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,lb(async()=>(await e.iterator()).filter(e=>ni(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return lb(async()=>(await e.iterator()).map(e=>ni(()=>t(e))),this.size)}mapAsync(t){const e=this;return lb(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return lb(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,lb(async()=>{const n=Vy(async()=>({value:await e.iterator(),done:!1}));return r=n.take(t),new nb(r,s);var r,s},n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,lb(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=Yo(e||Z().toString());return lb(async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,lb(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function lb(t,e=null){return new class extends ob{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function ub(t){if(null===t)return null;const e=t[0];if(null==(n=e)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof mt||z(n)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof mt?Es(t):hs(t)}(t),recurse:!1}}var n,r;return{value:null,recurse:!0}}ob.MAX_BUFFER_SIZE=1e4;class cb extends ob{constructor(t){super(),this.input=t}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(t=>(t.endsWith("\r")&&(t=t.slice(0,-1)),t))}}const hb=Symbol("out"),pb=Symbol("field"),db=Symbol("quote"),fb=Symbol("quoteafterquote"),mb=Symbol("quoteinquote");class gb extends ob{constructor(t,e){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new cb(t),e||(e={}),this.hasHeader=!1!==e.hasHeader,this.fullColumnNames=e.columnNames,this.columnConfigs=e.columnConfigs,this.configuredColumnsOnly=e.configuredColumnsOnly,e.delimWhitespace?(b(null==e.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=e.delimiter?e.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const t=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&t&&b(t.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=t);const e=this.fullColumnNames.reduce((t,e)=>(t[e]=t[e]+1||1,t),{}),n=Object.keys(e).filter(t=>e[t]>1);if(b(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const t of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(t))throw new Error('The key "'+t+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const t=await this.base.iterator(),e=await t.next();if(e.done)throw new Error("No data was found for CSV parsing.");const n=e.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let t=await this.base.iterator();return this.hasHeader&&(t=t.skip(1)),t.map(t=>this.makeDataElement(t))}makeDataElement(t){const e=this.parseRow(t),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=e[s];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${t}`);l=void 0}else{const t=Number(o);if(isNaN(t))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=t;break;case"int32":l=Math.floor(t);break;case"bool":l=this.getBoolean(o);break;default:l=t}else l=t}i&&i.isLabel?r[a]=l:n[a]=l}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(t){return"1"===t||"true"===t.toLowerCase()?1:0}parseRow(t,e=!0){const n=[];let r=0;const s=t.length;let a=hb;for(let e=0;e<s;e++)switch(a){case hb:switch(t.charAt(e)){case'"':r=e+1,a=db;break;case this.delimiter:if(r=e+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=hb;break;default:a=pb,r=e}break;case pb:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(r,e)),a=hb,r=e+1}break;case db:switch(t.charAt(e)){case'"':a=fb}break;case fb:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(r,e-1)),a=hb,r=e+1;break;case'"':a=db;break;default:a=mb}break;case mb:switch(t.charAt(e)){case'"':a=db}}if(a===fb?n.push(t.substring(r,s-1)):n.push(t.substring(r)),e&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class yb extends Uy{constructor(t){super(),this.microphoneConfig=t,this.isClosed=!1,this.fftSize=t.fftSize||1024;const e=Math.log2(this.fftSize);if(this.fftSize<0||e<4||e>14||!Number.isInteger(e))throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got "+this.fftSize);if(this.numFrames=t.numFramesPerSpectrogram||43,this.sampleRateHz=t.sampleRateHz,this.columnTruncateLength=t.columnTruncateLength||this.fftSize,this.audioTrackConstraints=t.audioTrackConstraints,this.smoothingTimeConstant=t.smoothingTimeConstant||0,this.includeSpectrogram=!1!==t.includeSpectrogram,this.includeWaveform=!0===t.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(t={}){if(n().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const e=new yb(t);return await e.start(),e}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(t){throw new Error("Error thrown while initializing video stream: "+t.message)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const t=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new t,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: `+this.audioContext.sampleRate)}else this.sampleRateHz=this.audioContext.sampleRate;const e=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,e.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let t,e;const n=await this.getAudioData();if(this.includeSpectrogram){const e=this.flattenQueue(n.freqDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const t=this.flattenQueue(n.timeDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:t,waveform:e},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const t=[],e=[];let n=0;return new Promise(r=>{const s=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:t,timeDataQueue:e}),t.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),e.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:t,timeDataQueue:e}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(t){const e=t[0].length,n=new Float32Array(t.length*e);return t.forEach((t,r)=>n.set(t,r*e)),n}getTensorFromAudioDataArray(t,e){const n=new Float32Array(N(e));return n.set(t,n.length-t.length),hs(n,e)}}class bb extends Uy{constructor(t,e){if(super(),this.webcamVideoElement=t,this.webcamConfig=e,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=rl([0],"int32"),this.webcamConfig.centerCrop){const t=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,e=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-t)/2,r=(1-e)/2,s=n+t,a=e+r;this.cropBox=Al([r,n,a,s],[1,4])}else this.cropBox=Al([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(t,e={}){if(n().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!e.resizeWidth||!e.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=e.resizeWidth,t.height=e.resizeHeight}const r=new bb(t,e);return await r.start(),r}async start(){this.webcamConfig.facingMode&&b("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(t){throw t.message="Error thrown while initializing video stream: "+t.message,t}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(t=>{this.webcamVideoElement.onloadedmetadata=()=>{t()}})}async next(){if(this.isClosed)return{value:null,done:!0};let t;try{t=za(this.webcamVideoElement)}catch(t){throw new Error("Error thrown converting video to pixels: "+JSON.stringify(t))}if(!this.resize)return{value:t,done:!1};try{return{value:this.cropAndResizeFrame(t),done:!1}}catch(t){throw new Error("Error thrown cropping the video: "+t.message)}finally{t.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(t){return ni(()=>{const e=t.toFloat().expandDims(0);let n;n=rc.cropAndResize(e,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const r=n.shape;return n.reshape(r.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(t=>t.stop());try{this.webcamVideoElement.srcObject=null}catch(t){console.log(t),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class xb{}class wb extends Uy{split(t){return new vb(this,t)}}class vb extends wb{constructor(t,e){super(),this.upstream=t,this.impl=new Nb(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Nb extends tb{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const t=await this.upstream.next();if(t.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const t of e.slice(0,-1))this.outputQueue.push(t);return this.carryover=e[e.length-1],!0}}class Cb extends Uy{decodeUTF8(){return new Sb(this)}}class Sb extends wb{constructor(t){super(),this.upstream=t,this.impl=new kb(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class kb extends tb{constructor(t){if(super(),this.upstream=t,n().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=require("string_decoder");this.decoder=new t("utf8")}}summary(){return this.upstream.summary()+" -> Utf8"}async pump(){const t=await this.upstream.next();let e,r;return!t.done&&(e=t.value,r=n().get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(Buffer.from(e.buffer)),this.outputQueue.push(r),!0)}}class Ib extends Cb{constructor(t,e={}){super(),this.file=t,this.options=e,b(t instanceof Uint8Array||!!n().get("IS_BROWSER")&&(t instanceof File||t instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=e.offset||0,this.chunkSize=e.chunkSize||1048576}summary(){return"FileChunks "+this.file}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const t=new Promise((t,e)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)t(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(s)},r.onabort=t=>e(new Error("Aborted")),r.onerror=t=>e(new Error(t.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n});return{value:await t,done:!1}}}const Eb=t=>({method:t.method,headers:t.headers,body:t.body,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,referrer:t.referrer,integrity:t.integrity});function Ab(t){return"string"==typeof t&&"file://"===t.substr(0,7)}class Tb extends xb{constructor(t,e={}){super(),this.input=t,this.options=e}async iterator(){if(Ab(this.input)&&n().get("IS_NODE")){const t=require("fs");this.input=t.readFileSync(this.input.substr(7))}return new Ib(this.input,this.options)}}class $b extends xb{constructor(t,e={}){super(),this.url=t,this.fileOptions=e}async iterator(){return Ab(this.url)?new Tb(this.url,this.fileOptions).iterator():async function(t,e={}){let n,r;"string"==typeof t?n=t:(n=t.url,r=Eb(t));const s=await tt(n,r);if(s.ok){const t=new Uint8Array(await s.arrayBuffer());return new Ib(t,e)}throw new Error(s.statusText)}(this.url,this.fileOptions)}}var Rb=Object.freeze({__proto__:null,array:function(t){return lb(async()=>Wy(t),t.length)},Dataset:ob,zip:function(t){if(!My(t))throw new Error("The argument to zip() must be an object or array.");let e;if(Array.isArray(t))for(let n=0;n<t.length;n++)e=null==e?t[n].size:Math.min(e,t[n].size);else if(t instanceof Object)for(const n in t)e=null==e?t[n].size:Math.min(e,t[n].size);return lb(async()=>function(t,e=rb.FAIL){return new sb(t,e)}(await Oy(t,t=>{if(t instanceof ob)return{value:t.iterator(),recurse:!1};if(My(t))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),rb.SHORTEST),e)},CSVDataset:gb,TextLineDataset:cb,csv:function(t,e={}){return new gb(new $b(t),e)},func:function(t){const e=Vy(t);return lb(async()=>e)},generator:function(t){return lb(async()=>{const e=await t();return Vy(()=>e.next())})},microphone:async function(t){return yb.create(t)},webcam:async function(t,e){return bb.create(t,e)},FileDataSource:Tb,URLDataSource:$b,version_data:"2.1.0"});function Db(t,e,n,r){const s=D(r,N(n));for(let n=0;n<s.length;++n){const r=n*e;let a=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>a&&(a=e)}s[n]=a}return s}function _b(t,e,n,r,s){const a=e.length,i=N(e),o=q(e),l=q(s),u=D(n,N(s));for(let e=0;e<i;++e){const n=st(e,a,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];u[rt(s,a,l)]=t[e]}return u}var Fb=Object.freeze({__proto__:null,maxImpl:Db,transposeImpl:_b});function Ob(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&b("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}function Mb(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=$i(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),N=Math.min(s.inHeight,c+w),C=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<N;n+=l){const s=m+n*r[1];for(let n=c;n<p;n+=u){const i=t[s+n*r[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[C+n*x+e]="avg"===a?b/w:y}}}return m}function zb(t,e,n,r,s=!1,a=!1){const i=$i(r.outShape,"int32"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=$i(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(t,n,o,e);u>w&&(w=u,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*p+l)}}i.set(v,t,n,o,e)}}return i}const Lb=Eu,Bb=Lc,Pb=Bc,Wb=Pc,Vb=Ml;function Ub(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class Gb extends Uc{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Vc(this,ti())}write(t,e,r){this.firstUse&&(this.firstUse=!1,n().get("IS_NODE")&&kc("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:t,dtype:r}),s}move(t,e,n,r){this.data.set(t,{values:e,dtype:r})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){return Ic(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>nt(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return $i(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return ti().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}async time(t){const e=Z();return t(),{kernelMs:Z()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:ti().keep(t.clone()),imag:ti().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(Ob(t,"slice"),Qr(t.shape,e,n)){const r=ts(e,t.strides),s=N(n);return hs(this.readSync(t.dataId).subarray(r,r+s),n,t.dtype)}const r=$i(n,t.dtype),s=this.bufferSync(t);for(let t=0;t<r.size;++t){const n=r.indexToLoc(t).map((t,n)=>t+e[n]);r.values[t]=s.get(...n)}return r.toTensor()}stridedSlice(t,e,n,r){Ob(t,"stridedSlice");const s=Gr(e,n,r);if(s.some(t=>0===t))return hs([],s);const a=$i(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=$i([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}reverse(t,e){Ob(t,"reverse");const n=$i(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(r.get(...i),...a)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>eo(t)),r=t.map(t=>to(t));return hr(this.concat(n,e),this.concat(r,e))}const n=t.map(t=>{const n=N(t.shape.slice(e));return t.as2D(-1,n)}),r=cs(n.map(t=>t.shape),1),s=$i(r,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach(e=>{s.set(this.readSync(e.dataId),t),t+=e.size})}else{let t=0;n.forEach(e=>{const n=this.readSync(e.dataId);let a=0;for(let i=0;i<e.shape[0];++i){const o=i*r[1]+t;for(let t=0;t<e.shape[1];++t)s[o+t]=n[a++]}t+=e.shape[1]})}const a=cs(t.map(t=>t.shape),e);return hs(s,a,t[0].dtype)}neg(t){return Ob(t,"neg"),this.multiply(Yt(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t+n,imag:e+r})):this.broadcastedBinaryOp(t,e,Ct(t.dtype,e.dtype),(t,e)=>t+e)}addN(t){Ob(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=$i(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=$([e],t.shape),r=mo(t,n),s=ye(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return jt(i,o)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t-n,imag:e-r})):this.broadcastedBinaryOp(t,e,Ct(t.dtype,e.dtype),(t,e)=>t-e)}pow(t,e){return Ob([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,r){Ob([t,e],"matMul");const s=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],o=t.shape[0],l=this.readSync(t.dataId),u=this.readSync(e.dataId),[c,h,p]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[d,f,m]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,y=$i([o,a,i],t.dtype),b=y.values,x=this.blockSize;for(let t=0;t<o;t++)for(let e=0;e<a;e+=x)for(let n=0;n<i;n+=x)for(let r=0;r<s;r+=x){const o=Math.min(e+x,a),y=Math.min(n+x,i),w=Math.min(r+x,s);for(let s=e;s<o;s++)for(let e=n;e<y;e++){let n=0;for(let a=r;a<w;a++)n+=l[t*c+s*h+a*p]*u[a*d+e*f+t*m];b[t*g+(s*i+e)]+=n}}return y.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,r);return s&&(o=this.add(o,s)),a&&(o=Ub(this,o,a,i)),o}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})):this.broadcastedBinaryOp(t,e,Ct(t.dtype,e.dtype),(t,e)=>t*e)}floorDiv(t,e){Ob([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){Ob(t,"sum"),be("sum",e,t.rank);const[n,r]=ge(t.shape,e),s=pr(n,Ct(t.dtype,"int32")),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return s}prod(t,e){Ob(t,"sum");const[n,r]=ge(t.shape,e),s=pr(n,Ct(t.dtype,"int32")),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return s}unsortedSegmentSum(t,e,n){Ob(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=Yt(s,"int32"),a=Xn(n,e).asType("float32").mul(t).sum(0);r.push(a)}return Es(r)}argMin(t,e){Ob(t,"argMin");const n=[e];be("argMin",n,t.rank);const[r,s]=ge(t.shape,n),a=pr(r,"int32"),i=N(s),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const s=l[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){Ob(t,"argMax");const n=[e];be("argMax",n,t.rank);const[r,s]=ge(t.shape,n),a=pr(r,"int32"),i=N(s),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const s=l[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(Ob(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=Ct(t.dtype,"int32"),a=pr(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),l=t.shape[t.rank-1],u=r?(t,e)=>t+l-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=l)for(let e=0;e<l;e++){const r=u(t,e);if(0===e)i[r]=n?0:o[r];else{const s=u(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return Ob([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return Ob([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return Ob([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return Ob([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return Ob([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return Ob([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalNot(t){Ob(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n[t]=e[t]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return Ob([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return Ob([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){Ob([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=pr(e.shape,Ct(e.dtype,n.dtype)),o=this.readSync(i.dataId);let l=0;const u=0===t.rank||t.rank>1||1===e.rank?1:N(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<u;e++)1===r[t]?o[l++]=s[t]:o[l++]=a[t];return i}where(t){Ob([t],"where");const e=this.readSync(t.dataId);return Vb(t.shape,e)}topk(t,e,n){Ob(t,"topk");const r=this.readSync(t.dataId);return Wb(r,t.shape,t.dtype,e)}min(t,e){Ob(t,"min"),be("min",e,t.rank);const[n,r]=ge(t.shape,e),s=pr(n,t.dtype),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return Ob([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return Ob([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return Ob([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){Ob(t,"all"),be("all",e,t.rank);const[n,r]=ge(t.shape,e),s=pr(n,t.dtype),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){Ob(t,"any"),be("any",e,t.rank);const[n,r]=ge(t.shape,e),s=pr(n,t.dtype),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return Ob([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}ceil(t){Ob(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.ceil(e[t]);return this.makeOutput(n,t.shape,"float32")}floor(t){Ob(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.floor(e[t]);return this.makeOutput(n,t.shape,"float32")}sign(t){Ob(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)e[t]<0?n[t]=-1:e[t]>0?n[t]=1:n[t]=0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){Ob(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isNaN(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){Ob(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Math.abs(e[t])===1/0&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){Ob(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isFinite(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}round(t){Ob(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=Math.floor(e[t]);e[t]-r<.5?n[t]=Math.floor(e[t]):e[t]-r>.5?n[t]=Math.ceil(e[t]):n[t]=r%2==0?r:r+1}return this.makeOutput(n,t.shape,"float32")}exp(t){Ob(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.exp(e[t]);return this.makeOutput(n,t.shape,"float32")}expm1(t){Ob(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.expm1(e[t]);return this.makeOutput(n,t.shape,"float32")}log(t){Ob(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log(r)}return this.makeOutput(n,t.shape,"float32")}log1p(t){Ob(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log1p(r)}return this.makeOutput(n,t.shape,"float32")}sqrt(t){Ob(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}rsqrt(t){Ob(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=1/Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}reciprocal(t){Ob(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=1/e[t];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){Ob(t,"relu");const e=pr(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.max(0,r[t]);return e}relu6(t){Ob(t,"relu");const e=pr(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.min(Math.max(0,r[t]),6);return e}prelu(t,e){return Ob([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}elu(t){Ob(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?r:Math.exp(r)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){Ob([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){Ob(t,"selu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?1.0507009873554805*r:1.7580993408473768*(Math.exp(r)-1)}return this.makeOutput(e,t.shape,"float32")}clip(t,e,n){Ob(t,"clip");const r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,"float32")}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r){const t=n[2*r],s=n[2*r+1];e[r]=Math.hypot(t,s)}return this.makeOutput(e,t.shape,"float32")}int(t){Ob(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=n[t];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){Ob(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=1/(1+Math.exp(-n[t]));return this.makeOutput(e,t.shape,"float32")}softplus(t){Ob(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t]>-e,a=r[t]<e,i=Math.exp(r[t]);let o;o=a?i:s?r[t]:Math.log(1+i),n[t]=o}return this.makeOutput(n,t.shape,"float32")}sin(t){Ob(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sin(n[t]);return this.makeOutput(e,t.shape,"float32")}cos(t){Ob(t,"cos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cos(n[t]);return this.makeOutput(e,t.shape,"float32")}tan(t){Ob(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.tan(n[t]);return this.makeOutput(e,t.shape,"float32")}asin(t){Ob(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asin(n[t]);return this.makeOutput(e,t.shape,"float32")}acos(t){Ob(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acos(n[t]);return this.makeOutput(e,t.shape,"float32")}atan(t){Ob(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atan(n[t]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return Ob([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}sinh(t){Ob(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sinh(n[t]);return this.makeOutput(e,t.shape,"float32")}cosh(t){Ob(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cosh(n[t]);return this.makeOutput(e,t.shape,"float32")}tanh(t){Ob(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=k(n[t]);return this.makeOutput(e,t.shape,"float32")}asinh(t){Ob(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asinh(n[t]);return this.makeOutput(e,t.shape,"float32")}acosh(t){Ob(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acosh(n[t]);return this.makeOutput(e,t.shape,"float32")}atanh(t){Ob(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atanh(n[t]);return this.makeOutput(e,t.shape,"float32")}erf(t){Ob(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=Math.sign(n[t]),s=Math.abs(n[t]),a=1/(1+.3275911*s);e[t]=r*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-s*s))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){Ob(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t];isNaN(s)?n[t]=NaN:n[t]=s>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),s&&(i=Ub(this,i,s,a)),i}conv2d(t,e,n){Ob([t,e],"conv2d");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u="channelsLast"===n.dataFormat,c=$i(n.outShape,t.dtype),h=t.strides[0],p=u?t.strides[1]:t.strides[2],d=u?t.strides[2]:1,f=u?1:t.strides[1],m=c.strides[0],g=u?c.strides[1]:c.strides[2],y=u?c.strides[2]:1,b=u?1:c.strides[1],x=this.readSync(t.dataId),w=this.readSync(e.dataId),v=c.values;for(let t=0;t<n.batchSize;++t){const u=t*h,c=t*m;for(let t=0;t<n.outHeight;++t){const h=c+t*g,m=t*n.strideHeight-l;for(let t=0;t<r;t++){const r=m+t*a;if(r<0||r>=n.inHeight)continue;const l=t*e.strides[0],c=u+r*p;for(let t=0;t<n.outWidth;++t){const r=h+t*y,a=t*n.strideWidth-o;for(let t=0;t<s;t++){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=c+s*d;let u=l+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=x[o+t*f];for(let t=0;t<n.outChannels;++t)v[r+t*b]+=e*w[u+t];u+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const r=n.filterDepth,s=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,l=n.dilationWidth,u=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,p=$i(n.outShape,t.dtype),d=this.readSync(t.dataId),f=this.readSync(e.dataId),m=p.values;for(let g=0;g<n.batchSize;++g){const y=g*t.strides[0],b=g*p.strides[0];for(let g=0;g<n.outDepth;++g){const x=b+g*p.strides[1],w=g*n.strideDepth-u;for(let u=0;u<r;u++){const r=w+u*i;if(r<0||r>=n.inDepth)continue;const g=u*e.strides[0],b=y+r*t.strides[1];for(let r=0;r<n.outHeight;++r){const i=x+r*p.strides[2],u=r*n.strideHeight-h;for(let r=0;r<s;r++){const s=u+r*o;if(s<0||s>=n.inHeight)continue;const h=g+r*e.strides[1],p=b+s*t.strides[2];for(let t=0;t<n.outWidth;++t){const r=i+t*n.outChannels,s=t*n.strideWidth-c;for(let t=0;t<a;t++){const a=s+t*l;if(a<0||a>=n.inWidth)continue;const i=h+t*e.strides[2],o=p+a*n.inChannels;let u=i;for(let t=0;t<n.inChannels;++t){const e=d[o+t];for(let t=0;t<n.outChannels;++t)m[r+t]+=e*f[u+t];u+=n.outChannels}}}}}}}}return p.toTensor()}conv2dDerInput(t,e,n){Ob([t,e],"conv2dDerInput");const r=$i(n.inShape,"float32"),s=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,l,u]=e.strides,{batchSize:c,filterHeight:h,filterWidth:p,inChannels:d,inHeight:f,inWidth:m,outChannels:g,outHeight:y,outWidth:b,strideHeight:x,strideWidth:w,dataFormat:v}=n,N=h-1-n.padInfo.top,C=p-1-n.padInfo.left,S="channelsLast"===v,k=r.strides[0],I=S?r.strides[1]:r.strides[2],E=S?r.strides[2]:1,A=S?1:r.strides[1],T=t.strides[0],$=S?t.strides[1]:t.strides[2],R=S?t.strides[2]:1,D=S?1:t.strides[1];for(let t=0;t<c;++t)for(let e=0;e<d;++e)for(let n=0;n<f;++n){const r=n-N,c=Math.max(0,Math.ceil(r/x)),d=Math.min(y,(h+r)/x);for(let f=0;f<m;++f){const m=f-C,y=Math.max(0,Math.ceil(m/w)),v=Math.min(b,(p+m)/w);let N=0;for(let n=c;n<d;++n){const s=n*x-r;for(let r=y;r<v;++r){const c=T*t+$*n+R*r,d=o*(h-1-s)+l*(p-1-(r*w-m))+u*e;for(let t=0;t<g;++t){N+=a[c+D*t]*i[d+t]}}}s[k*t+I*n+E*f+A*e]=N}}return r.toTensor()}conv3dDerInput(t,e,n){const r=$i(n.inShape,"float32"),s=r.values,[a,i,o,l]=r.strides,u=this.readSync(t.dataId),[c,h,p,d]=t.strides,f=this.readSync(e.dataId),[m,g,y,b]=e.strides,{batchSize:x,filterDepth:w,filterHeight:v,filterWidth:N,inChannels:C,inDepth:S,inHeight:k,inWidth:I,outChannels:E,outDepth:A,outHeight:T,outWidth:$,strideDepth:R,strideHeight:D,strideWidth:_}=n,F=w-1-n.padInfo.front,O=v-1-n.padInfo.top,M=N-1-n.padInfo.left;for(let t=0;t<x;++t)for(let e=0;e<C;++e)for(let n=0;n<S;++n){const r=n-F,x=Math.max(0,Math.ceil(r/R)),C=Math.min(A,(w+r)/R);for(let S=0;S<k;++S){const k=S-O,A=Math.max(0,Math.ceil(k/D)),F=Math.min(T,(v+k)/D);for(let T=0;T<I;++T){const I=T-M,O=Math.max(0,Math.ceil(I/_)),z=Math.min($,(N+I)/_);let L=0;for(let n=x;n<C;++n){const s=n*R-r;for(let r=A;r<F;++r){const a=r*D-k;for(let i=O;i<z;++i){const o=c*t+h*n+p*r+d*i,l=m*(w-1-s)+g*(v-1-a)+y*(N-1-(i*_-I))+b*e;for(let t=0;t<E;++t){L+=u[o+t]*f[l+t]}}}}s[a*t+i*n+o*S+l*T+e]=L}}}return r.toTensor()}conv2dDerFilter(t,e,n){Ob([t,e],"conv2dDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,l=$i(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((c-t)/r)),a=Math.min(n.outHeight,(n.inHeight+c-t)/r);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((u-d)/s)),f=Math.min(n.outWidth,(n.inWidth+u-d)/s);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let y=0;for(let l=0;l<n.batchSize;++l)for(let n=e;n<a;++n){const e=t+n*r-c;for(let t=i;t<f;++t){const r=d+t*s-u;y+=o?h.get(l,e,r,m)*p.get(l,n,t,g):h.get(l,m,e,r)*p.get(l,g,n,t)}}l.set(y,t,d,m,g)}}}return l.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=$i(n.filterShape,"float32"),c=u.values,[h,p,d,f]=u.strides,m=this.readSync(e.dataId),[g,y,b,x]=e.strides,w=this.readSync(t.dataId),[v,N,C,S]=t.strides,k=n.padInfo.front,I=n.padInfo.left,E=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((k-t)/r)),i=Math.min(n.outDepth,(n.inDepth+k-t)/r),u=t*h;for(let h=0;h<o;++h){const o=Math.max(0,Math.ceil((E-h)/s)),A=Math.min(n.outHeight,(n.inHeight+E-h)/s),T=h*p+u;for(let u=0;u<l;++u){const l=Math.max(0,Math.ceil((I-u)/a)),p=Math.min(n.outWidth,(n.inWidth+I-u)/a),$=u*d+T;for(let d=0;d<n.inChannels;++d){const T=d*f+$;for(let f=0;f<n.outChannels;++f){let $=0;for(let c=0;c<n.batchSize;++c){const n=c*v,T=c*g;for(let c=e;c<i;++c){const e=(t+c*r-k)*N+n,i=c*y+T;for(let t=o;t<A;++t){const n=(h+t*s-E)*C+e,r=t*b+i;for(let t=l;t<p;++t){const e=t*x+r;$+=w[(u+t*a-I)*S+n+d]*m[e+f]}}}}c[T+f]=$}}}}}return u.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),s&&(i=Ub(this,i,s,a)),i}depthwiseConv2D(t,e,n){Ob([t,e],"depthwiseConv2D");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u=n.outChannels/n.inChannels,c=$i(n.outShape,t.dtype),h=this.readSync(t.dataId),p=this.readSync(e.dataId),d=c.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*c.strides[0];for(let f=0;f<n.outHeight;++f){const y=g+f*c.strides[1],b=f*n.strideHeight-o;for(let o=0;o<r;++o){const r=b+o*a;if(r<0||r>=n.inHeight)continue;const f=o*e.strides[0],g=m+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=y+t*c.strides[2],a=t*n.strideWidth-l;for(let t=0;t<s;++t){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=f+t*e.strides[1],l=g+s*n.inChannels;let c=r,m=o;for(let t=0;t<n.inChannels;++t){const e=h[l+t];for(let t=0;t<u;++t)d[c+t]+=e*p[m+t];c+=u,m+=u}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){Ob([t,e],"depthwiseConv2DDerInput");const r=$i(n.inShape,"float32"),s=r.values,[a,i,o]=r.strides,l=this.readSync(t.dataId),[u,c,h]=t.strides,p=this.readSync(e.dataId),[d,f,m]=e.strides,{batchSize:g,filterHeight:y,filterWidth:b,inChannels:x,inHeight:w,inWidth:v,outChannels:N,outHeight:C,outWidth:S,strideHeight:k,strideWidth:I}=n,E=y-1-n.padInfo.top,A=b-1-n.padInfo.left,T=N/x;for(let t=0;t<g;++t)for(let e=0;e<x;++e)for(let n=0;n<w;++n){const r=n-E,g=Math.max(0,Math.ceil(r/k)),x=Math.min(C,(y+r)/k);for(let w=0;w<v;++w){const v=w-A,N=Math.max(0,Math.ceil(v/I)),C=Math.min(S,(b+v)/I);let E=0;for(let n=g;n<x;++n){const s=n*k-r;for(let r=N;r<C;++r){const a=u*t+c*n+h*r,i=d*(y-1-s)+f*(b-1-(r*I-v))+m*e;for(let t=0;t<T;++t){E+=l[a+(e*T+t)]*p[i+t]}}}s[a*t+i*n+o*w+e]=E}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){Ob([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=$i(n.filterShape,"float32"),l=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((u-t)/r)),a=Math.min(n.outHeight,(n.inHeight+u-t)/r);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((l-d)/s)),f=Math.min(n.outWidth,(n.inWidth+l-d)/s);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/c),y=m%c;let b=0;for(let o=0;o<n.batchSize;++o)for(let n=e;n<a;++n){const e=t+n*r-u;for(let t=i;t<f;++t){const r=d+t*s-l;b+=h.get(o,e,r,g)*p.get(o,n,t,m)}}o.set(b,t,d,g,y)}}}return o.toTensor()}tile(t,e){return Ob(t,"tile"),Pb(this.bufferSync(t),e)}pad(t,e,n){Ob(t,"pad");const r=e.map((e,n)=>e[0]+t.shape[n]+e[1]),s=e.map(t=>t[0]),a=this.bufferSync(t),i=$i(r,t.dtype);0!==n&&i.values.fill(n);for(let e=0;e<t.size;e++){const t=a.indexToLoc(e),n=t.map((t,e)=>t+s[e]);i.set(a.get(...t),...n)}return i.toTensor()}gather(t,e,n){Ob([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=$i(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){Ob([t],"batchToSpaceND");const r=e.reduce((t,e)=>t*e),s=wc(t.shape,e,r),a=vc(s.length,e.length),i=Nc(t.shape,e,r),o=Cc(n,e.length),l=Sc(i,n,e.length);return yn(t.reshape(s),a).reshape(i).slice(o,l)}spaceToBatchND(t,e,n){Ob([t],"spaceToBatchND");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=wc(a.shape,e,r,!1),o=vc(i.length,e.length,!1),l=Nc(a.shape,e,r,!1),u=yn(a.reshape(i),o);return de(u,l)}maxPool(t,e){return Ob(t,"maxPool"),Mb(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){Ob([e,n],"maxPoolBackprop");const s=this.readSync(e.dataId),a=$i(r.outShape,e.dtype,zb(s,e.shape,e.dtype,r).values),i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=h-1-r.padInfo.left,d=c-1-r.padInfo.top,f=$i(e.shape,"float32"),m=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inHeight;++n)for(let s=0;s<r.inWidth;++s){const g=n-d,y=s-p;let b=0;for(let n=0;n<c;n+=l){const s=(g+n)/i;if(!(s<0||s>=r.outHeight||Math.floor(s)!==s))for(let i=0;i<h;i+=u){const l=(y+i)/o;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const u=c*h-1-a.get(t,s,l,e)===n*h+i?1:0;0!==u&&(b+=m.get(t,s,l,e)*u)}}f.set(b,t,n,s,e)}return f.toTensor()}avgPoolBackprop(t,e,n){Ob([t,e],"avgPoolBackprop");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=n.dilationHeight,l=n.dilationWidth,u=n.effectiveFilterHeight,c=n.effectiveFilterWidth,h=c-1-n.padInfo.left,p=u-1-n.padInfo.top,d=$i(e.shape,"float32"),f=1/(a*i),m=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let a=0;a<n.inHeight;++a)for(let i=0;i<n.inWidth;++i){const g=a-p,y=i-h;let b=0;for(let a=0;a<u;a+=o){const i=(g+a)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<c;r+=l){const a=(y+r)/s;a<0||a>=n.outWidth||Math.floor(a)!==a||(b+=m.get(t,i,a,e))}}d.set(b*f,t,a,i,e)}return d.toTensor()}pool3d(t,e,n){Ob(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=$i(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],N=e.outShape[4];for(let y=0;y<e.batchSize;++y){const C=y*x,S=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const k=x*r-p;let I=k;for(;I<0;)I+=i;const E=Math.min(e.inDepth,u+k),A=C+x*w;for(let r=0;r<e.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const x=Math.min(e.inHeight,c+u),w=A+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let u=s;for(;u<0;)u+=l;const c=Math.min(e.inWidth,h+s),d=w+r*N;let v=m,C=0,k=0;for(let e=I;e<E;e+=i){const r=S+e*t.strides[1];for(let e=p;e<x;e+=o){const s=r+e*t.strides[2];for(let e=u;e<c;e+=l){const r=g[s+e*t.strides[3]+y];if("max"===n&&r>v?v=r:"avg"===n&&(C+=r,k++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?C/k:v}}}}return y.toTensor()}avgPool3d(t,e){return Ob(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){Ob([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=$i(e.shape,"float32"),x=1/(i*o*l),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let l=0;l<n.inWidth;++l){const v=i-m,N=o-y,C=l-g;let S=0;for(let i=0;i<p;i+=u){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<d;r+=c){const i=(N+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(C+r)/a;s<0||s>=n.outWidth||Math.floor(s)!==s||(S+=w.get(t,o,i,s,e))}}}b.set(S*x,t,i,o,l,e)}return b.toTensor()}maxPool3d(t,e){return Ob(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=$i(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,u+b);for(let r=0;r<e.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const v=Math.min(e.inHeight,c+u);for(let s=0;s<e.outWidth;++s){const d=s*a-f;let N=d;for(;N<0;)N+=l;const C=Math.min(e.inWidth,h+d);let S=Number.NEGATIVE_INFINITY,k=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let r=p;r<v;r+=o){const s=r-u;for(let a=N;a<C;a+=l){const i=a-d,o=m.get(t,e,r,a,g);o>=S&&(S=o,k=n*c*h+s*c+i)}}}n.set(k,t,y,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){Ob([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,l=r.dilationDepth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=d-1-r.padInfo.left,g=p-1-r.padInfo.top,y=$i(e.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,N=s-g,C=w-m;let S=0;for(let n=0;n<h;n+=l){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<p;a+=u){const l=(N+a)/i;if(!(l<0||l>=r.outHeight||Math.floor(l)!==l))for(let i=0;i<d;i+=c){const u=(C+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const c=h*p*d-1-b.get(t,s,l,u,e)===n*p*d+a*d+i?1:0;0!==c&&(S+=x.get(t,s,l,u,e)*c)}}}y.set(S,t,n,s,w,e)}return y.toTensor()}cast(t,e){return Fc(t,e,this)}reshape(t,e){return Oc(t,e)}avgPool(t,e){return Ob(t,"avgPool"),Ob(t,"maxPool"),Mb(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,r){Ob(t,"resizeBilinear");const[s,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(N([s,e,n,o])),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let p=0;const d=c[0]/h[0],f=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=d*s,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+c*t.strides[1],y=r*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*t.strides[2],d=y+r*t.strides[2],m=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=l[c+t],n=l[d+t],r=e+(l[m+t]-e)*s,a=r+(n+(l[b+t]-n)*s-r)*h;u[p++]=a}}}return hs(u,[s,e,n,o])}resizeBilinearBackprop(t,e,n){Ob([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&l>1?a-1:a],h=[n&&o>1?o-1:o,n&&l>1?l-1:l],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*p,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=r-o,b=1-y;for(let t=0;t<l;t++){const n=t*d,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,l=1-o,c=h+r*e.strides[2],p=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=b*l,N=b*o,C=y*l,S=y*o;for(let t=0;t<i;t++){const e=f[m++];u[c+t]+=e*v,u[p+t]+=e*N,u[x+t]+=e*C,u[w+t]+=e*S}}}}return Tl(u,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){Ob(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*t.strides[0];for(let c=0;c<e;c++){const e=p*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=d*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=l[s+t];u[f++]=e}}}}return hs(u,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){Ob([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&l>1?a-1:a],p=[n&&o>1?o-1:o,n&&l>1?l-1:l],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const p=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*e.strides[2],v=Math.floor(m*g),N=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let u=0;u<y;u++){const p=u+w;if(p<0||p>=o)continue;const g=r+p*t.strides[1],y=p*d;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+N;if(s<0||s>=l)continue;const o=g+s*t.strides[2],u=s*f;m===Math.min(a-1,n?Math.round(u):Math.floor(u))&&(i+=c[o+e])}}u[x+e]=i}}}}return Tl(u,e.shape,e.dtype)}batchNorm(t,e,n,r,s,a){Ob([t,e,n,s,r],"batchNorm");const i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=this.readSync(n.dataId),u=s?this.readSync(s.dataId):new Float32Array([1]),c=r?this.readSync(r.dataId):new Float32Array([0]),h=new Float32Array(i.length),p=c.length,d=u.length,f=l.length,m=o.length;let g=0,y=0,b=0,x=0;for(let t=0;t<i.length;++t)h[t]=c[g++]+(i[t]-o[y++])*u[b++]/Math.sqrt(l[x++]+a),g>=p&&(g=0),y>=m&&(y=0),b>=d&&(b=0),x>=f&&(x=0);return Tl(h,t.shape)}localResponseNormalization4D(t,e,n,r,s){Ob(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),l=t.size,u=new Float32Array(l);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let l=0;for(;r<=s;r++){const t=o[r];l+=t*t}return l}for(let t=0;t<l;t++){const e=c(t),a=o[t]*Math.pow(n+r*e,-s);u[t]=a}return Tl(u,t.shape)}LRNGrad(t,e,n,r,s,a,i){Ob(t,"LRNGrad");const o=t.shape[3],l=this.readSync(t.dataId),u=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),p=t.size;for(let t=0;t<p;t++){const e=t%o,n=t-e+Math.max(0,e-r),p=t-e+Math.min(o,e+r+1);let d=0;for(let t=n;t<p;t++)d+=Math.pow(u[t],2);d=a*d+s;for(let e=n;e<p;e++){let n=-2*a*i*u[e]*c[t]/d;t===e&&(n+=Math.pow(d,-i)),n*=l[t],h[e]+=n}}return Tl(h,t.shape)}multinomial(t,e,n,r){Ob(t,"multinomial");const s=e?t:Nl(t),a=s.shape[0],i=s.shape[1],o=pr([a,n],"int32"),l=this.readSync(o.dataId),u=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=u[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+u[e+t];const a=Yo(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();l[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){l[o+t]=n;break}}}return o}oneHot(t,e,n,r){Ob(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return Al(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){Ob(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return Lb(a,i,n,r,s)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],s=$i(t.shape,"float32"),a=$i(t.shape,"float32"),i=eo(t).as2D(n,r),o=to(t).as2D(n,r);for(let t=0;t<n;t++){const n=i.slice([t,0],[1,r]),l=o.slice([t,0],[1,r]),u=hr(n,l),c=this.readSync(this.fftImpl(u,e).dataId);for(let e=0;e<r;e++){const n=$c(c,e);s.values[t*r+e]=n.real,a.values[t*r+e]=n.imag}}return hr(s.toTensor(),a.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let s=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(s=hr(eo(s).div(Yt(r)),to(s).div(Yt(r)))),s}{const n=this.readSync(t.dataId),s=Ec(this.fourierTransformByMatmul(n,r,e));return hr(s.real,s.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),s=e/2,a=Ac(r);let i=hr(a.real,a.imag).as1D();const o=Tc(r);let l=hr(o.real,o.imag).as1D();i=this.fftRadix2(i,s,n),l=this.fftRadix2(l,s,n);const u=Dc(e,n),c=hr(u.real,u.imag).mul(l),h=i.add(c),p=i.sub(c),d=eo(h).concat(eo(p)),f=to(h).concat(to(p));return hr(d,f).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=_c(s*r,e,n),l=$c(t,r);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=e,i/=e),Rc(r,a,i,s)}return r}depthToSpace(t,e,n){b("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),b(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,l=a*e,u=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(r*o*l*u);let p=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<l;++n){const l=Math.floor(n/e),d=(o*e+n%e)*u;for(let e=0;e<u;++e){const n=e+d+i*(l+a*(r+s*t));h[p++]=c[n]}}}return Tl(h,[r,o,l,u])}broadcastedBinaryOp(t,e,n,r){const s=se(t.shape,e.shape),a=$i(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=ne(t.shape,s),u=ne(e.shape,s),c=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-t.rank);l.forEach(t=>d[t]=0);const f=n.locToIndex(d),m=p.slice(-e.rank);u.forEach(t=>m[t]=0);const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=se(t.shape,e.shape),s=$i(r,"float32"),a=$i(r,"float32"),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=ne(t.shape,r),u=ne(e.shape,r),c=s.values,h=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;t++){const e=t%i.length,r=t%o.length,s=n(i[2*e],i[2*e+1],o[2*r],o[2*r+1]);c[t]=s.real,h[t]=s.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),a=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let p=0;p<c.length;p++){const d=s.indexToLoc(p),f=d.slice(-t.rank);l.forEach(t=>f[t]=0);const m=r.locToIndex(f),g=d.slice(-e.rank);u.forEach(t=>g[t]=0);const y=a.locToIndex(g),b=n(i[2*m],i[2*m+1],o[2*y],o[2*y+1]);c[p]=b.real,h[p]=b.imag}}return this.complex(s.toTensor(),a.toTensor())}split(t,e,n){return Bb(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,l,u]=t.shape,c=e.shape[0],[h,p]=r,d=$i([c,h,p,u],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=d.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],r=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,N=p>1?(x-r)*(l-1)/(p-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let r=0;r<u;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?r*(l-1)+i*N:.5*(r+x)*(l-1);if(c<0||c>l-1){for(let n=0;n<u;n++){const r=n+i*b[2]+e*b[1]+t*b[0];d.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<u;r++){let a=r+h*y[2]+n*y[1]+w*y[0];const l=g[a];a=r+f*y[2]+n*y[1]+w*y[0];const u=g[a];a=r+h*y[2]+s*y[1]+w*y[0];const c=g[a];a=r+f*y[2]+s*y[1]+w*y[0];const p=l+(u-l)*m,x=c+(g[a]-c)*m;a=r+i*b[2]+e*b[1]+t*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const s=p>1?r*(l-1)+n*N:.5*(r+x)*(l-1);if(s<0||s>l-1){for(let r=0;r<u;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<u;r++){const s=r+o*y[2]+c*y[1]+w*y[0],a=r+n*b[2]+e*b[1]+t*b[0];d.values[a]=g[s]}}}}return d.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:l}=Ua(0,t,n);return this.scatter(t,e,n,l,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Ba(t,e);if(0===a)return hs([],s,t.dtype);const l=new pt([a,i],t.dtype),u=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=u[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)l.values[e*i+t]=c[s*i+t]}return l.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=Ua(0,t,n),l=Yt(0);return this.scatter(t,e,n,o,a,s,r,i,l,!0)}fill(t,e,n){const r=_(n=n||U(e),N(t));return r.fill(e),ti().makeTensor(r,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=_(t.dtype,N(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return Mc(t,e,n)}scatter(t,e,n,r,s,a,i,o,l,u){const c=[r/s,s],h=this.readSync(t.dataId),p=this.readSync(e.dataId);if(0===r)return hs([],n,e.dtype);const d=new pt(c,e.dtype);d.values.fill(this.readSync(l.dataId)[0]);for(let t=0;t<a;t++){const a=[];let l=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),l+=n*o[e]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)u?d.values[l*s+n]+=p[t*s+n]:d.values[l*s+n]=0===e.rank?p[0]:p[t*s+n]}return d.toTensor().reshape(n)}}const Hb={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:a,pad:i,dilations:o}=n,l=e,u=K(r.shape,l.data.get(r.dataId).values),c=K(s.shape,l.data.get(s.dataId).values),{batchSize:h,inHeight:p,inWidth:d,inChannels:f,outHeight:m,outWidth:g,padInfo:y,strideHeight:b,strideWidth:x,filterHeight:w,filterWidth:v,dilationHeight:N,dilationWidth:C,outShape:S}=Ie(r.shape,s.shape,a,i,"NHWC",o),k=J(S,r.dtype);for(let t=0;t<h;++t)for(let e=0;e<m;++e){const n=e*b-y.top;for(let r=0;r<g;++r){const s=r*x-y.left;for(let a=0;a<f;++a){let i=Number.MIN_SAFE_INTEGER;for(let e=0;e<w;++e){const r=n+e*N;if(r>=0&&r<p)for(let n=0;n<v;++n){const o=s+n*C;if(o>=0&&o<d){const s=u[t][r][o][a]+c[e][n][a];s>i&&(i=s)}}}k[t][e][r][a]=i}}}return{dataId:l.write(j(k,r.dtype),S,r.dtype),shape:S,dtype:r.dtype}}},qb={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=K(r.shape,u.data.get(r.dataId).values),h=K(s.shape,u.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:N,filterWidth:C,dilationHeight:S,dilationWidth:k,outShape:I}=Ie(r.shape,s.shape,i,o,"NHWC",l);b(a.rank===I.length,()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got `+a.rank);const E=K(I,u.data.get(a.dataId).values),A=J(s.shape,s.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*w-x.top;for(let r=0;r<y;++r){const s=r*v-x.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let e=0;e<N;++e){const r=n+e*S;if(r>=0&&r<d)for(let n=0;n<C;++n){const u=s+n*k;if(u>=0&&u<f){const s=c[t][r][u][a]+h[e][n][a];s>i&&(i=s,o=e,l=n)}}}A[o][l][a]+=E[t][e][r][a]}}}return{dataId:u.write(j(A,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},jb={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=K(r.shape,u.data.get(r.dataId).values),h=K(s.shape,u.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:N,filterWidth:C,dilationHeight:S,dilationWidth:k,outShape:I}=Ie(r.shape,s.shape,i,o,"NHWC",l);b(a.rank===I.length,()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got `+a.rank);const E=K(I,u.data.get(a.dataId).values),A=J(r.shape,r.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*w-x.top;for(let r=0;r<y;++r){const s=r*v-x.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=s<0?0:s;for(let e=0;e<N;++e){const r=n+e*S;if(r>=0&&r<d)for(let n=0;n<C;++n){const u=s+n*k;if(u>=0&&u<f){const s=c[t][r][u][a]+h[e][n][a];s>i&&(i=s,o=r,l=u)}}}A[t][o][l][a]+=E[t][e][r][a]}}}return{dataId:u.write(j(A,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};function Kb(t,e){return{kernelName:t,backendName:"cpu",kernelFunc:({inputs:n,backend:r})=>{const{a:s,b:a}=n,i=r;Ob([s,a],t);const o=i.data.get(s.dataId).values,l=i.data.get(a.dataId).values,[u,c]=e(s.shape,a.shape,o,l,s.dtype);return{dataId:i.write(u,c,s.dtype),shape:c,dtype:s.dtype}}}}function Xb(t){return(e,n,r,s,a)=>{const i=se(e,n),o=i.length,l=q(i),u=D(a,N(i)),c=e.length,h=n.length,p=q(e),d=q(n),f=ne(e,i),m=ne(n,i);if(f.length+m.length===0)for(let e=0;e<u.length;++e)u[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<u.length;++e){const n=st(e,o,l),a=n.slice(-c);f.forEach(t=>a[t]=0);const i=rt(a,c,p),g=n.slice(-h);m.forEach(t=>g[t]=0);const y=rt(g,h,d);u[e]=t(r[i],s[y])}return[u,i]}}const Yb=Kb("Div",Xb((t,e)=>t/e));const Jb=Au,Zb=Tu,Qb=[Hb,jb,qb,Yb,{kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;Ob(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=Ee(r.shape,s,a,[1,1],i),[h,p]=function(t,e,n,r,s){const a=Mb(t,0,n,q(e),s,"max"),i=zb(t,e,n,s,!0,r);return[a.values,i.values]}(u,r.shape,r.dtype,o,c),d=l.write(h,c.outShape,r.dtype),f=l.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},{kernelName:"Max",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n;let o=r.shape;const l=o.length,u=$(s,o);let c=u;const h=xe(c,l);let p=i.data.get(r.dataId).values;if(null!=h){const t=new Array(l);for(let e=0;e<t.length;e++)t[e]=o[h[e]];p=_b(p,o,r.dtype,h,t),c=ve(c.length,l),o=t}Ob(r,"max"),be("max",c,l);const[d,f]=ge(o,c),m=Db(p,N(f),d,r.dtype),g=i.write(m,d,r.dtype);let y=d;if(a){y=ye(d,u)}return{dataId:g,shape:y,dtype:r.dtype}}},{kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e;Ob(r,"NonMaxSuppressionPadded");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,{selectedIndices:p,validOutputs:d}=Jb(c,h,a,i,o,l);return[p,d]}},{kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e;Ob(r,"NonMaxSuppressionWithScore");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=Zb(c,h,p,d,f,m);return[g,y]}},{kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,l=D(r.dtype,N(r.shape)),[u,c,h,p]=r.shape,[d,f]=xc(i,c,h),m=Math.sin(s),g=Math.cos(s),y=o.data.get(r.dataId).values;for(let t=0;t<u;t++){const e=t*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let r=0;r<h;r++){const s=r*p;for(let i=0;i<p;i++){const o=[u,t,r,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let N=a;if("number"!=typeof a&&(N=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){N=y[e+v*(h*p)+w*p+i]}l[e+n+s+i]=N}}}}return{dataId:o.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;Ob(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Kb("SquaredDifference",Xb((t,e)=>{const n=t-e;return n*n})),{kernelName:"Transpose",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n;Ob(r,"transpose");const i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];const l=_b(a.data.get(r.dataId).values,r.shape,r.dtype,s,o);return{dataId:a.write(l,o,r.dtype),shape:o,dtype:r.dtype}}}];for(const t of Qb)h(t);ai("cpu",()=>new Gb,1);const tx={},ex={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function nx(t){t in tx||(tx[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete tx[t]},!1),1===t)return e.getContext("webgl",ex)||e.getContext("experimental-webgl",ex);return e.getContext("webgl2",ex)}(t));const e=tx[t];return e.isContextLost()?(delete tx[t],nx(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),tx[t])}var rx,sx,ax;function ix(t,e){return[e,t]}function ox(t){const e=N(t);return I(Math.ceil(e/4))}function lx(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function ux(t,e){const r=t;let s,a,i,o,l,u,c,h,p,d;return 2===n().getNumber("WEBGL_VERSION")?(s=r.R32F,a=r.R16F,i=r.RGBA16F,o=r.RGBA32F,l=r.RED,c=4,h=1,p=r.HALF_FLOAT,d=r.FLOAT):(s=t.RGBA,a=t.RGBA,i=t.RGBA,o=r.RGBA,l=t.RGBA,c=4,h=4,p=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),u=t.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:p,textureTypeFloat:d}}function cx(t,e){const r=e();return n().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(rx||(rx={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(sx||(sx={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(ax||(ax={}));function hx(t){return!!(n().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function px(t,e){return vx(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function dx(t,e){const n=vx(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(cx(t,()=>t.shaderSource(n,e)),cx(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=fx.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map((t,e)=>E((e+1).toString(),a)+t);let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const l=i.slice(0,r-1),u=i.slice(r-1,r),c=i.slice(r);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+E(u[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const fx=/ERROR: [0-9]+:([0-9]+):/g;function mx(t,e){if(cx(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function gx(t,e,n,r,s,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(cx(t,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),cx(t,()=>t.vertexAttribPointer(o,s,t.FLOAT,!1,a,i)),cx(t,()=>t.enableVertexAttribArray(o)),!0)}function yx(t,e,n){!function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(t,n),cx(t,()=>t.activeTexture(t.TEXTURE0+n)),cx(t,()=>t.bindTexture(t.TEXTURE_2D,e))}function bx(t,e,n){cx(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),cx(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function xx(t,e){cx(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),cx(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function wx(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function vx(t,e,n){const r=cx(t,()=>e());if(null==r)throw new Error(n);return r}function Nx(t,e=2){return N(t.slice(0,t.length-e))}function Cx(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Sx(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Nx(t),...Cx(t)]),e}function kx(t){return t%2==0}function Ix(t,e){if(C(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(kx(n)&&kx(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&kx(t[0])&&kx(e[0])}let Ex,Ax;function Tx(t,e){return null!=t.getExtension(e)}function $x(t){try{if(null!=nx(t))return!0}catch(t){return!1}return!1}function Rx(t){if(0===t)return!1;const e=nx(t);if(1!==t){if(Tx(e,"EXT_color_buffer_float"))return Dx(e);const t="EXT_color_buffer_half_float";if(Tx(e,t)){const n=e.getExtension(t);return function(t,e){const n=ux(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(s),a}(e,n)}return!1}return!!Tx(e,"OES_texture_float")&&(!!Tx(e,"WEBGL_color_buffer_float")&&Dx(e))}function Dx(t){const e=ux(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}const _x=n();_x.registerFlag("HAS_WEBGL",()=>_x.getNumber("WEBGL_VERSION")>0),_x.registerFlag("WEBGL_VERSION",()=>$x(2)?2:$x(1)?1:0),_x.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),_x.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===_x.get("WEBGL_VERSION")),_x.registerFlag("WEBGL_CPU_FORWARD",()=>!0),_x.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),_x.registerFlag("WEBGL_PACK",()=>_x.getBool("HAS_WEBGL")),_x.registerFlag("WEBGL_PACK_NORMALIZATION",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_PACK_CLIP",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),_x.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_PACK_REDUCE",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_LAZILY_UNPACK",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_CONV_IM2COL",()=>_x.getBool("WEBGL_PACK")),_x.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==Ex){const e=nx(t);Ex=e.getParameter(e.MAX_TEXTURE_SIZE)}return Ex}(_x.getNumber("WEBGL_VERSION"))),_x.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==Ax){const e=nx(t);Ax=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Ax)}(_x.getNumber("WEBGL_VERSION"))),_x.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=_x.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=nx(t);return e=Tx(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Tx(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),_x.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>_x.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!_t()),_x.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=nx(t);if(1===t){if(!Tx(e,"OES_texture_float"))return!1}else if(!Tx(e,"EXT_color_buffer_float"))return!1;return Dx(e)}(_x.getNumber("WEBGL_VERSION"))),_x.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!_x.getBool("WEBGL_FORCE_F16_TEXTURES")&&_x.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),_x.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>Rx(_x.getNumber("WEBGL_VERSION"))),_x.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=_x.getNumber("WEBGL_VERSION"))&&null!=nx(t).fenceSync;var t}),_x.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>_x.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),_x.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)});class Fx{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class Ox{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class Mx{constructor(t,e,n){this.variableNames=["A"];const r=t.windowSize,s=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];const o="max"===e?">":"<",l=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${l};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function zx(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function Lx(t,e){return 1===e?[t]:zx(t,e)}function Bx(){let t,e,r,s,a,i,o,l,u,c;return 2===n().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",r="out",s="in",a="texture",i="outputColor",o="out vec4 outputColor;",l="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",r="varying",s="varying",a="texture2D",i="gl_FragColor",o="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:r,varyingFs:s,texture2D:a,output:i,defineOutput:o,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function Px(t,e,n="index"){const r=q(e);return r.map((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`).join("")}function Wx(t){const e=q(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const Vx="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Ux}=zc;function Gx(t,e,n,r){const s=[];t.forEach(t=>{const e=N(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))});const a=s.join("\n"),i=t.map(t=>function(t,e,n=!1){let r="";r+=n?qx(t):Hx(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=Ux(t.shapeInfo.logicalShape,e.logicalShape),l=tw(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(t=>`coords.${h[t+u]} = 0;`).join("\n");let p="";p=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+u]).join(", ");let d="return outputValue;";const f=1===N(t.shapeInfo.logicalShape),m=1===N(e.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?d="return vec4(outputValue.x);":o.indexOf(t)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${d}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===l&&null==t.shapeInfo.flatOffset&&C(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=tw(l),c=Ux(t.shapeInfo.logicalShape,e.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map(t=>`coords.${d[t+h]} = 0;`).join("\n");let f="";f=l<2&&o>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+d[e+h]).join(", ");return`\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${r}(${f});\n    }\n  `}(t,e));return r}(t,e,r)).join("\n"),o=e.texShape,l=Bx(),u=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${jx}\n    ${Kx}\n    ${Xx}\n  `}(l);return e.isPacked?(c=function(t,e){switch(t.length){case 0:return Jx();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(C(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function(t,e){switch(t.length){case 0:return Jx();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(C(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=Px(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=Px(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=Px(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=Px(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),r&&(p+=Yx),[p,u,h,a,c,i,n].join("\n")}function Hx(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=Zx(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${Qx(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Zx(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&C(e,s)){const t=s[0],e=s[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=R(e),o=a;if(o.length<e.length){const e=ew(t,o),n=["row","col"];return`\n      ${Hx(e)}\n      float ${r}(int row, int col) {\n        return ${r}(${nw(n,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Qx(t)}\n      }\n    `;const l=s[0],u=s[1],c=Zx(n);if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=R(e),l=i;if(l.length<e.length){const e=ew(t,l),n=["row","col","depth"];return`\n        ${Hx(e)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${nw(n,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${Qx(t)}\n      }\n    `;const u=t.shapeInfo.texShape,c=u[0],h=u[1],p=t.shapeInfo.flatOffset;if(h===s&&null==p)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=Zx(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:l}=R(e);if(o.length<e.length){const e=ew(t,o),n=["row","col","depth","depth2"];return`\n      ${Hx(e)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${nw(n,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${Qx(t)}\n      }\n    `;const u=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=Zx(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:l,keptDims:u}=R(e);if(l.length<e.length){const e=ew(t,l),n=["row","col","depth","depth2","depth3"];return`\n      ${Hx(e)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${nw(n,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${Qx(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Zx(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=R(e);if(s.length<e.length){const e=ew(t,s),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Hx(e)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${nw(n,a)});\n      }\n    `}const i=e[5],o=e[4]*i,l=e[3]*o,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Qx(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Zx(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function qx(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=Bx();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Bx();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=Bx();if(null!=s&&C(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],u=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=e.slice(1),s=[1,2],a=ew(t,n),i=["b","row","col"];return`\n        ${qx(a)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${nw(i,s)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(e[2]/2),u=l*Math.ceil(e[1]/2),c=Bx();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(e[n-1]/2);let c=u*Math.ceil(e[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],p=`b${t} * ${c} + `+p;const d=Bx();return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${d.texture2D}(${r}, uv);\n    }\n  `}(t)}}const jx="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Kx="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Xx="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Yx="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Jx(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Zx(t){return"offset"+t}function Qx(t){const e=t.name,n=N(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function tw(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function ew(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function nw(t,e){return e.map(e=>t[e]).join(", ")}class rw{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,b(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=tw(o),u=Lx("coords",o);let c,h;if(1===a){h=o+1;const t=tw(h);c=`\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\n        --${u[o-1]};\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map(t=>"int "+t),m=Lx("sourceLocR",h-1).concat("inIdx.r"),g=Lx("sourceLocG",h-1).concat("inIdx.g"),y=Lx("sourceLocB",h-1).concat("inIdx.b"),x=Lx("sourceLocA",h-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",v=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,N=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,C=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${C}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${N};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${N};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class sw{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=o-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class aw{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=p-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class iw{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],se(t,e),se(t,n);let i="0.0";null!=r&&(se(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(se(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class ow{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],se(t,e),se(t,n);let i="vec4(0.0)";null!=r&&(se(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(se(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const lw="return areal * breal - aimag * bimag;",uw="return areal * bimag + aimag * breal;";class cw{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=se(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const hw="return a + b;",pw="return a - b;",dw="return a * b;",fw="return (a < 0.) ? b * a : a;";class mw{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=se(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const gw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class yw{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=se(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===N(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${tw(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=Lx("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class bw{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class xw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class ww{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class vw{constructor(t){this.outputShape=[],this.outputShape=cs(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Nw{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=cs(t,e);const n=this.outputShape,r=n.length,s=tw(r),a=Lx("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const l=i[e],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${l} < ${o[t]}  && ${l} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${Cw(i,l,e)}),\n            vec2(${Cw(u,l,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${Cw(i,l,d)}),\n          vec2(${Cw(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function Cw(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}class Sw{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kw{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Iw{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ew{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Aw{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Tw{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class $w{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class Rw{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,p=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Dw{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class _w{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=d;let m="int xR; int xC; int xCOffset;";for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<p;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<d&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<d)){const e=o%2==0?g(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<d&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<d&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<d&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<d&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<d&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let y="",b="";n&&(y=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const x=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}class Fw{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class Ow{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=e?"0.0":`getX(${Mw(r,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${tw(r)} coords = getOutputCoords();\n        int end = ${zw(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${zw(r,"coords")} = idx;\n          val += getX(${Mw(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function Mw(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function zw(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class Lw{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=rx.DENSE;const e=ox(t),n=Bx();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Px(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Bw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=rx.DENSE;const e=ox(t),n=Bx();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Px(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Pw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class Ww{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class Vw{constructor(t){this.variableNames=["A"],this.outTexUsage=sx.DOWNLOAD;const e=Bx();this.outputShape=t,this.userCode=`\n      ${Vx}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class Uw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=sx.DOWNLOAD;const e=Bx();this.outputShape=t,this.userCode=`\n      ${Vx}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class Gw{constructor(t,e,n=!1){this.variableNames=["A"];const r=Bx(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${Wx(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class Hw{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=Bx(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${Wx(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}const qw="return real * expR - imag * expI;",jw="return real * expI + imag * expR;";class Kw{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class Xw{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class Yw{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=tw(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(""+r[n]);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class Jw{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=tw(e.length),s=tw(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Zw(t){const e=Bx();return function(t,e){const n=vx(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(cx(t,()=>t.shaderSource(n,e)),cx(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Qw(t){return function(t,e){const n=vx(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return cx(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),cx(t,()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function tv(t){return function(t,e){const n=vx(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return cx(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)),cx(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Uint16Array([0,1,2,2,1,3]))}function ev(t,e,r,s,a,i){!function(t,e){const r=n().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>r||e>r){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${r}x${r}]`+".")}}(e,r);const o=function(t){return vx(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),l=t.TEXTURE_2D;return cx(t,()=>t.bindTexture(l,o)),cx(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),cx(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),cx(t,()=>t.texParameteri(l,t.TEXTURE_MIN_FILTER,t.NEAREST)),cx(t,()=>t.texParameteri(l,t.TEXTURE_MAG_FILTER,t.NEAREST)),cx(t,()=>t.texImage2D(l,0,s,e,r,0,a,i,null)),cx(t,()=>t.bindTexture(t.TEXTURE_2D,null)),o}function nv(t){return t.internalFormatFloat}function rv(t){return t.internalFormatHalfFloat}function sv(t){return t.downloadTextureFormat}function av(t){return t.internalFormatPackedFloat}function iv(t){return t.internalFormatPackedHalfFloat}function ov(t,e,n,r,s,a,i,o){const l=t,u=new Float32Array(function(t,e){const[n,r]=lx(t,e);return n*r*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class lv{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=n().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){tx[t]=e}(e,t)):this.gl=nx(e);let r="WEBGL_color_buffer_float";if(1===n().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=px(this.gl,t),Tx(this.gl,e))this.textureHalfFloatExtension=px(this.gl,e);else if(n().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(r),Tx(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=px(this.gl,"EXT_color_buffer_half_float");else if(n().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(r="EXT_color_buffer_float",Tx(this.gl,r))this.colorBufferFloatExtension=this.gl.getExtension(r);else{if(!Tx(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Qw(this.gl),this.indexBuffer=tv(this.gl),this.framebuffer=function(t){return vx(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=ux(this.gl,this.textureHalfFloatExtension)}get debug(){return n().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;cx(t,()=>t.finish()),cx(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),cx(t,()=>t.deleteFramebuffer(this.framebuffer)),cx(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),cx(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),cx(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=ix(e,n);return ev(t,s,a,nv(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=ix(e,n);return ev(t,s,a,rv(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=ix(e,n);return ev(t,s,a,sv(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){cx(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?cx(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):cx(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),cx(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a){let i,o,l;cx(t,()=>t.bindTexture(t.TEXTURE_2D,e)),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=t.UNSIGNED_BYTE,l=t.RGBA):(i=new Float32Array(n*r*4),o=t.FLOAT,l=a.internalFormatPackedFloat),i.set(s),cx(t,()=>t.texImage2D(t.TEXTURE_2D,0,l,n,r,0,t.RGBA,o,i)),cx(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=lx(e,n);return ev(t,s,a,iv(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=lx(e,n);return ev(t,s,a,av(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(xx(this.gl,this.framebuffer),this.outputTexture=null),cx(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const[s,a]=ix(e,n),i=new Uint8Array(e*n*4);return cx(t,()=>t.readPixels(0,0,s,a,r.downloadTextureFormat,t.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return ov(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();cx(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s));const a=16*e*n;return cx(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)),cx(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),cx(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,r;if(n().getBool("WEBGL_FENCE_API_ENABLED")){const n=t,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),r=()=>{const t=n.clientWaitSync(s,0,0);return t===n.ALREADY_SIGNALED||t===n.CONDITION_SATISFIED},e=s}else n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(e,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:e,isFencePassed:r}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n){const r=new Float32Array(e*n*4);return cx(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r)),r}(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=dx(e,t),r=Zw(e),s=function(t){return vx(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);return cx(e,()=>e.attachShader(s,r)),cx(e,()=>e.attachShader(s,n)),function(t,e){if(cx(t,()=>t.linkProgram(e)),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,s),this.debug&&mx(e,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n){return cx(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),gx(t,e,"clipSpacePos",n,3,20,0)&&gx(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&cx(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&mx(this.gl,this.program),cx(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return vx(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),cx(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(t,e,n,r){cx(t,()=>yx(t,e,r)),cx(t,()=>t.uniform1i(n,r))}(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=lx(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&mx(this.gl,this.program),wx(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),cx(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),cx(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=px(this.gl,2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await A(()=>this.disposed||this.isQueryAvailable(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||A(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),bx(this.gl,t,this.framebuffer),this.debug&&wx(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(bx(this.gl,this.outputTexture,this.framebuffer),this.debug&&wx(this.gl)):xx(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;bx(r,t,this.framebuffer),this.debug&&wx(r),this.outputTexture=t,cx(r,()=>r.viewport(0,0,e,n)),cx(r,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),cx(this.gl,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function uv(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!C(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!C(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}class cv{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=Bx(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class hv{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class pv{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class dv{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class fv{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,l=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class mv{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=l-1-t.padInfo.top,p=u-1-t.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gv{constructor(t,e,n=!1,r=!1,s=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],l=Math.ceil(o/2),u=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let d="",f="";a&&(d=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${d}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          vec4 a = getMatrixA(rc.x, ${u});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${p[0]});\n          result += (${h[1]} * ${p[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class yv{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class bv{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class xv{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=Lx("rc",e),r=tw(e),s=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class wv{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=tw(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class vv{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=tw(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=Lx("rc",r),l=Lx("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${u}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let t=0,e=1===r?2:4;t<e;t++)d+=`\n        ${h[t]}\n        if (${p}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class Nv{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Cv{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,d=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),N=a%4,C=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${C}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${C}\n            } else if (${2===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${C}\n            } else if (${3===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${C}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class Sv{constructor(t,e){this.variableNames=["x"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=Math.ceil(s/n);this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class kv{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${Px(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${Wx(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Iv{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Ev{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Av{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class Tv{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class $v{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Rv{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=tw(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class Dv{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=Lx("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=tw(n);function o(n){const r=t.map((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class _v{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=tw(s.length),l=tw(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class Fv{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Ov{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=tw(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class Mv{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=tw(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return zv.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${zv[e]} = start[${e}] + coords.${zv[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const zv=["x","y","z","w","u","v"];class Lv{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=tw(this.rank),n=Lx("coords",this.rank),r=Lx("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class Bv{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=tw(n.length),a=tw(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class Pv{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=Vv(e,n),s=Uv(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=Wv(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let i;return r===ax.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===ax.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===ax.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===ax.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===ax.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,r,s){if(null==this.freeTextures)return;const a=Vv(r,s),i=Uv(e,a,s);i in this.freeTextures||(this.freeTextures[i]=[]);const o=Wv(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),l=n().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=o):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Wv(t,e,n,r,s){const a=function(t,e){switch(t){case ax.PACKED_2X2_FLOAT32:return av(e);case ax.PACKED_2X2_FLOAT16:return iv(e);case ax.UNPACKED_FLOAT32:return nv(e);case ax.UNPACKED_FLOAT16:return rv(e);case ax.PACKED_4X1_UNSIGNED_BYTE:return sv(e);default:throw new Error("Unknown physical texture type "+t)}}(e,r);let i;if(s){const[e,n]=lx(t[0],t[1]);i=e*n}else{const[e,n]=ix(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,a)}function Vv(t,e){if(t===sx.UPLOAD)return ax.PACKED_2X2_FLOAT32;if(t===sx.RENDER||null==t)return function(t){return n().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?ax.PACKED_2X2_FLOAT32:ax.UNPACKED_FLOAT32:t?ax.PACKED_2X2_FLOAT16:ax.UNPACKED_FLOAT16}(e);if(t===sx.DOWNLOAD||t===sx.PIXELS)return ax.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function Uv(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class Gv{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=tw(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class Hv{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const qv="if (isnan(x)) return x;",jv="return abs(x);",Kv=qv+"\n  return (x < 0.0) ? 0.0 : x;\n",Xv=qv+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Yv="return (x >= 0.0) ? x : (exp(x) - 1.0);",Jv=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${_r};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const Zv="return -x;",Qv="return ceil(x);",tN="return floor(x);",eN="return exp(x);",nN="return exp(x) - 1.0;",rN="return x;",sN="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",aN="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",iN="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class oN{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class lN{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=Lx("rc",e),r=tw(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:uN}=zc,cN=Lc,hN=Bc,pN=Pc,dN=Ml,fN={};function mN(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?sN:Kv;if("elu"===t)return e?iN:Yv;if("relu6"===t)return e?aN:Xv;if("prelu"===t)return e?gw:fw;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class gN extends Uc{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!n().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=nx(n().getNumber("WEBGL_VERSION"));this.binaryCache=((e=n().getNumber("WEBGL_VERSION"))in fN||(fN[e]={}),fN[e]),this.gpgpu=new lv(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new Pv(this.gpgpu),this.numMBBeforeWarning=null==n().global.screen?1024:n().global.screen.height*n().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Vc(this,ti())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,r){if((n().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||n().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===r&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:e,dtype:r,values:t,usage:sx.UPLOAD}),s}move(t,e,r,s){if(n().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:r,dtype:s,values:e,usage:sx.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensors:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new oN(i,rN):new Hv(i,rN);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Z()),"complex64"===r){c=Ic(s.real.dataSync(),s.imag.dataSync())}else c=this.getValuesFromTexture(t);return l&&(this.downloadWaitMs+=Z()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:r,shape:s,slice:a,dtype:i,complexTensors:o,isPacked:l}=e;if(null!=a){let e;e=l?new oN(s,rN):new Hv(s,rN);const n=this.runWebGLProgram(e,[{dataId:t,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeData(n.dataId),r}if(null!=r)return this.convertAndCacheOnCPU(t);if(!n().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===n().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&n().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...ox(s))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([o.real.data(),o.imag.data()]);c=Ic(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=N(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=u&&this.disposeData(u.dataId);const p=this.convertAndCacheOnCPU(t,c),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach(t=>t(p)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),p}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const r=t[e];if(!hx(r)){if(n().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${r} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:r,isPacked:s}=this.texData.get(t),a=N(e);if(n().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...ox(e)).subarray(0,a);return this.disposeData(n.dataId),s}const i=n().getBool("WEBGL_PACK")&&!0===s,o=i?Sx(e):e,l=i?new Uw(o):new Vw(o),u=this.runWebGLProgram(l,[{shape:o,dtype:r,dataId:t}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeData(u.dataId),h}async time(t){const e=this.activeTimers,r=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=r,s=!0):this.activeTimers.push(r),this.activeTimers=r,t();const a=v(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),i=v(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(a);o.kernelMs=y(t),o.getExtraProfileInfo=()=>t.map((t,e)=>({name:i[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Z(),endMs:null}}endTimer(t){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Z(),t)}async getQueryTime(t){if(n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return n().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=ti().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const r=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=r||n().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=r&&t.every(t=>null==this.texData.get(t.dataId).texture&&N(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:ti().keep(t.clone()),imag:ti().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,r);if(0===N(r))return hs([],r,t.dtype);const{isPacked:s}=this.texData.get(t.dataId),a=Qr(t.shape,e,r);if(s||!a){const s=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Lv(r):new Mv(r),a=s.getCustomSetupFunc(e);return this.compileAndRun(s,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,r)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=ts(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const s=Gr(e,n,r);if(s.some(t=>0===t))return hs([],s);const a=new Bv(e,r,s);return this.compileAndRun(a,[t])}reverse(t,e){const r=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Dv(t.shape,e):new Rv(t.shape,e);return this.compileAndRun(r,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>eo(t)),r=t.map(t=>to(t));return hr(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>n().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),s=this.concat(t.slice(n),e);return this.concat([r,s],e)}if(n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new Nw(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const r=cs(t.map(t=>t.shape),e),s=t.map(t=>t.as2D(-1,N(t.shape.slice(e)))),a=new vw(s.map(t=>t.shape));return this.compileAndRun(a,s).reshape(r)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Zv,t.dtype);const e=new Hv(t.shape,Zv);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===s||1===a)&&i>1e3){n&&(t=yn(t,[0,2,1])),r&&(e=yn(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),l=1===a?2:1,u=1===a?e.as3D(o,1,i):e;return this.multiply(s,u).sum(l,!0)}const l=Ct(t.dtype,e.dtype),u=new gv(t.shape,[o,s,a],n,r);return this.compileAndRun(u,[t,e],l)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],l=r?e.shape[1]:e.shape[2],[u,,]=t.shape,c=Ct(t.dtype,e.dtype),h=null!=s,p=null!=i,d=a?mN(a,!0):null,f=new gv(t.shape,[u,o,l],n,r,h,d,p),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),s=new cw(lw,t.shape,e.shape),a=new cw(uw,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],o=this.compileAndRun(s,i),l=this.compileAndRun(a,i),u=this.complex(o,l);return o.dispose(),l.dispose(),u}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,dw,t.dtype);const r=new mw(dw,t.shape,e.shape);return this.compileAndRun(r,[t,e],t.dtype)}batchNorm(t,e,r,s,a,i){const o=[t,e,r];let l=null;null!=s&&(l=s.shape,o.push(s));let u=null;if(null!=a&&(u=a.shape,o.push(a)),n().getBool("WEBGL_PACK_NORMALIZATION")){const n=new ow(t.shape,e.shape,r.shape,l,u,i);return this.compileAndRun(n,o)}const c=new iw(t.shape,e.shape,r.shape,l,u,i);return this.compileAndRun(c,o)}localResponseNormalization4D(t,e,r,s,a){const i=n().getBool("WEBGL_PACK_NORMALIZATION")?new dv(t.shape,e,r,s,a):new hv(t.shape,e,r,s,a);return this.compileAndRun(i,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new pv(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>nt(t)),r=$i(t.shape,t.dtype,n);return hN(r,e)}const n=new Gv(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,r){const s=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new vv(t.shape,e,r):new wv(t.shape,e,r);return this.compileAndRun(s,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new Yw(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){b(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=wc(t.shape,e,r),a=vc(s.length,e.length),i=Nc(t.shape,e,r),o=Cc(n,e.length),l=Sc(i,n,e.length);return yn(t.reshape(s),a).reshape(i).slice(o,l)}spaceToBatchND(t,e,n){b(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=wc(a.shape,e,r,!1),o=vc(i.length,e.length,!1),l=Nc(a.shape,e,r,!1),u=yn(a.reshape(i),o);return de(u,l)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=Ts(s),i=new Sv({windowSize:a,inSize:s,batchSize:r},e),o=this.compileAndRun(i,[t],n);return 1===o.shape[1]?o:this.reduce(o,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=Ts(s),i=new Mx({windowSize:a,inSize:s,batchSize:r},e,null==n),o=[t];null!=n&&o.push(n);const l=this.compileAndRun(i,o,"int32");return 1===l.shape[1]?l:this.argReduce(t,e,l)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=Ts(r[r.length-1]),a=new rw(r,s,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){be("sum",e,t.rank);const[n,r]=ge(t.shape,e),s=N(r),a=t.as2D(-1,s),i=St(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,r]=ge(t.shape,e),s=N(r),a=t.as2D(-1,s),i=St(t.dtype);return this.reduce(a,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let r=0;const s=xe([r],t.rank);let a=t;null!=s&&(a=yn(t,s),r=ve(1,t.rank)[0]);const i=uN.computeOutShape(a.shape,r,n),o=N([a.shape[r]]),l=a.as2D(-1,o),u=St(t.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",e,u,n).reshape(i);return null!=s&&(c=yn(c,we(s))),c}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=uN.segOpComputeOptimalWindowSize(i,s),l=new Fv({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),u=this.compileAndRun(l,[t,n],r);return u.shape[1]===s?u:(n=sl(0,s).tile([i/o]),this.segOpCompute(u,e,n,r,s))}argMinMaxReduce(t,e,r){const s=[e];if(be("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.rank),!n().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,n]=ge(t.shape,s),a=N(n),i=t.as2D(-1,a);return this.argReduce(i,r).reshape(e)}return this.argReducePacked(t,r)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(s))-1;e++){const n=new Ow(t.shape,!1,r),s=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,s),i.dispose()}if(n){const e=new Ow(t.shape,n,r),s=a;a=this.compileAndRun(e,[a]),s.dispose()}return a}equal(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const r=new mw("return float(a == b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}notEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const r=new mw("return float(a != b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const r=new mw("return float(a < b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}lessEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const r=new mw("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const r=new mw("return float(a > b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}greaterEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const r=new mw("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}logicalNot(t){const e=new Hv(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const r=new mw("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}logicalOr(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const r=new mw("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}select(t,e,n){const r=new Ov(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Ct(e.dtype,n.dtype))}where(t){kc("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return dN(t.shape,e)}topk(t,e,n){const r=t.dataSync();return pN(r,t.shape,t.dtype,e)}min(t,e){be("min",e,t.rank);const[n,r]=ge(t.shape,e),s=N(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yw("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new mw("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}mod(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yw("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new mw("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(r,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yw("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new mw("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}all(t,e){be("all",e,t.rank);const[n,r]=ge(t.shape,e),s=N(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){be("any",e,t.rank);const[n,r]=ge(t.shape,e),s=N(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const r=new mw("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(r,[t,e],"int32")}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,hw);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const r=Ct(t.dtype,e.dtype);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,hw,r);const s=new mw(hw,t.shape,e.shape);return this.compileAndRun(s,[t,e],r)}packedUnaryOp(t,e,n){const r=new oN(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new yw(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),s=this.texData.get(e.dataId),[a,i]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map(r=>{const[s,a]=r,i=this.makeComplexComponentTensorInfo(t,s),o=this.makeComplexComponentTensorInfo(e,a),l=new mw(n,t.shape,e.shape);return this.compileAndRun(l,[i,o],Ct(s.dtype,a.dtype))}),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>n().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>Ct(t,e)),r=t.map(t=>t.shape),s=n().getBool("WEBGL_PACK")?new Ox(t[0].shape,r):new Fx(t[0].shape,r);return this.compileAndRun(s,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,pw);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const r=Ct(t.dtype,e.dtype);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,pw,t.dtype);const s=new mw(pw,t.shape,e.shape);return this.compileAndRun(s,[t,e],r)}pow(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yw("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new mw("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),s=Ct(t.dtype,e.dtype);return this.compileAndRun(r,[t,e],s)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Qv,t.dtype);const e=new Hv(t.shape,Qv);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,tN,t.dtype);const e=new Hv(t.shape,tN);return this.compileAndRun(e,[t])}sign(t){const e=new Hv(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new Hv(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new Hv(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new Hv(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new Hv(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,eN,t.dtype);const e=new Hv(t.shape,eN);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,nN,t.dtype);const e=new Hv(t.shape,nN);return this.compileAndRun(e,[t])}softmax(t,e){const n=$([e],t.shape),r=mo(t,n),s=ye(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return jt(i,o)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new Hv(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new Hv(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new Hv(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new Hv(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new Hv(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=n().getBool("WEBGL_PACK")?new oN(t.shape,sN):new Hv(t.shape,Kv),this.compileAndRun(e,[t])}relu6(t){let e;return e=n().getBool("WEBGL_PACK")?new oN(t.shape,aN):new Hv(t.shape,Xv),this.compileAndRun(e,[t])}prelu(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yw(gw,t.shape,e.shape):new mw(fw,t.shape,e.shape);return this.compileAndRun(r,[t,e])}elu(t){if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,iN,t.dtype);const e=new Hv(t.shape,Yv);return this.compileAndRun(e,[t])}eluDer(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yw("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new mw("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e])}selu(t){const e=new Hv(t.shape,Jv);return this.compileAndRun(e,[t])}int(t){const e=new Hv(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,r){let s;s=n().getBool("WEBGL_PACK_CLIP")?new xw(t.shape):new bw(t.shape);const a=s.getCustomSetupFunc(e,r);return this.compileAndRun(s,[t],null,a)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,jv,t.dtype);const e=new Hv(t.shape,jv);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new ww(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new Hv(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new Hv(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new Hv(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new Hv(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new Hv(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new Hv(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new Hv(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new Hv(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yw("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new mw("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}sinh(t){const e=new Hv(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new Hv(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new Hv(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new Hv(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new Hv(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new Hv(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new Hv(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])}step(t,e){const n=new Hv(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,r,s,a,i){const o=t.shape,l=this.texData.get(t.dataId),u=r.inChannels,c=o[0]*o[1]*o[2],h=r.outChannels,p="channelsLast"===r.dataFormat,d=(1===c||1===h)&&u>1e3,f=o[2]%2!=0&&!!l.isPacked;if(d||!n().getBool("WEBGL_LAZILY_UNPACK")||!n().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const n=p?o[0]*o[1]*o[2]:o[0]*o[2]*o[3],l=this.reshape(t,[1,n,r.inChannels]),u=this.reshape(e,[1,r.inChannels,r.outChannels]);return this.reshape(this.fusedBatchMatMul({a:l,b:u,transposeA:!1,transposeB:!1,bias:s,activation:a,preluActivationWeights:i}),r.outShape)}const m=p?o[0]*o[1]*(o[2]+1):o[0]*o[2]*(o[3]+1),g={dataId:t.dataId,shape:[1,m,r.inChannels],dtype:t.dtype},y=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,b(Ix(l.shape,g.shape),()=>`packed reshape ${l.shape} to ${g.shape} isn't free`);const x=this.reshape(e,[1,r.inChannels,r.outChannels]),w=this.fusedBatchMatMul({a:g,b:x,transposeA:!1,transposeB:!1,bias:s,activation:a,preluActivationWeights:i}),v=this.texData.get(w.dataId);return b(v.isPacked,()=>"batchMatMul result is expected to be packed"),l.shape=y,v.shape=r.outShape,ti().makeTensorFromDataId(w.dataId,r.outShape,w.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*l,f=c*u,m=[d,f],g=t.squeeze([0]),y=e.reshape([1,d,-1]),b=new cv(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,N=s?mN(s,!0):null,C=new gv(x.shape,[1,f,n.outChannels],!0,!1,w,N,v),S=[x,y];r&&S.push(r),v&&S.push(a);const k=this.compileAndRun(C,S);return p?k.reshape([1,c,u,n.outChannels]):k.reshape([1,n.outChannels,c,u])}fusedConv2d({input:t,filter:e,convInfo:r,bias:s,activation:a,preluActivationWeights:i}){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(t,e,r,s,a,i);if(n().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,r,s,a,i);const o=null!=s,l=null!=i,u=a?mN(a,!1):null,c=new $w(r,o,u,l),h=[t,e];return s&&h.push(s),i&&h.push(i),this.compileAndRun(c,h)}conv2d(t,e,r){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(t,e,r);if(n().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,r);const s=new $w(r);return this.compileAndRun(s,[t,e])}conv2dDerInput(t,e,n){const r=new kw(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new Sw(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:r,bias:s,activation:a,preluActivationWeights:i}){const o=n().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1,l=a?mN(a,o):null,u=[t,e],c=null!=s,h=null!=i;let p;return c&&u.push(s),h&&u.push(i),o?(p=new _w(r,c,l,h),this.compileAndRun(p,u)):(p=new Dw(r,c,l,h),this.compileAndRun(p,u))}depthwiseConv2D(t,e,r){let s;return n().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1?(s=new _w(r),this.compileAndRun(s,[t,e])):(s=new Dw(r),this.compileAndRun(s,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new Tw(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new Aw(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new Rw(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new Ew(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new Iw(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new Nv(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new Nv(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const s=new Nv(r,"max",!0),a=this.compileAndRun(s,[e]),i=new fv(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}avgPoolBackprop(t,e,n){const r=new sw(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return Fc(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new Cv(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new aw(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new Cv(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new Cv(r,"max",!0),a=this.compileAndRun(s,[e]),i=new mv(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!Ix(t.shape,e)&&(null===n.texture||!Ix(n.shape,e))){const n=this.packedReshape(t,e);return ti().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return Oc(t,e)}resizeBilinear(t,e,r,s){const a=n().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Av(t.shape,e,r,s):new Ev(t.shape,e,r,s);return this.compileAndRun(a,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new Iv(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new $v(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new Tv(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:Nl(t),a=s.shape[0],i=s.shape[1],o=new yv(a,i,n),l=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",l)}oneHot(t,e,n,r){const s=new bv(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new Ww(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new Fw(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){b(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,l=a*e,u=i/(e*e),c=new Pw("NHWC"===n?[r,o,l,u]:[r,u,o,l],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return cN(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=Ua(0,t,n),l=[o/a,a],u=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return Oc(hs([]),n);const h=Yt(0),p=new _v(s,r,u.rank,c.rank,i,l);return this.compileAndRun(p,[c,u,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=Ua(0,t,n),l=new _v(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(l,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new Kw(qw,t.shape,e),s=new Kw(jw,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),o=this.compileAndRun(s,a),l=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),l}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Ba(t,e),l=e.reshape([a,r]),u=t.reshape([t.size/i,i]),c=new Jw(r,o,[a,i]);return this.compileAndRun(c,[u,l]).reshape(s)}fill(t,e,n){if("string"===(n=n||U(e))){const r=_(n,N(t));return r.fill(e),ti().makeTensor(r,t,n,this)}{const r=new Xw(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return Mc(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return ti().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new lN(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new xv(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[Nx(t.shape),...Cx(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[Nx(e),...Cx(e)],a=new kv(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=Sx(r);let i;i=n?new Bw(a):new Lw(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,r,s,a=!1){const i=this.makeTensorInfo(t.outputShape,r),o=this.texData.get(i.dataId);if(t.packedOutput&&(o.isPacked=!0),t.outPackingScheme===rx.DENSE){const e=ox(t.outputShape);o.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(o.usage=t.outTexUsage),0===N(i.shape))return o.values=D(i.dtype,0),i;const l=[],u=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let r=this.texData.get(e.dataId);if(null==r.texture){if(!t.packedInputs&&N(e.shape)<=n().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:r.values};t.packedInputs&&(r.isPacked=!0,r.shape=e.shape)}else if(!!r.isPacked!=!!t.packedInputs)e=r.isPacked?this.unpackTensor(e):this.packTensor(e),l.push(e),r=this.texData.get(e.dataId);else if(r.isPacked&&!Ix(r.shape,e.shape)){const t=e,n=e.shape;e.shape=r.shape,e=this.packedReshape(e,n),l.push(e),r=this.texData.get(e.dataId),t.shape=n}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:r,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(t,e,n){let r="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`});const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,u,c),p=this.getAndSaveBinary(h,()=>function(t,e,r,s){const a=e.userCode,i=r.map((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),o=i.map(t=>t.shapeInfo),l={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},u=Gx(i,l,a,e.packedInputs),c=t.createProgram(u);let h=null;const p=t.getUniformLocation(c,"NAN",!1);1===n().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const d={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;d[r]=t.getUniformLocation(c,r,s),d["offset"+r]=t.getUniformLocation(c,"offset"+r,s)}return{program:e,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:o,outShapeInfo:l,infLoc:h,nanLoc:p}}(this.gpgpu,t,u,c)),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(t,e,r,s,a){uv(e.inShapeInfos,r),uv([e.outShapeInfo],[s]);const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?t.setOutputPackedMatrixTexture(i,o[0],o[1]):t.setOutputMatrixTexture(i,o[0],o[1]),t.setProgram(e.webGLProgram),1===n().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),r.forEach((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations["offset"+s];if(null!=a)if(n.isUniform)if(N(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)}),null!=a&&a(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach(t=>this.disposeData(t.dataId)),d&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!n().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const t=this.unpackTensor(i);return this.disposeData(i.dataId),t}return i}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return ti().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!n().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ni(()=>{if(!n().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=n().getBool("DEBUG");n().set("DEBUG",!1);const e=this.abs(Yt(1e-8)).dataSync()[0];if(n().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:r,dtype:s,values:a,texture:i,usage:o,isPacked:l}=e;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=Z());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let r=n().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((e,n)=>n>=t.length-2?g(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=R(t);t=e.newShape}let s=N(t);if(t.length<=1&&s<=r)return[1,s];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){const e=Nx(t);let n=2,r=2;return t.length&&([n,r]=Cx(t)),s=e*(n/2)*(r/2),I(s).map(t=>2*t)}return I(s)}(r,l),e.texShape=h),null!=a){const t=Sx(r);let n,i=h[1],o=h[0];const p=a instanceof Uint8Array;l?([i,o]=lx(h[0],h[1]),n=new Hw(t,[o,i],p)):n=new Gw(t,[o,i],p);const d=this.makeTensorInfo([o,i],s);this.texData.get(d.dataId).usage=p?sx.PIXELS:sx.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,o,a);const f=!0,m=this.runWebGLProgram(n,[d],s,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeData(d.dataId),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=Z()-c)}else{const t=this.acquireTexture(h,o,s,l);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*L(e)}}const yN={kernelName:"Div",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:r,b:s}=t;return function(t,e,r){let s=new mw("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return n().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(s=new yw("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,e.shape,!0)),r.runWebGLProgram(s,[t,e],"float32")}(r,s,e)}};class bN{constructor(t){this.variableNames=["A"];const e=Bx(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class xN{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Bx(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const wN={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:r,attrs:s}=t;let{pixels:a}=e;const{numChannels:i}=s,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,c]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[c,u],p=[c,u,i];(l||o)&&(null==vN&&(vN=document.createElement("canvas").getContext("2d")),vN.canvas.width=u,vN.canvas.height=c,vN.drawImage(a,0,0,u,c),a=vN.canvas);const d=r.makeTensorInfo(h,"int32");r.texData.get(d.dataId).usage=sx.PIXELS,r.gpgpu.uploadPixelDataToTexture(r.getTexture(d.dataId),a);const f=n().getBool("WEBGL_PACK")?new xN(p):new bN(p),m=r.runWebGLProgram(f,[d],"int32");return r.disposeData(d.dataId),m}};let vN;const{maxImpl:NN,transposeImpl:CN}=Fb;function SN(t,e,n){const r=n.texData.get(t.dataId);return!r.isPacked||Ix(t.shape,e)||null!==r.texture&&Ix(r.shape,e)?{dataId:t.dataId,shape:e,dtype:t.dtype}:function(t,e,n){const r=[Nx(t.shape),...Cx(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[Nx(e),...Cx(e)],i=new kv(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(t,e,n)}function kN(t,e,n,r){const s=N(e),a=SN(t,[N(t.shape)/s,s],r),i=function t(e,n,r,s){const[a,i]=e.shape,o=Ts(i),l=new Sv({windowSize:o,inSize:i,batchSize:a},r),u=s.runWebGLProgram(l,[e],n);return 1===u.shape[1]?u:t(u,n,r,s)}(a,t.dtype,"max",r);return a.dataId!==t.dataId&&r.disposeData(a.dataId),SN(i,n,r)}class IN{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=tw(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class EN{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=tw(this.rank),s=zx("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function AN(t,e,r){const s=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new EN(t.shape,e):new IN(t.shape,e);return r.runWebGLProgram(s,[t],t.dtype)}const TN={kernelName:"Max",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n,o=r.shape.length,l=$(s,r.shape);let u=l;const c=xe(u,o),h=null!=c,p=i.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const t=i.texData.get(d.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=CN(t,r.shape,r.dtype,c,e);d=i.makeTensorInfo(e,r.dtype),i.texData.get(d.dataId).values=n}else d=AN(r,c,i);u=ve(u.length,o)}be("max",u,o);const[f,m]=ge(d.shape,u);let g,y=f;if(a&&(y=ye(f,l)),p){const t=i.texData.get(d.dataId).values,e=NN(t,N(m),y,r.dtype);g=i.makeTensorInfo(y,r.dtype),i.texData.get(g.dataId).values=e}else g=kN(d,m,y,i);return h&&i.disposeData(d.dataId),g}};const $N={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;b(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const u=[1,1];b(ze(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=Ee(r.shape,s,a,u,i),[h,p]=function(t,e,n,r){let s=new Nv(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new Nv(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,c,l);return[h,p]}},RN={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{kc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,l=e;return Eu(l.readSync(r.dataId),l.readSync(s.dataId),a,i,o)}},DN=Au,_N={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{kc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e,c=u.readSync(r.dataId),h=u.readSync(s.dataId),{selectedIndices:p,validOutputs:d}=DN(c,h,a,i,o,l);return[p,d]}},FN=Tu,ON={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{kc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e,c=u.readSync(r.dataId),h=u.readSync(s.dataId),p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=FN(c,h,p,d,f,m);return[g,y]}};class MN{constructor(t,e,n,r){this.variableNames=["Image"],this.outputShape=[];const s=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[l,u]=xc(r,s,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const zN=[TN,wN,yN,$N,RN,_N,ON,{kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,l=new MN(r.shape,s,a,i);return o.runWebGLProgram(l,[r],r.dtype)}},{kernelName:"Square",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e,s=new Hv(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},{kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:r,b:s}=t,a=e,i=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new yw("return (a - b) * (a - b);",r.shape,s.shape):new mw("return (a - b) * (a - b);",r.shape,s.shape);return a.compileAndRun(i,[r,s])}},{kernelName:"Transpose",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];let l;if(a.shouldExecuteOnCPU([r])){const t=a.texData.get(r.dataId).values,e=CN(t,r.shape,r.dtype,s,o);l=a.makeTensorInfo(o,r.dtype),a.texData.get(l.dataId).values=e}else l=AN(r,s,a);return l}}];for(const t of zN)h(t);Ft()&&ai("webgl",()=>new gN,2);const LN={"tfjs-core":"2.1.0","tfjs-backend-cpu":"2.1.0","tfjs-backend-webgl":"2.1.0","tfjs-data":"2.1.0","tfjs-layers":"2.1.0","tfjs-converter":"2.1.0",tfjs:"2.1.0"};t.Abs="Abs",t.Acos="Acos",t.Acosh="Acosh",t.AdadeltaOptimizer=lc,t.AdagradOptimizer=uc,t.AdamOptimizer=cc,t.AdamaxOptimizer=hc,t.Add="Add",t.AddN="AddN",t.All="All",t.Any="Any",t.ArgMax="ArgMax",t.ArgMin="ArgMin",t.Asin="Asin",t.Asinh="Asinh",t.Atan="Atan",t.Atan2="Atan2",t.Atanh="Atanh",t.AvgPool="AvgPool",t.AvgPool3D="AvgPool3D",t.AvgPool3DBackprop="AvgPool3DBackprop",t.AvgPoolBackprop="AvgPoolBackprop",t.BatchMatMul="BatchMatMul",t.BatchToSpaceND="BatchToSpaceND",t.BroadcastTo="BroadcastTo",t.Callback=Ig,t.CallbackList=td,t.Cast="Cast",t.Ceil="Ceil",t.ClipByValue="ClipByValue",t.Complex="Complex",t.Concat="Concat",t.Conv2D="Conv2D",t.Conv2DBackpropFilter="Conv2DBackpropFilter",t.Conv2DBackpropInput="Conv2DBackpropInput",t.Conv3D="Conv3D",t.Conv3DBackpropFilterV2="Conv3DBackpropFilterV2",t.Conv3DBackpropInputV2="Conv3DBackpropInputV2",t.Cos="Cos",t.Cosh="Cosh",t.CropAndResize="CropAndResize",t.Cumsum="Cumsum",t.CustomCallback=rd,t.DataStorage=Vc,t.DepthToSpace="DepthToSpace",t.DepthwiseConv2dNative="DepthwiseConv2dNative",t.DepthwiseConv2dNativeBackpropFilter="DepthwiseConv2dNativeBackpropFilter",t.DepthwiseConv2dNativeBackpropInput="DepthwiseConv2dNativeBackpropInput",t.Diag="Diag",t.Dilation2D="Dilation2D",t.Dilation2DBackpropFilter="Dilation2DBackpropFilter",t.Dilation2DBackpropInput="Dilation2DBackpropInput",t.Div="Div",t.EarlyStopping=Tg,t.Elu="Elu",t.EluGrad="EluGrad",t.Environment=e,t.Equal="Equal",t.Erf="Erf",t.Exp="Exp",t.Expm1="Expm1",t.FFT="FFT",t.Fill="Fill",t.Floor="Floor",t.FloorDiv="FloorDiv",t.FromPixels="FromPixels",t.FusedBatchNorm="FusedBatchNorm",t.FusedConv2D="FusedConv2D",t.FusedDepthwiseConv2D="FusedDepthwiseConv2D",t.GatherNd="GatherNd",t.GatherV2="GatherV2",t.GraphModel=Ry,t.Greater="Greater",t.GreaterEqual="GreaterEqual",t.History=nd,t.IFFT="IFFT",t.Identity="Identity",t.Imag="Imag",t.InputSpec=Vp,t.IsFinite="IsFinite",t.IsInf="IsInf",t.IsNan="IsNan",t.KernelBackend=Uc,t.LRN="LRN",t.LRNBackprop="LRNBackprop",t.LayerVariable=Bp,t.LayersModel=cf,t.Less="Less",t.LessEqual="LessEqual",t.LinSpace="LinSpace",t.Log="Log",t.Log1p="Log1p",t.LogSoftmax="LogSoftmax",t.LogicalAnd="LogicalAnd",t.LogicalNot="LogicalNot",t.LogicalOr="LogicalOr",t.Max="Max",t.MaxPool="MaxPool",t.MaxPool3D="MaxPool3D",t.MaxPool3DBackprop="MaxPool3DBackprop",t.MaxPoolBackprop="MaxPoolBackprop",t.MaxPoolWithArgmax="MaxPoolWithArgmax",t.Maximum="Maximum",t.Mean="Mean",t.Min="Min",t.Minimum="Minimum",t.Mod="Mod",t.MomentumOptimizer=dc,t.Multiply="Multiply",t.Negate="Negate",t.NonMaxSuppressionV3="NonMaxSuppressionV3",t.NonMaxSuppressionV4="NonMaxSuppressionV4",t.NonMaxSuppressionV5="NonMaxSuppressionV5",t.NotEqual="NotEqual",t.OneHot="OneHot",t.OnesLike="OnesLike",t.Optimizer=oc,t.PadV2="PadV2",t.Pool="Pool",t.Pow="Pow",t.Prelu="Prelu",t.Prod="Prod",t.RMSPropOptimizer=fc,t.RNN=Zm,t.Range="Range",t.Real="Real",t.Reciprocal="Reciprocal",t.Relu="Relu",t.Relu6="Relu6",t.Reshape="Reshape",t.ResizeBilinear="ResizeBilinear",t.ResizeBilinearGrad="ResizeBilinearGrad",t.ResizeNearestNeighbor="ResizeNearestNeighbor",t.ResizeNearestNeighborGrad="ResizeNearestNeighborGrad",t.Reverse="Reverse",t.RotateWithOffset="RotateWithOffset",t.Round="Round",t.Rsqrt="Rsqrt",t.SGDOptimizer=pc,t.ScatterNd="ScatterNd",t.SelectV2="SelectV2",t.Selu="Selu",t.Sequential=pf,t.Sigmoid="Sigmoid",t.Sign="Sign",t.Sin="Sin",t.Sinh="Sinh",t.Slice="Slice",t.Softmax="Softmax",t.Softplus="Softplus",t.SpaceToBatchND="SpaceToBatchND",t.SparseToDense="SparseToDense",t.SplitV="SplitV",t.Sqrt="Sqrt",t.Square="Square",t.SquaredDifference="SquaredDifference",t.Step="Step",t.StridedSlice="StridedSlice",t.Sub="Sub",t.Sum="Sum",t.SymbolicTensor=Up,t.Tan="Tan",t.Tanh="Tanh",t.Tensor=mt,t.TensorBuffer=pt,t.Tile="Tile",t.TopK="TopK",t.Transpose="Transpose",t.Unpack="Unpack",t.UnsortedSegmentSum="UnsortedSegmentSum",t.Variable=gt,t.ZerosLike="ZerosLike",t._FusedMatMul="_FusedMatMul",t.abs=oi,t.acos=li,t.acosh=ui,t.add=he,t.addN=ci,t.addStrict=Hl,t.all=hi,t.any=pi,t.argMax=di,t.argMin=fi,t.asin=mi,t.asinh=gi,t.atan=yi,t.atan2=bi,t.atanh=xi,t.avgPool=wi,t.avgPool3d=vi,t.backend=ii,t.backend_util=zc,t.basicLSTMCell=Ci,t.batchNorm=ki,t.batchNorm2d=Ii,t.batchNorm3d=Ei,t.batchNorm4d=Ai,t.batchToSpaceND=os,t.booleanMaskAsync=Ll,t.broadcastTo=Ti,t.browser=La,t.buffer=$i,t.callbacks=$g,t.cast=Vt,t.ceil=Ri,t.clipByValue=Di,t.clone=Ir,t.complex=hr,t.concat=ps,t.concat1d=_i,t.concat2d=Fi,t.concat3d=Oi,t.concat4d=Mi,t.constraints=kh,t.conv1d=zi,t.conv2d=ln,t.conv2dTranspose=Li,t.conv3d=Bi,t.conv3dTranspose=Pi,t.cos=zr,t.cosh=Br,t.cosineWindow=ou,t.cumsum=bn,t.customGrad=ho,t.data=Rb,t.deprecationWarn=Qa,t.depthToSpace=Wi,t.depthwiseConv2d=Vi,t.deregisterOp=function(t){delete _g[t]},t.device_util=Ot,t.diag=Ui,t.dilation2d=Gi,t.disableDeprecationWarnings=function(){n().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},t.dispose=ri,t.disposeVariables=function(){Dt.disposeVariables()},t.div=jt,t.divNoNan=Hi,t.divStrict=ql,t.dot=qi,t.dropout=au,t.elu=ji,t.enableDebugMode=function(){n().set("DEBUG",!0)},t.enableProdMode=function(){n().set("PROD",!0)},t.enclosingPowerOfTwo=iu,t.engine=ti,t.env=n,t.equal=Xn,t.equalStrict=Bl,t.erf=Ki,t.exp=In,t.expandDims=Is,t.expm1=Xi,t.eye=Yi,t.fft=Ji,t.fill=Zi,t.findBackend=function(t){return Dt.findBackend(t)},t.findBackendFactory=function(t){return Dt.findBackendFactory(t)},t.floor=or,t.floorDiv=qt,t.fused=gu,t.gather=Ds,t.gatherND=su,t.gather_util=Pa,t.getBackend=function(){return Dt.backendName},t.getGradient=u,t.getKernel=l,t.getKernelsForBackend=c,t.grad=function(t){return b(G(t),()=>"The f passed in grad(f) must be a function"),(e,n)=>{const r=Bt(e,"x","tf.grad",null),s=null!=n?Bt(n,"dy","tf.grad"):null;return Dt.tidy(()=>{const{value:e,grads:n}=Dt.gradients(()=>t(r),[r],s);return null!=s&&x(e.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),po(n),n[0]})}},t.grads=function(t){return b(G(t),()=>"The f passed in grads(f) must be a function"),(e,n)=>{b(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=Pt(e,"args","tf.grads",null),s=null!=n?Bt(n,"dy","tf.grads"):null;return Dt.tidy(()=>{const{value:e,grads:n}=Dt.gradients(()=>t(...r),r,s);return null!=s&&x(e.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),po(n),n})}},t.greater=ar,t.greaterEqual=Ye,t.greaterEqualStrict=Pl,t.greaterStrict=Wl,t.ifft=Qi,t.imag=to,t.image=rc,t.inTopKAsync=lu,t.initializers=Tp,t.input=df,t.io=Ra,t.irfft=no,t.isFinite=ro,t.isInf=so,t.isNaN=ao,t.keep=si,t.kernel_impls=Wc,t.layers=Ng,t.leakyRelu=io,t.less=Zn,t.lessEqual=Je,t.lessEqualStrict=Vl,t.lessStrict=Ul,t.linalg=sc,t.linspace=oo,t.loadGraphModel=async function(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file");const n=new Ry(t,e);return await n.load(),n},t.loadLayersModel=function(t,e){return null==e&&(e={}),hf(t,e)},t.localResponseNormalization=lo,t.log=gr,t.log1p=uo,t.logSigmoid=fo,t.logSoftmax=go,t.logSumExp=yo,t.logicalAnd=Ze,t.logicalNot=Rr,t.logicalOr=bo,t.logicalXor=xo,t.losses=ac,t.matMul=Ue,t.math=Fa,t.max=mo,t.maxPool=wo,t.maxPool3d=vo,t.maxPoolWithArgmax=No,t.maximum=_s,t.maximumStrict=jl,t.mean=Co,t.memory=ei,t.metrics=Cg,t.min=So,t.minimum=ko,t.minimumStrict=Kl,t.mod=Io,t.modStrict=Xl,t.model=function(t){return new cf(t)},t.models=Sg,t.moments=Eo,t.movingAverage=eu,t.mul=Ut,t.mulStrict=Yl,t.multiRNNCell=Ao,t.multinomial=To,t.neg=Kt,t.nextFrame=bc,t.norm=tu,t.notEqual=$o,t.notEqualStrict=Gl,t.oneHot=Da,t.ones=xs,t.onesLike=Ro,t.op=Wt,t.outerProduct=Do,t.pad=Wr,t.pad1d=_o,t.pad2d=Fo,t.pad3d=Oo,t.pad4d=Mo,t.pool=zo,t.pow=yr,t.powStrict=Jl,t.prelu=Lo,t.print=Bo,t.prod=Po,t.profile=function(t){return Dt.profile(t)},t.rand=Wo,t.randomGamma=tl,t.randomNormal=el,t.randomUniform=nl,t.range=sl,t.ready=function(){return Dt.ready()},t.real=eo,t.reciprocal=al,t.registerBackend=ai,t.registerCallbackConstructor=function(t,e){ad.registerCallbackConstructor(t,e)},t.registerGradient=p,t.registerKernel=h,t.registerOp=function(t,e){const n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};_g[t]=n},t.regularizers=kg,t.relu=il,t.relu6=ol,t.removeBackend=function(t){Dt.removeBackend(t)},t.reshape=de,t.reverse=Er,t.reverse1d=ll,t.reverse2d=ul,t.reverse3d=cl,t.reverse4d=hl,t.rfft=pl,t.round=dl,t.rsqrt=Dn,t.scalar=Yt,t.scatterND=nu,t.scatter_util=Ga,t.selu=fl,t.separableConv2d=ml,t.sequential=function(t){return new pf(t)},t.serialization=Ka,t.setBackend=function(t){return Dt.setBackend(t)},t.setPlatform=function(t,e){n().setPlatform(t,e)},t.setdiff1dAsync=gl,t.sigmoid=as,t.sign=yl,t.signal=nc,t.sin=dn,t.sinh=mn,t.slice=Cs,t.slice1d=bl,t.slice2d=xl,t.slice3d=wl,t.slice4d=vl,t.slice_util=ns,t.softmax=Nl,t.softplus=Cl,t.spaceToBatchND=He,t.sparseToDense=ru,t.spectral=ec,t.split=nn,t.sqrt=Jt,t.square=Zt,t.squaredDifference=Sl,t.squaredDifferenceStrict=Zl,t.squeeze=kl,t.stack=Es,t.step=Gt,t.stridedSlice=Il,t.sub=Qt,t.subStrict=Ql,t.sum=Ne,t.sumOutType=St,t.tan=El,t.tanh=Ni,t.tensor=hs,t.tensor1d=rl,t.tensor2d=Al,t.tensor3d=Oa,t.tensor4d=Tl,t.tensor5d=$l,t.tensor6d=Rl,t.tensor_util=Tt,t.test_util=Za,t.tidy=ni,t.tile=_n,t.time=function(t){return Dt.time(t)},t.topk=Dl,t.train=gc,t.transpose=yn,t.truncatedNormal=_l,t.unregisterGradient=function(t){if(!o.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);o.delete(t)},t.unregisterKernel=function(t,e){const n=d(t,e);if(!i.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);i.delete(n)},t.unsortedSegmentSum=On,t.unstack=Fl,t.upcastType=Ct,t.util=at,t.valueAndGrad=function(t){return b(G(t),()=>"The f passed in valueAndGrad(f) must be a function"),(e,n)=>{b(e instanceof mt,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),b(null==n||n instanceof mt,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:r,value:s}=Dt.gradients(()=>t(e),[e],n);return po(r),{grad:r[0],value:s}}},t.valueAndGrads=function(t){return b(G(t),()=>"The f passed in valueAndGrads(f) must be a function"),(e,n)=>{b(Array.isArray(e)&&e.every(t=>t instanceof mt),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),b(null==n||n instanceof mt,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const r=Dt.gradients(()=>t(...e),e,n);return null!=n&&x(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),po(r.grads),r}},t.variable=Ol,t.variableGrads=co,t.version=LN,t.version_converter="2.1.0",t.version_core="2.1.0",t.version_layers="2.1.0",t.where=Qe,t.whereAsync=zl,t.zeros=pr,t.zerosLike=oe,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=tf.es2017.min.js.map
